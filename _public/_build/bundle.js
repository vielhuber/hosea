(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Auth = _interopRequireDefault(require("./Auth"));
var _Attachments = _interopRequireDefault(require("./Attachments"));
var _Footer = _interopRequireDefault(require("./Footer"));
var _Filter = _interopRequireDefault(require("./Filter"));
var _Html = _interopRequireDefault(require("./Html"));
var _Keyboard = _interopRequireDefault(require("./Keyboard"));
var _Scheduler = _interopRequireDefault(require("./Scheduler"));
var _Quickbox = _interopRequireDefault(require("./Quickbox"));
var _Sort = _interopRequireDefault(require("./Sort"));
var _Store = _interopRequireDefault(require("./Store"));
var _Textarea = _interopRequireDefault(require("./Textarea"));
var _Tickets = _interopRequireDefault(require("./Tickets"));
var _User = _interopRequireDefault(require("./User"));
var _Weather = _interopRequireDefault(require("./Weather"));
var App = /*#__PURE__*/function () {
  function App() {
    (0, _classCallCheck2["default"])(this, App);
  }
  (0, _createClass2["default"])(App, null, [{
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _Store["default"].initStore();
              _context.next = 3;
              return _Auth["default"].login();
            case 3:
              _context.next = 5;
              return _User["default"].fetchUser();
            case 5:
              _Html["default"].buildHtml();
              _context.next = 8;
              return _Tickets["default"].fetchAndRenderTickets();
            case 8:
              _context.next = 10;
              return _Weather["default"].fetchWeather();
            case 10:
              _Tickets["default"].fetchAndRenderTicketsInterval();
              _Keyboard["default"].initKeyboardNavigation();
              _Scheduler["default"].initScheduler();
              _Quickbox["default"].initQuickbox();
              _Quickbox["default"].bindQuickbox();
              // currently disabled, because we use both columns independently
              //Tickets.bindAutoTime();
              _Tickets["default"].bindChangeTracking();
              _Tickets["default"].bindValidation();
              _Attachments["default"].bindUpload();
              _Attachments["default"].bindDownload();
              _Attachments["default"].bindDeleteAttachment();
              _Tickets["default"].bindDelete();
              _Tickets["default"].bindSave();
              _Footer["default"].bindSave();
              _Footer["default"].bindCreate();
              _Footer["default"].bindLogout();
              _Footer["default"].linkApiKey();
              _Footer["default"].initStatus();
              _Keyboard["default"].bindRefresh();
              _Tickets["default"].bindCreate();
              _Scheduler["default"].bindScheduler();
              _Sort["default"].initSort();
              _Filter["default"].initFilter();
              _Scheduler["default"].updateColors();
              _Tickets["default"].updateSum();
              _Textarea["default"].textareaAutoHeight();
            case 35:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }]);
  return App;
}();
exports["default"] = App;

},{"./Attachments":2,"./Auth":3,"./Filter":5,"./Footer":6,"./Html":8,"./Keyboard":9,"./Quickbox":11,"./Scheduler":12,"./Sort":13,"./Store":14,"./Textarea":15,"./Tickets":16,"./User":17,"./Weather":18,"@babel/runtime/helpers/asyncToGenerator":23,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/regenerator":39}],2:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Helper = _interopRequireDefault(require("./Helper"));
var _Html = _interopRequireDefault(require("./Html"));
var _Lock = _interopRequireDefault(require("./Lock"));
var _Store = _interopRequireDefault(require("./Store"));
var _Tickets = _interopRequireDefault(require("./Tickets"));
var _Footer = _interopRequireDefault(require("./Footer"));
var _Dates = _interopRequireDefault(require("./Dates"));
var Attachments = /*#__PURE__*/function () {
  function Attachments() {
    (0, _classCallCheck2["default"])(this, Attachments);
  }
  (0, _createClass2["default"])(Attachments, null, [{
    key: "bindDownload",
    value: function bindDownload() {
      document.querySelector('.tickets').addEventListener('click', function (e) {
        if (e.target.closest('.tickets__attachment-download')) {
          Attachments.startDownload(e.target.closest('.tickets__attachment').getAttribute('data-id'));
          e.preventDefault();
        }
      });
    }
  }, {
    key: "startDownload",
    value: function startDownload(attachment_id) {
      _Store["default"].data.busy = true;
      _Store["default"].data.api.fetch('_api/attachments/' + attachment_id, {
        method: 'GET',
        cache: 'no-cache',
        headers: {
          'content-type': 'application/json'
        }
      }).then(function (res) {
        return res.json();
      })["catch"](function (err) {
        console.error(err);
      }).then(function (response) {
        _Store["default"].data.busy = false;
        var base64 = response.data.data,
          filename = response.data.name,
          url = hlp.base64tourl(base64);
        var a = document.createElement('a');
        a.setAttribute('style', 'display:none');
        a.setAttribute('download', filename);
        a.setAttribute('href', url);
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        a.remove();
      });
    }
  }, {
    key: "bindUpload",
    value: function bindUpload() {
      document.querySelector('.tickets').addEventListener('change', function (e) {
        if (e.target.closest('.tickets__entry input[type="file"]')) {
          Attachments.startUploadsAndBuildHtml(e.target.closest('.tickets__entry').getAttribute('data-id'), e.target.files);
        }
      });
    }
  }, {
    key: "startUploadsAndBuildHtml",
    value: function startUploadsAndBuildHtml(ticket_id, files) {
      Attachments.startUploads(ticket_id, files).then(function (attachments) {
        var el = document.querySelector('.tickets .tickets__entry[data-id="' + ticket_id + '"] input[type="file"]');
        el.value = '';
        attachments.forEach(function (attachments__value) {
          el.closest('.tickets__entry').querySelector('.tickets__attachments').insertAdjacentHTML('beforeend', _Html["default"].createHtmlDownloadLine(attachments__value));
        });
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }, {
    key: "startUploads",
    value: function () {
      var _startUploads = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(ticket_id, files) {
        var attachments, _i, _Array$from, files__value, attachment;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              attachments = [];
              _i = 0, _Array$from = Array.from(files);
            case 2:
              if (!(_i < _Array$from.length)) {
                _context.next = 13;
                break;
              }
              files__value = _Array$from[_i];
              _Lock["default"].lockTicket(ticket_id);
              _context.next = 7;
              return Attachments.startUpload(ticket_id, files__value);
            case 7:
              attachment = _context.sent;
              _Lock["default"].unlockTicket(ticket_id, true);
              if (attachment !== null) {
                attachments.push(attachment);
              }
            case 10:
              _i++;
              _context.next = 2;
              break;
            case 13:
              _context.next = 15;
              return _Tickets["default"].updateLocalTicket(ticket_id);
            case 15:
              return _context.abrupt("return", attachments);
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function startUploads(_x, _x2) {
        return _startUploads.apply(this, arguments);
      }
      return startUploads;
    }()
  }, {
    key: "startUpload",
    value: function startUpload(ticket_id, file) {
      return new Promise(function (resolve, reject) {
        if (file.size / 1024 / 1024 > 5) {
          _Footer["default"].updateStatus('size gt 5 mb!', 'error');
          resolve(null);
          return;
        }
        _Helper["default"].fileToBase64(file).then(function (base64) {
          _Store["default"].data.busy = true;
          _Store["default"].data.api.fetch('_api/attachments', {
            method: 'POST',
            body: JSON.stringify({
              name: file.name,
              data: base64,
              ticket_id: ticket_id
            }),
            cache: 'no-cache',
            headers: {
              'content-type': 'application/json'
            }
          }).then(function (res) {
            return res.json();
          })["catch"](function (err) {
            console.error(err);
          }).then(function (response) {
            _Store["default"].data.busy = false;
            var updated_at = _Dates["default"].time().toString();
            _Tickets["default"].setTicketData(ticket_id, 'updated_at', updated_at);
            _Store["default"].data.busy = true;
            _Store["default"].data.api.fetch('_api/tickets/' + ticket_id, {
              method: 'PUT',
              body: JSON.stringify({
                updated_at: updated_at
              }),
              cache: 'no-cache',
              headers: {
                'content-type': 'application/json'
              }
            }).then(function (res) {
              return res.json();
            })["catch"](function (err) {
              console.error(err);
            }).then(function (response) {
              _Store["default"].data.busy = false;
            });
            resolve(response.data);
          });
        });
      });
    }
  }, {
    key: "bindDeleteAttachment",
    value: function bindDeleteAttachment() {
      document.querySelector('.tickets').addEventListener('click', function (e) {
        if (e.target.closest('.tickets__attachment-delete')) {
          var ticket_id = e.target.closest('.tickets__entry').getAttribute('data-id');
          if (_Lock["default"].ticketIsLocked(ticket_id)) {
            e.preventDefault();
          }
          var attachment_id = e.target.closest('.tickets__attachment').getAttribute('data-id');
          _Store["default"].data.busy = true;
          _Store["default"].data.api.fetch('_api/attachments/' + attachment_id, {
            method: 'DELETE',
            cache: 'no-cache',
            headers: {
              'content-type': 'application/json'
            }
          }).then(function (res) {
            return res.json();
          })["catch"](function (err) {
            console.error(err);
          }).then(function (response) {
            _Store["default"].data.busy = false;
            var updated_at = _Dates["default"].time().toString();
            _Tickets["default"].setTicketData(ticket_id, 'updated_at', updated_at);
            _Store["default"].data.busy = true;
            _Store["default"].data.api.fetch('_api/tickets/' + ticket_id, {
              method: 'PUT',
              body: JSON.stringify({
                updated_at: updated_at
              }),
              cache: 'no-cache',
              headers: {
                'content-type': 'application/json'
              }
            }).then(function (res) {
              return res.json();
            })["catch"](function (err) {
              console.error(err);
            }).then(function (response) {
              _Store["default"].data.busy = false;
            });
            e.target.closest('.tickets__attachment').remove();
          });
          e.preventDefault();
        }
      });
    }
  }]);
  return Attachments;
}();
exports["default"] = Attachments;

},{"./Dates":4,"./Footer":6,"./Helper":7,"./Html":8,"./Lock":10,"./Store":14,"./Tickets":16,"@babel/runtime/helpers/asyncToGenerator":23,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/regenerator":39}],3:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Store = _interopRequireDefault(require("./Store"));
var _jwtbutler = _interopRequireDefault(require("jwtbutler"));
var Auth = /*#__PURE__*/function () {
  function Auth() {
    (0, _classCallCheck2["default"])(this, Auth);
  }
  (0, _createClass2["default"])(Auth, null, [{
    key: "login",
    value: function login() {
      _Store["default"].data.api = new _jwtbutler["default"]({
        auth_server: '_auth'
      });
      return _Store["default"].data.api.login();
    }
  }, {
    key: "logout",
    value: function logout() {
      return _Store["default"].data.api.logout();
    }
  }]);
  return Auth;
}();
exports["default"] = Auth;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"jwtbutler":42}],4:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Store = _interopRequireDefault(require("./Store"));
var Dates = /*#__PURE__*/function () {
  function Dates() {
    (0, _classCallCheck2["default"])(this, Dates);
  }
  (0, _createClass2["default"])(Dates, null, [{
    key: "getCurrentDate",
    value: function getCurrentDate() {
      return new Date();
    }
  }, {
    key: "getActiveDate",
    value: function getActiveDate() {
      return _Store["default"].data.session.activeDay;
    }
  }, {
    key: "getDayOfActiveWeek",
    value: function getDayOfActiveWeek(shift) {
      return Dates.getDayOfWeek(shift, _Store["default"].data.session.activeDay);
    }
  }, {
    key: "getDayOfCurrentWeek",
    value: function getDayOfCurrentWeek(shift) {
      return Dates.getDayOfWeek(shift, this.getCurrentDate());
    }
  }, {
    key: "getDayOfWeek",
    value: function getDayOfWeek(shift, date) {
      var d = new Date(date),
        day = d.getDay(),
        diff = d.getDate() - day + (day == 0 ? -6 : 1) + (shift - 1);
      return new Date(d.setDate(diff));
    }
  }, {
    key: "parseDateString",
    value: function parseDateString(string, view) {
      var _this = this;
      if (!['tickets', 'scheduler', 'today', 'all'].includes(view)) {
        return false;
      }
      if (string == '') {
        return [];
      }
      var ret = [],
        error = false,
        d;
      string.split('\n').forEach(function (string__value) {
        // 01.01.18
        // 01.01.18 09:00-10:00
        if (new RegExp('^[0-9][0-9].[0-9][0-9].[1-2][0-9]( [0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9])?$').test(string__value)) {
          d = new Date('20' + string__value.substring(6, 8) + '-' + string__value.substring(3, 5) + '-' + string__value.substring(0, 2));
          if (isNaN(d)) {
            error = true;
            return;
          }
          if (view === 'tickets' && Dates.dateIsActiveDay(d) || view === 'scheduler' && Dates.dateIsInActiveWeek(d) || view === 'today' && Dates.dateIsToday(d) || view === 'all') {
            var begin = string__value.length > 8 ? parseInt(string__value.substring(9, 11)) + parseInt(string__value.substring(12, 14)) / 60 : null,
              end = string__value.length > 8 ? parseInt(string__value.substring(15, 17)) + parseInt(string__value.substring(18, 20)) / 60 : null;
            if (end === 0) {
              end = 24;
            }
            d.setHours(Math.floor(begin === null ? 0 : begin));
            d.setMinutes((begin === null ? 0 : begin) % 1 * 60);
            d.setSeconds(0);
            d.setMilliseconds(0);
            ret.push({
              date: d,
              day: (d.getDay() + 6) % 7 + 1,
              begin: begin,
              end: end,
              time: end - begin,
              minutes_left: _this.dateDiffInMinutes(d, new Date())
            });
          }
        }

        // MO [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO#1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO#12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO~1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO~12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO%2 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        else if (new RegExp('^(MO|DI|MI|DO|FR|SA|SO)((#|~|%)[1-9][0-9]?)?( [0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9])?( (-|>|<)[0-9][0-9].[0-9][0-9].[1-2][0-9])*$').test(string__value)) {
          if (view === 'today') {
            d = Dates.getDayOfCurrentWeek(Dates.getDayFromString(string__value.substring(0, 2)));
          } else {
            d = Dates.getDayOfActiveWeek(Dates.getDayFromString(string__value.substring(0, 2)));
          }
          if (isNaN(d)) {
            error = true;
            return;
          }
          if (view !== 'all' && Dates.dateIsExcluded(d, string__value)) {
            return;
          }
          if (view !== 'all' && string__value.substring(2, 3) === '#') {
            var num = parseInt(string__value.substring(3, 5).trim()),
              nthWeekdayOfMonth = _this.nthWeekdayOfMonth(d);
            if (num % 4 !== nthWeekdayOfMonth) {
              return;
            }
            if ((d.getMonth() + 1) % (Math.floor((num - 1) / 4) + 1) !== 0) {
              return;
            }
          }
          if (view !== 'all' && string__value.substring(2, 3) === '~') {
            var _num = parseInt(string__value.substring(3, 5).trim()),
              weekNumber = _this.weekNumber(d);
            if (_num != weekNumber) {
              return;
            }
          }
          if (view !== 'all' && string__value.substring(2, 3) === '%') {
            var _num2 = parseInt(string__value.substring(3, 5).trim()),
              _weekNumber = _this.weekNumber(d),
              match = string__value.match(/>([0-9][0-9]\.[0-9][0-9]\.[0-9][0-9])/i);
            if (match) {
              _weekNumber -= _this.weekNumber(new Date(Dates.germanToEnglishString(match[1])));
            }
            if (_weekNumber % _num2 !== 0) {
              return;
            }
          }
          if (view === 'tickets' && Dates.dateIsActiveDay(d) || view === 'scheduler' && Dates.dateIsInActiveWeek(d) || view === 'today' && Dates.dateIsToday(d) || view === 'all') {
            var _begin = null,
              _end = null;
            if (string__value.split(':').length === 3) {
              var shift = string__value.indexOf(':') - 2;
              _begin = parseInt(string__value.substring(shift, shift + 2)) + parseInt(string__value.substring(shift + 3, shift + 5)) / 60;
              _end = parseInt(string__value.substring(shift + 6, shift + 8)) + parseInt(string__value.substring(shift + 9, shift + 11)) / 60;
            }
            if (_end === 0) {
              _end = 24;
            }
            d.setHours(Math.floor(_begin));
            d.setMinutes(_begin % 1 * 60);
            d.setSeconds(0);
            d.setMilliseconds(0);
            ret.push({
              date: d,
              day: (d.getDay() + 6) % 7 + 1,
              begin: _begin,
              end: _end,
              time: _end - _begin,
              minutes_left: _this.dateDiffInMinutes(d, new Date())
            });
          }
        }

        // 01.01. [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // 01.01. 09:00-10:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        else if (new RegExp('^[0-9][0-9].[0-9][0-9].( [0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9])?( (-|>|<)[0-9][0-9].[0-9][0-9].[1-2][0-9])*$').test(string__value)) {
          var year = null;
          if (view === 'today') {
            year = Dates.getCurrentDate().getFullYear();
          } else {
            year = Dates.getActiveDate().getFullYear();
          }
          // exception on year change
          if (Dates.weekNumber(Dates.getActiveDate()) === 1 && Dates.getActiveDate().getMonth() + 1 != string__value.substring(3, 5)) {
            year--;
          }
          d = new Date(year + '-' + string__value.substring(3, 5) + '-' + string__value.substring(0, 2));
          if (isNaN(d)) {
            error = true;
            return;
          }
          if (view !== 'all' && Dates.dateIsExcluded(d, string__value)) {
            return;
          }
          if (view === 'tickets' && Dates.dateIsActiveDay(d) || view === 'scheduler' && Dates.dateIsInActiveWeek(d) || view === 'today' && Dates.dateIsToday(d) || view === 'all') {
            var _begin2 = null,
              _end2 = null;
            if (string__value.split(':').length === 3) {
              var _shift = string__value.indexOf(':') - 2;
              _begin2 = parseInt(string__value.substring(_shift, _shift + 2)) + parseInt(string__value.substring(_shift + 3, _shift + 5)) / 60;
              _end2 = parseInt(string__value.substring(_shift + 6, _shift + 8)) + parseInt(string__value.substring(_shift + 9, _shift + 11)) / 60;
            }
            if (_end2 === 0) {
              _end2 = 24;
            }
            d.setHours(Math.floor(_begin2));
            d.setMinutes(_begin2 % 1 * 60);
            d.setSeconds(0);
            d.setMilliseconds(0);
            ret.push({
              date: d,
              day: (d.getDay() + 6) % 7 + 1,
              begin: _begin2,
              end: _end2,
              time: _end2 - _begin2,
              minutes_left: _this.dateDiffInMinutes(d, new Date())
            });
          }
        } else {
          error = true;
          return;
        }
      });
      if (error === true) {
        return false;
      }
      return ret;
    }
  }, {
    key: "germanToEnglishString",
    value: function germanToEnglishString(str) {
      return '20' + str.substring(6, 8) + '-' + str.substring(3, 5) + '-' + str.substring(0, 2);
    }
  }, {
    key: "germanDateTimeToEnglishString",
    value: function germanDateTimeToEnglishString(str) {
      return '20' + str.substring(6, 8) + '-' + str.substring(3, 5) + '-' + str.substring(0, 2) + str.substring(9);
    }
  }, {
    key: "dateFormat",
    value: function dateFormat(d, format) {
      if (format === 'D d.m.') {
        return ['SO', 'MO', 'DI', 'MI', 'DO', 'FR', 'SA'][d.getDay()] + ' ' + ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.';
      }
      if (format === 'd. F Y') {
        return ('0' + d.getDate()).slice(-2) + '. ' + ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'][d.getMonth()] + ' ' + d.getFullYear();
      }
      if (format === 'Y-m-d') {
        return d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2);
      }
      if (format === 'd.m.Y') {
        return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear();
      }
      if (format === 'd.m.y') {
        return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear().toString().substring(2, 4);
      }
      if (format === 'd.m.') {
        return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.';
      }
      if (format === 'D H:i') {
        return ['SO', 'MO', 'DI', 'MI', 'DO', 'FR', 'SA'][d.getDay()] + ' ' + ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2);
      }
      if (format === 'H:i') {
        return ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2);
      }
      return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear() + ' ' + ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2) + ':' + ('0' + d.getSeconds()).slice(-2);
    }
  }, {
    key: "timeFormat",
    value: function timeFormat(_float) {
      var hours = Math.floor(_float),
        minutes = _float % 1 * 60;
      return ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2);
    }
  }, {
    key: "dateIsInActiveWeek",
    value: function dateIsInActiveWeek(d) {
      if (d === null || d === '') {
        return false;
      }
      d = new Date(d);
      return Dates.sameDay(Dates.getDayOfWeek(1, d), Dates.getDayOfActiveWeek(1));
    }
  }, {
    key: "dateIsActiveDay",
    value: function dateIsActiveDay(d) {
      if (d === null || d === '') {
        return false;
      }
      d = new Date(d);
      return Dates.sameDay(d, Dates.getActiveDate());
    }
  }, {
    key: "dateIsInFuture",
    value: function dateIsInFuture(d) {
      if (d === null || d === '') {
        return false;
      }
      var d1 = new Date(d),
        d2 = new Date();
      d1.setHours(0);
      d1.setMinutes(0);
      d1.setSeconds(0);
      d1.setMilliseconds(0);
      d2.setHours(0);
      d2.setMinutes(0);
      d2.setSeconds(0);
      d2.setMilliseconds(0);
      return d1 > d2;
    }
  }, {
    key: "dateIsToday",
    value: function dateIsToday(d) {
      if (d === null || d === '') {
        return false;
      }
      var d1 = new Date(d),
        d2 = new Date();
      return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();
    }
  }, {
    key: "dateIsInPast",
    value: function dateIsInPast(d) {
      if (d === null || d === '') {
        return false;
      }
      var d1 = new Date(d),
        d2 = new Date();
      d1.setHours(0);
      d1.setMinutes(0);
      d1.setSeconds(0);
      d1.setMilliseconds(0);
      d2.setHours(0);
      d2.setMinutes(0);
      d2.setSeconds(0);
      d2.setMilliseconds(0);
      return d1 < d2;
    }
  }, {
    key: "sameDay",
    value: function sameDay(d1, d2) {
      if (d1 === null || d1 === '') {
        return false;
      }
      d1 = new Date(d1);
      d2 = new Date(d2);
      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
    }
  }, {
    key: "compareDates",
    value: function compareDates(d1, d2) {
      if (d1.getFullYear() < d2.getFullYear()) {
        return -1;
      }
      if (d1.getFullYear() > d2.getFullYear()) {
        return 1;
      }
      if (d1.getMonth() < d2.getMonth()) {
        return -1;
      }
      if (d1.getMonth() > d2.getMonth()) {
        return 1;
      }
      if (d1.getDate() < d2.getDate()) {
        return -1;
      }
      if (d1.getDate() > d2.getDate()) {
        return 1;
      }
      return 0;
    }
  }, {
    key: "dateDiffInMinutes",
    value: function dateDiffInMinutes(d1, d2) {
      return Math.round((d1 - d2) / (1000 * 60));
    }
  }, {
    key: "weekNumber",
    value: function weekNumber(d) {
      d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
      var dayNum = d.getUTCDay() || 7;
      d.setUTCDate(d.getUTCDate() + 4 - dayNum);
      var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
      return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
    }
  }, {
    key: "isDate",
    value: function isDate(string) {
      return new Date(string) !== 'Invalid Date' && !isNaN(new Date(string));
    }
  }, {
    key: "getDayFromString",
    value: function getDayFromString(string) {
      return {
        MO: 1,
        DI: 2,
        MI: 3,
        DO: 4,
        FR: 5,
        SA: 6,
        SO: 7
      }[string];
    }
  }, {
    key: "getStringFromDay",
    value: function getStringFromDay(day) {
      return {
        1: MO,
        2: DI,
        3: MI,
        4: DO,
        5: FR,
        6: SA,
        7: SO
      }[day];
    }
  }, {
    key: "dateIsExcluded",
    value: function dateIsExcluded(d, str) {
      var ret = false;
      str.split(' ').forEach(function (value) {
        var excludedDate = new Date(Dates.germanToEnglishString(value.substring(1)));
        if (value.indexOf('-') === 0) {
          if (Dates.sameDay(excludedDate, d)) {
            ret = true;
          }
        }
        if (value.indexOf('>') === 0) {
          if (Dates.compareDates(excludedDate, d) !== -1) {
            ret = true;
          }
        }
        if (value.indexOf('<') === 0) {
          if (Dates.compareDates(excludedDate, d) !== 1) {
            ret = true;
          }
        }
      });
      return ret;
    }
  }, {
    key: "extractTimeFromDate",
    value: function extractTimeFromDate(d) {
      var match = d.match(new RegExp('[0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9]'));
      if (match !== null) {
        return match[0];
      }
      return '';
    }
  }, {
    key: "dayOfYear",
    value: function dayOfYear(date) {
      return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;
    }
  }, {
    key: "nthWeekdayOfMonth",
    value: function nthWeekdayOfMonth(date) {
      var c = date.getDate();
      return Math.floor((c - 1) / 7) + 1;
    }
  }, {
    key: "includeNewLowerBoundInDate",
    value: function includeNewLowerBoundInDate(date, lowerBound) {
      date = date.split('\n');
      date.forEach(function (date__value, date__key) {
        var match = date__value.match(new RegExp('>[0-9][0-9].[0-9][0-9].[1-2][0-9]', 'g')),
          isObsolete = false;
        if (match !== null) {
          match.forEach(function (match__value) {
            var curBound = new Date(Dates.germanToEnglishString(match__value.substring(1)));
            if (Dates.compareDates(lowerBound, curBound) === 1) {
              date__value = date__value.split(match__value).join('');
            } else {
              isObsolete = true;
            }
          });
        }
        date__value = date__value.replace(/ +(?= )/g, ''); // remove double whitespaces
        date__value = date__value.trim();
        if (isObsolete === false) {
          date__value = date__value + ' >' + Dates.dateFormat(Dates.getActiveDate(), 'd.m.y');
        }
        date[date__key] = date__value;
      });
      date = date.join('\n');
      return date;
    }
  }, {
    key: "time",
    value: function time() {
      return Math.floor(new Date().getTime() / 1000);
    }
  }]);
  return Dates;
}();
/* debug */
exports["default"] = Dates;
window.Dates = Dates;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27}],5:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Dates = _interopRequireDefault(require("./Dates"));
var _Tickets = _interopRequireDefault(require("./Tickets"));
var _Sort = _interopRequireDefault(require("./Sort"));
var _Store = _interopRequireDefault(require("./Store"));
var _Scheduler = _interopRequireDefault(require("./Scheduler"));
var _Textarea = _interopRequireDefault(require("./Textarea"));
var Filter = /*#__PURE__*/function () {
  function Filter() {
    (0, _classCallCheck2["default"])(this, Filter);
  }
  (0, _createClass2["default"])(Filter, null, [{
    key: "initFilter",
    value: function initFilter() {
      Filter.initUpdateFilter(false);
    }
  }, {
    key: "updateFilter",
    value: function updateFilter() {
      Filter.initUpdateFilter(true);
    }
  }, {
    key: "initUpdateFilter",
    value: function initUpdateFilter(update) {
      var selected = {};
      if (update === true) {
        document.querySelector('.metabar__filter').querySelectorAll('.metabar__select--filter').forEach(function (el) {
          selected[el.getAttribute('name')] = el.value;
        });
        document.querySelector('.metabar__filter').remove();
      }
      document.querySelector('.metabar').insertAdjacentHTML('beforeend', '<div class="metabar__filter"></div>');
      ['status', 'priority', 'date', 'project'].forEach(function (columns__value) {
        document.querySelector('.metabar__filter').insertAdjacentHTML('beforeend', "\n                <select class=\"metabar__select metabar__select--filter\" name=\"".concat(columns__value, "\">\n                    <option value=\"*\">").concat(columns__value, "</option>\n                </select>\n            "));
        if (columns__value === 'date') {
          document.querySelector('.metabar__select--filter[name="date"]').insertAdjacentHTML('beforeend', '<option value=""></option>');
          var firstDay = new Date('2018-01-01 00:00:00');
          var curDay = new Date();
          curDay.setHours(0);
          curDay.setMinutes(0);
          curDay.setSeconds(0);
          var lastDay = new Date(parseInt(new Date().getFullYear()) + 1 + '-12-31 00:00:00');
          while (firstDay < lastDay) {
            document.querySelector('.metabar__select--filter[name="date"]').insertAdjacentHTML('beforeend', '<option' + (_Dates["default"].sameDay(firstDay, curDay) ? ' selected="selected"' : '') + ' value="' + _Dates["default"].dateFormat(firstDay, 'Y-m-d') + '">' + _Dates["default"].dateFormat(firstDay, 'd.m.y') + '</option>');
            firstDay.setDate(firstDay.getDate() + 1);
          }
        } else {
          var options = [];
          var skip_old_dates = [],
            skip_year_end = parseInt(new Date().getFullYear().toString().slice(-2)) - 1;
          for (var skip_year = 17; skip_year <= skip_year_end; skip_year++) {
            skip_old_dates.push('.' + skip_year);
          }
          _Store["default"].data.tickets.forEach(function (tickets__value) {
            // skip old projects
            if (columns__value === 'project') {
              if (skip_old_dates.includes(tickets__value.date.substring(5, 8))) {
                return;
              }
            }
            var options_value = tickets__value[columns__value];
            if (!options.includes(options_value)) {
              options.push(options_value);
            }
          });
          // combined filter
          if (columns__value === 'status') {
            if (options.filter(function (options__value) {
              return !['done', 'recurring'].includes(options__value);
            }).length > 0) {
              options.push('!done&!recurring');
            }
            if (options.filter(function (options__value) {
              return ['done', 'scheduled', 'working'].includes(options__value);
            }).length > 0) {
              options.push('done|scheduled|working');
            }
            if (options.filter(function (options__value) {
              return ['scheduled', 'working'].includes(options__value);
            }).length > 0) {
              options.push('scheduled|working');
            }
            if (options.filter(function (options__value) {
              return ['fixed', 'working'].includes(options__value);
            }).length > 0) {
              options.push('fixed|working');
            }
          }
          options.sort(function (a, b) {
            if (a === null) {
              a = '';
            }
            if (b === null) {
              b = '';
            }
            if (a.indexOf('|') > -1) {
              a = 'zz' + a;
            }
            if (b.indexOf('|') > -1) {
              b = 'zz' + b;
            }
            return a.toLowerCase().localeCompare(b.toLowerCase());
          });
          options.forEach(function (options__value) {
            document.querySelector('.metabar__select--filter[name="' + columns__value + '"]').insertAdjacentHTML('beforeend', '<option value="' + options__value + '">' + options__value + '</option>');
          });
        }
      });
      if (update === true) {
        Object.entries(selected).forEach(function (_ref) {
          var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
            selected__key = _ref2[0],
            selected__value = _ref2[1];
          document.querySelector('.metabar__filter [name="' + selected__key + '"]').value = selected__value;
        });
      } else {
        Filter.doFilter();
        document.querySelector('.metabar').addEventListener('change', function (e) {
          if (e.target.closest('.metabar__select--filter')) {
            var date = e.target.closest('.metabar__select--filter[name="date"]');
            if (date && date.value !== '*' && date.value !== '') {
              _Store["default"].data.session.activeDay = new Date(date.value);
              _Scheduler["default"].initScheduler();
            }
            Filter.doFilter();
          }
        });
      }
    }
  }, {
    key: "doFilter",
    value: function doFilter() {
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        var visible = true;
        document.querySelector('.metabar__filter').querySelectorAll('select').forEach(function (el) {
          var val_search = el.value,
            val_target = tickets__value[el.getAttribute('name')],
            visible_this = false;

          // date
          if (el.getAttribute('name') === 'date' && val_search !== '*' && val_search !== '') {
            var parsed_values = _Dates["default"].parseDateString(val_target, 'tickets');
            if (parsed_values !== false && parsed_values.length > 0) {
              visible_this = true;
            }
          }

          // all others
          else if (val_search === '*' || val_target === val_search || val_search.indexOf('|') > -1 && val_search.split('|').includes(val_target)) {
            visible_this = true;
          }

          /* special behaviour: hide billed in overview */
          if (el.getAttribute('name') == 'status' && val_search === '*' && val_target === 'billed' && document.querySelector('.metabar__select--filter[name="date"]').value === '*') {
            visible_this = false;
          }
          if (visible_this === false) {
            visible = false;
          }
        });
        if (visible === false && tickets__value.visible === true) {
          tickets__value.visible = false;
          document.querySelector('.tickets .tickets__entry[data-id="' + tickets__value.id + '"]').classList.remove('tickets__entry--visible');
        } else if (visible === true && tickets__value.visible === false) {
          tickets__value.visible = true;
          document.querySelector('.tickets .tickets__entry[data-id="' + tickets__value.id + '"]').classList.add('tickets__entry--visible');
        }
      });
      _Sort["default"].doSort();
      _Scheduler["default"].updateColors();
      _Tickets["default"].updateSum();
      _Textarea["default"].textareaSetVisibleHeights();
    }
  }]);
  return Filter;
}();
exports["default"] = Filter;

},{"./Dates":4,"./Scheduler":12,"./Sort":13,"./Store":14,"./Textarea":15,"./Tickets":16,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/helpers/slicedToArray":33}],6:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _Tickets = _interopRequireDefault(require("./Tickets"));
var _Auth = _interopRequireDefault(require("./Auth"));
var Footer = /*#__PURE__*/function () {
  function Footer() {
    (0, _classCallCheck2["default"])(this, Footer);
  }
  (0, _createClass2["default"])(Footer, null, [{
    key: "initStatus",
    value: function initStatus() {
      if (document.querySelector('.footer__status') === null) {
        return;
      }
      if (Footer.blockStatusUpdate === false) {
        var d = ('0' + new Date().getDate()).slice(-2) + '.' + ('0' + (new Date().getMonth() + 1)).slice(-2) + '.' + new Date().getFullYear().toString().substring(2, 4) + ' ' + ('0' + new Date().getHours()).slice(-2) + ':' + ('0' + new Date().getMinutes()).slice(-2) + ':' + ('0' + new Date().getSeconds()).slice(-2);
        document.querySelector('.footer__status').textContent = d;
      }
      setTimeout(Footer.initStatus, 1000);
    }
  }, {
    key: "updateStatus",
    value: function updateStatus(status, type) {
      document.querySelector('.footer__status').textContent = status;
      document.querySelector('.footer__status').classList.remove('footer__status--success');
      document.querySelector('.footer__status').classList.remove('footer__status--warning');
      document.querySelector('.footer__status').classList.remove('footer__status--error');
      document.querySelector('.footer__status').classList.add('footer__status--' + type);
      Footer.blockStatusUpdate = true;
      setTimeout(function () {
        Footer.blockStatusUpdate = false;
      }, Footer.showTime - 1000);
      setTimeout(function () {
        document.querySelector('.footer__status').classList.remove('footer__status--' + type);
      }, Footer.showTime);
    }
  }, {
    key: "bindSave",
    value: function bindSave() {
      document.querySelector('.footer').addEventListener('click', function (e) {
        if (e.target.closest('.footer__save')) {
          Footer.updateStatus('saving...', 'warning');
          _Tickets["default"].saveTickets().then(function () {
            Footer.updateStatus('saved!', 'success');
          })["catch"](function (error) {
            Footer.updateStatus(error, 'error');
          });
          e.preventDefault();
        }
      });
    }
  }, {
    key: "bindCreate",
    value: function bindCreate() {
      document.querySelector('.footer').addEventListener('click', function (e) {
        if (e.target.closest('.footer__create')) {
          _Tickets["default"].prepareCreateTicket();
          e.preventDefault();
        }
      });
    }
  }, {
    key: "bindLogout",
    value: function bindLogout() {
      document.querySelector('.footer').addEventListener('click', function (e) {
        if (e.target.closest('.footer__logout')) {
          _Auth["default"].logout().then(function () {
            // we simply overcome the issue of deleting event listeners on document by simply refreshing the app
            location.reload();
          })["catch"](function (error) {
            console.error(error);
          });
          e.preventDefault();
        }
      });
    }
  }, {
    key: "linkApiKey",
    value: function linkApiKey() {
      document.querySelector('.footer__cron').setAttribute('href', '_api/cron/' + Store.data.user.api_key);
      document.querySelector('.footer__ical').setAttribute('href', '_api/ical/' + Store.data.user.api_key);
    }
  }]);
  return Footer;
}();
exports["default"] = Footer;
(0, _defineProperty2["default"])(Footer, "blockStatusUpdate", false);
(0, _defineProperty2["default"])(Footer, "showTime", 3500);

},{"./Auth":3,"./Tickets":16,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/defineProperty":26,"@babel/runtime/helpers/interopRequireDefault":27}],7:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var Helper = /*#__PURE__*/function () {
  function Helper() {
    (0, _classCallCheck2["default"])(this, Helper);
  }
  (0, _createClass2["default"])(Helper, null, [{
    key: "prevAll",
    value: function prevAll(el) {
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var prev = true;
      return [].filter.call(el.parentNode.children, function (htmlElement) {
        if (htmlElement === el) {
          prev = false;
          return false;
        }
        if (selector !== null && !htmlElement.classList.contains(selector.replace('.', ''))) {
          return false;
        }
        return prev;
      }).reverse();
    }
  }, {
    key: "nextAll",
    value: function nextAll(el) {
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var next = false;
      return [].filter.call(el.parentNode.children, function (htmlElement) {
        if (htmlElement === el) {
          next = true;
          return false;
        }
        if (selector !== null && !htmlElement.classList.contains(selector.replace('.', ''))) {
          return false;
        }
        return next;
      });
    }
  }, {
    key: "isObject",
    value: function isObject(obj) {
      return obj !== null && (0, _typeof2["default"])(obj) === 'object';
    }
  }, {
    key: "isInteger",
    value: function isInteger(value) {
      return !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));
    }
  }, {
    key: "fileToBase64",
    value: function fileToBase64(file) {
      return new Promise(function (resolve, reject) {
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = function () {
          return resolve(reader.result.split(',')[1]);
        };
        reader.onerror = function (error) {
          return reject(error);
        };
      });
    }
  }, {
    key: "debounce",
    value: function debounce(func, wait, immediate) {
      var timeout;
      return function () {
        var context = this,
          args = arguments;
        var later = function later() {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    }
  }]);
  return Helper;
}();
exports["default"] = Helper;

},{"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/helpers/typeof":37}],8:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Store = _interopRequireDefault(require("./Store"));
var Html = /*#__PURE__*/function () {
  function Html() {
    (0, _classCallCheck2["default"])(this, Html);
  }
  (0, _createClass2["default"])(Html, null, [{
    key: "buildHtml",
    value: function buildHtml() {
      document.querySelector('#app').insertAdjacentHTML('beforeend', "\n            <div class=\"animation\"></div>\n            <div class=\"tickets\"></div>\n            <div class=\"scheduler\"></div>\n            <div class=\"quickbox\"></div>\n            <div class=\"footer\"></div>\n        ");
      document.querySelector('.animation').insertAdjacentHTML('beforeend', "\n            <div class=\"animation__wrap\">\n                <div class=\"animation__top\"></div>\n                <div class=\"animation__bottom\"></div>\n            </div>\n            ");
      document.querySelector('.footer').insertAdjacentHTML('beforeend', "\n            <a href=\"#\" class=\"footer__save\">_save</a>\n            <a href=\"#\" class=\"footer__create\">_create</a>\n            <span class=\"footer__status\"></span>\n            <a href=\"#\" class=\"footer__cron\" target=\"_blank\">_cron</a>\n            <a href=\"#\" class=\"footer__ical\" target=\"_blank\">_ical</a>\n            <a href=\"#\" class=\"footer__logout\">_logout</a>\n            ");
      document.querySelector('.tickets').insertAdjacentHTML('beforeend', "\n            <div class=\"metabar\"></div>\n            <div class=\"tickets__table-container\">\n                <table class=\"tickets__table\">\n                    <thead class=\"tickets__table-head\">\n                        <tr class=\"tickets__table-row\"></tr>\n                    </thead>\n                    <tbody class=\"tickets__table-body\">\n                    </tbody>\n                    <tfoot class=\"tickets__table-foot\">\n                        <tr class=\"tickets__table-row\"></tr>\n                    </tfoot>\n                </table>\n            </div>\n        ");
      _Store["default"].data.cols.forEach(function (cols__value) {
        document.querySelector('.tickets__table-head tr').insertAdjacentHTML('beforeend', '<td class="tickets__table-cell">' + cols__value + '</td>');
        if (cols__value === 'status') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"scheduled\nidle\nallday\nroaming\nfixed\ndone\nbilled\nrecurring\nworking\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }
        if (cols__value === 'priority') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"[A-D]\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }
        if (cols__value === 'time') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"[0-24]\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }
        if (cols__value === 'date') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"01.01.18\n01.01.18 09:00-10:00\nMO [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO#1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO#12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO~1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO~12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO%2 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\n01.01. [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\n01.01. 09:00-10:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\n\nDD#N: (N%4)th weekday in every ((N-1)/4)th month\nDD~N: weekday in calendar week N\nDD%N: weekday in calendar week %N=0 (if >X specified, N -= calendar week of X)\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }
        document.querySelector('.tickets__table-foot tr').insertAdjacentHTML('beforeend', '<td class="tickets__table-cell">' + (cols__value == 'time' ? '<span class="tickets__sum"></span>' : '') + '</td>');
      });
      document.querySelector('.tickets__table-head tr').insertAdjacentHTML('beforeend', "\n                    <td class=\"tickets__table-cell\">attachments</td>\n                    <td class=\"tickets__table-cell\">delete</td>\n                ");
      document.querySelector('.tickets__table-foot tr').insertAdjacentHTML('beforeend', "\n                <td class=\"tickets__table-cell\"></td>\n                <td class=\"tickets__table-cell\"></td>\n            ");
    }
  }, {
    key: "createHtmlLine",
    value: function createHtmlLine(ticket, visible) {
      var html = '';
      html += '<tr class="tickets__table-row tickets__entry' + (visible === true ? ' tickets__entry--visible' : '') + '" data-id="' + ticket.id + '">';
      _Store["default"].data.cols.forEach(function (cols__value) {
        html += '<td class="tickets__table-cell">';
        html += '<textarea class="tickets__textarea tickets__textarea--' + cols__value + '" autocorrect="off" autocapitalize="off" spellcheck="false" ' + (['date', 'description'].includes(cols__value) ? ' class="autosize"' : '') + ' name="' + cols__value + '">' + (ticket[cols__value] || '') + '</textarea>';
        html += '</td>';
      });
      html += "\n            <td class=\"tickets__table-cell\">\n                <ul class=\"tickets__attachments\">";
      if (ticket.attachments !== undefined && ticket.attachments.length > 0) {
        ticket.attachments.forEach(function (attachments__value, attachments__key) {
          html += Html.createHtmlDownloadLine(attachments__value);
        });
      }
      html += "\n                </ul>\n\n                <label class=\"tickets__upload\" title=\"_upload\">\n                    <input class=\"tickets__upload-input\" type=\"file\" name=\"attachments\" multiple=\"multiple\" />\n                </label>\n   \n            </td>\n            <td class=\"tickets__table-cell\">\n                <a href=\"#\" class=\"tickets__entry__delete\">x</a>\n            </td>\n        </tr>\n        ";
      return html;
    }
  }, {
    key: "createHtmlDownloadLine",
    value: function createHtmlDownloadLine(attachment) {
      return "\n            <li class=\"tickets__attachment\" data-id=\"".concat(attachment.id, "\">\n                <a class=\"tickets__attachment-download\" href=\"#\" title=\"").concat(attachment.name, "\"></a>\n                <a class=\"tickets__attachment-delete\" href=\"#\" title=\"_delete\"></a>\n            </li>\n        ");
    }
  }]);
  return Html;
}();
exports["default"] = Html;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27}],9:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Filter = _interopRequireDefault(require("./Filter"));
var _Helper = _interopRequireDefault(require("./Helper"));
var Keyboard = /*#__PURE__*/function () {
  function Keyboard() {
    (0, _classCallCheck2["default"])(this, Keyboard);
  }
  (0, _createClass2["default"])(Keyboard, null, [{
    key: "initKeyboardNavigation",
    value: function initKeyboardNavigation() {
      // one more keyboard event is needed (so that jumps are not too early)
      // therefore we save the previous cursor pointer here
      var selectionEndBefore = 1;
      document.querySelector('.tickets').addEventListener('keyup', function (e) {
        if (!e.target || e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
          return;
        }
        var left = e.target.closest('td').previousElementSibling,
          right = e.target.closest('td').nextElementSibling,
          top = _Helper["default"].prevAll(e.target.closest('tr'), '.tickets__entry--visible')[0],
          down = _Helper["default"].nextAll(e.target.closest('tr'), '.tickets__entry--visible')[0],
          index = _Helper["default"].prevAll(e.target.closest('td')).length + 1;

        // arrow right (switch)
        if (e.keyCode === 39 && right !== null && e.target.selectionEnd >= e.target.value.length && selectionEndBefore >= e.target.value.length) {
          right.querySelector('input, textarea').select();
          selectionEndBefore = 1;
          e.preventDefault();
        }
        // arrow left (switch)
        else if (e.keyCode === 37 && left !== null && e.target.selectionEnd <= 0 && selectionEndBefore <= 0) {
          left.querySelector('input, textarea').select();
          selectionEndBefore = 1;
          e.preventDefault();
        }
        // arrow top (switch)
        else if (e.keyCode === 38 && top !== undefined && e.target.selectionEnd <= 0 && selectionEndBefore <= 0) {
          top.querySelector('td:nth-child(' + index + ')').querySelector('input, textarea').select();
          selectionEndBefore = 1;
          e.preventDefault();
        }
        // arrow down (switch)
        else if (e.keyCode === 40 && down !== undefined && e.target.selectionEnd >= e.target.value.length && selectionEndBefore >= e.target.value.length) {
          down.querySelector('td:nth-child(' + index + ')').querySelector('input, textarea').select();
          selectionEndBefore = 1;
          e.preventDefault();
        } else {
          selectionEndBefore = e.target.selectionEnd;
        }
      });
    }
  }, {
    key: "bindRefresh",
    value: function bindRefresh() {
      // f5
      document.addEventListener('keydown', function (event) {
        if (event.keyCode === 116) {
          _Filter["default"].doFilter();
          event.preventDefault();
        }
      });
    }
  }]);
  return Keyboard;
}();
exports["default"] = Keyboard;

},{"./Filter":5,"./Helper":7,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27}],10:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var Lock = /*#__PURE__*/function () {
  function Lock() {
    (0, _classCallCheck2["default"])(this, Lock);
  }
  (0, _createClass2["default"])(Lock, null, [{
    key: "lockTicket",
    value: function lockTicket(ticket_id) {
      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').classList.add('tickets__entry--locked');
      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').querySelectorAll('input, textarea').forEach(function (el) {
        // renable this if https://stackoverflow.com/questions/52546266/textarea-white-space-nowrap-in-combination-with-readonly is solved
        //el.setAttribute('disabled', 'disabled');
        //el.setAttribute('readonly', 'readonly');
      });
    }
  }, {
    key: "unlockTicket",
    value: function unlockTicket(ticket_id) {
      var leave_changed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (leave_changed === false) {
        document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').classList.remove('tickets__entry--changed');
      }
      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').classList.remove('tickets__entry--locked');
      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').querySelectorAll('input, textarea').forEach(function (el) {
        el.removeAttribute('disabled');
        el.removeAttribute('readonly');
      });
    }
  }, {
    key: "ticketIsLocked",
    value: function ticketIsLocked(ticket_id) {
      if (document.querySelector('.tickets__entry[data-id="' + ticket_id + '"] .tickets__entry--locked') !== null) {
        return true;
      }
      return false;
    }
  }]);
  return Lock;
}();
exports["default"] = Lock;

},{"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27}],11:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _Tickets = _interopRequireDefault(require("./Tickets"));
var _Store = _interopRequireDefault(require("./Store"));
var _Dates = _interopRequireDefault(require("./Dates"));
var _Scheduler = _interopRequireDefault(require("./Scheduler"));
var _Filter = _interopRequireDefault(require("./Filter"));
var _Footer = _interopRequireDefault(require("./Footer"));
var _hlp = _interopRequireDefault(require("hlp"));
var _pulltorefreshjs = _interopRequireDefault(require("pulltorefreshjs"));
var Quickbox = /*#__PURE__*/function () {
  function Quickbox() {
    (0, _classCallCheck2["default"])(this, Quickbox);
    (0, _defineProperty2["default"])(this, "lastScrollPos", 0);
  }
  (0, _createClass2["default"])(Quickbox, null, [{
    key: "initQuickbox",
    value: function initQuickbox() {
      Quickbox.buildHtml();
      Quickbox.initMails();
      Quickbox.initToday();
      Quickbox.initNew();
    }
  }, {
    key: "bindQuickbox",
    value: function bindQuickbox() {
      Quickbox.bindMails();
      Quickbox.allowUnselectRadio();
      Quickbox.bindToday();
      Quickbox.bindNav();
      Quickbox.bindNew();
    }
  }, {
    key: "buildHtml",
    value: function buildHtml() {
      document.querySelector('.quickbox').innerHTML = "\n            <div class=\"quickbox__content\">\n                <div class=\"quickbox__mails\"></div>\n                <div class=\"quickbox__today\"></div>\n                <div class=\"quickbox__new\"></div>\n            </div>\n            <div class=\"quickbox__nav\">\n                <a href=\"#mails\" class=\"quickbox__navitem\">_mails<span class=\"quickbox__navitem-count\"></span></a>\n                <a href=\"#today\" class=\"quickbox__navitem\">_today<span class=\"quickbox__navitem-count\"></span></a>\n                <a href=\"#new\" class=\"quickbox__navitem\">_new</a>\n            </div>\n        ";
    }
  }, {
    key: "initMails",
    value: function initMails() {
      Quickbox.fetchMails(true);
      if (_hlp["default"].isDesktop()) {
        setInterval(function () {
          if (_Store["default"].data.busy === true) {
            return;
          }
          Quickbox.fetchMails(false);
          _Footer["default"].updateStatus('successfully synced mails.', 'success');
        }, 70 * 1000); // must be non divisible by 60 (otherwise it blocks others)
      }
    }
  }, {
    key: "fetchMails",
    value: function fetchMails() {
      var firstInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (document.querySelector('.quickbox__mails').classList.contains('quickbox__mails--loading')) {
        return;
      }
      if (firstInit === true || !_hlp["default"].isDesktop()) {
        document.querySelector('.quickbox__mails').classList.add('quickbox__mails--loading');
        document.querySelector('.quickbox__mails').classList.remove('quickbox__mails--finished');
      }
      _Store["default"].data.busy = true;
      _Store["default"].data.api.fetch('_api/mails', {
        method: 'GET',
        cache: 'no-cache',
        headers: {
          'content-type': 'application/json'
        }
      }).then(function (res) {
        return res.json();
      })["catch"](function () {}).then(function (response) {
        _Store["default"].data.busy = false;
        _Store["default"].data.mails = [];
        response.data.forEach(function (mails__value) {
          _Store["default"].data.mails.push(mails__value);
        });
        Quickbox.renderMails();
        Quickbox.updateMailCount();
      });
    }
  }, {
    key: "updateMailCount",
    value: function updateMailCount() {
      document.querySelector('.quickbox__navitem-count').innerText = _Store["default"].data.mails.length;
    }
  }, {
    key: "renderMails",
    value: function renderMails() {
      // add new
      _Store["default"].data.mails.forEach(function (mails__value) {
        if (document.querySelector('.quickbox__mail[data-id="' + mails__value.id + '"]') === null) {
          var content = mails__value.content;
          document.querySelector('.quickbox__mails').insertAdjacentHTML('beforeend', "\n                    <div class=\"quickbox__mail quickbox__mail--unread\" data-id=\"".concat(mails__value.id, "\">\n                        <a href=\"#\" class=\"quickbox__mail-toggle\">\n                            <div class=\"quickbox__mail-meta quickbox__mail-meta--from\">\n                                ").concat(mails__value.from_name !== undefined && mails__value.from_name !== null && mails__value.from_name !== false && mails__value.from_name !== '' ? mails__value.from_name + ' (' + mails__value.from_email + ')' : mails__value.from_email, "\n                            </div>\n                            <div class=\"quickbox__mail-meta quickbox__mail-meta--date\">\n                                ").concat(_Dates["default"].dateFormat(new Date(mails__value.date), 'D H:i'), "\n                            </div>\n                            <div class=\"quickbox__mail-meta quickbox__mail-meta--subject\">\n                                ").concat(mails__value.subject, "\n                            </div>\n                        </a>\n                        <iframe src=\"about:blank\" class=\"quickbox__mail-content\">\n                            ").concat(content, "\n                        </iframe>\n                        <div class=\"quickbox__mail-actions\">\n                            <form class=\"quickbox__mail-form\">\n                                <input type=\"hidden\" name=\"id\" value=\"").concat(mails__value.id, "\" />\n                                <input type=\"hidden\" name=\"mailbox\" value=\"").concat(mails__value.mailbox, "\" />\n                                <ul class=\"quickbox__mail-inputrows\">\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/3\"><label class=\"quickbox__mail-label\"><input class=\"quickbox__mail-input quickbox__mail-input--radio\" type=\"radio\" name=\"action_ticket_time\" value=\"tonight\" uncheckable data-checked checked /><span class=\"quickbox__mail-label-text\">tonight</span></label></li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/3\"><label class=\"quickbox__mail-label\"><input class=\"quickbox__mail-input quickbox__mail-input--radio\" type=\"radio\" name=\"action_ticket_time\" value=\"weekend\" uncheckable /><span class=\"quickbox__mail-label-text\">weekend</span></label></li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/3\"><label class=\"quickbox__mail-label\"><input class=\"quickbox__mail-input quickbox__mail-input--radio\" type=\"radio\" name=\"action_ticket_time\" value=\"next\" uncheckable /><span class=\"quickbox__mail-label-text\">next</span></label></li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/").concat(mails__value.editors.length + 2, "\"><label class=\"quickbox__mail-label\"><input type=\"checkbox\" class=\"quickbox__mail-input quickbox__mail-input--checkbox\" name=\"action_send[]\" value=\"sender\" /><span class=\"quickbox__mail-label-text\">sender</span></label></li>\n                                ").concat(mails__value.editors.map(function (editors__value) {
            return "\n                                            <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/".concat(mails__value.editors.length + 2, "\"><label class=\"quickbox__mail-label\"><input type=\"checkbox\" class=\"quickbox__mail-input quickbox__mail-input--checkbox\" name=\"action_send[]\" value=\"").concat(editors__value, "\" /><span class=\"quickbox__mail-label-text\">").concat(editors__value, "</span></label></li>\n                                        ");
          }).join(''), "\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/").concat(mails__value.editors.length + 2, "\">\n                                        <input\n                                            class=\"quickbox__mail-input quickbox__mail-input--text\"\n                                            autocomplete=\"off\"\n                                            value=\"\"\n                                            maxlength=\"255\"\n                                            type=\"text\"\n                                            placeholder=\"mailtext\"\n                                            name=\"action_send_text\"\n                                        />\n                                    </li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/2\">\n                                        <input class=\"quickbox__mail-submit quickbox__mail-submit--discard\" type=\"submit\" name=\"discard\" value=\"_discard\" />\n                                    </li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/2\">\n                                        <input class=\"quickbox__mail-submit quickbox__mail-submit--create\" type=\"submit\" name=\"create\" value=\"_create\" />\n                                    </li>\n                                </ul>\n        \t                </form>\n                        </div>\n                    </div>\n                "));
          var iframe = document.querySelector('.quickbox__mail[data-id="' + mails__value.id + '"] .quickbox__mail-content');
          iframe.onload = function () {
            var style = document.createElement('style');
            style.textContent = "\n                        body {\n                            font-family: Verdana, Geneva, sans-serif;\n                            zoom:0.75;\n                            background-color:#fff;\n                            color:#000;\n                        }\n                        body::-webkit-scrollbar {\n                            width: 16px;\n                        }\n                        body::-webkit-scrollbar-track {\n                            background-color: #000000;\n                        }\n                        body::-webkit-scrollbar-thumb {\n                            background-color: #ffffff;\n                            box-shadow: -1px 0 0 0 #ffffff;\n                        }\n                    ";
            iframe.contentDocument.head.appendChild(style);
            if (iframe.contentDocument.querySelector('a') !== null) {
              iframe.contentDocument.querySelectorAll('a').forEach(function (el) {
                el.setAttribute('target', '_blank');
              });
            }
          };
          iframe.setAttribute('srcdoc', content);
        }
      });

      // remove existing
      if (document.querySelector('.quickbox__mail') !== null) {
        document.querySelectorAll('.quickbox__mail').forEach(function (el) {
          if (_Store["default"].data.mails.filter(function (mails__value) {
            return mails__value.id === el.getAttribute('data-id');
          }).length === 0) {
            el.remove();
          }
        });
      }
      if (document.querySelector('.quickbox__mails--loading') !== null) {
        document.querySelector('.quickbox__mails--loading').classList.remove('quickbox__mails--loading');
      }
      if (document.querySelector('.quickbox__mail') === null) {
        document.querySelector('.quickbox__mails').classList.add('quickbox__mails--finished');
      } else {
        document.querySelector('.quickbox__mails').classList.remove('quickbox__mails--finished');
      }
    }
  }, {
    key: "bindMails",
    value: function bindMails() {
      var _this = this;
      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__mail-toggle');
        if (el) {
          if (el.closest('.quickbox__mail').classList.contains('quickbox__mail--expanded')) {
            el.closest('.quickbox__mails').style.overflowY = 'auto';
            el.closest('.quickbox__mail').classList.remove('quickbox__mail--expanded');
            el.closest('.quickbox__mails').scrollTop = _this.lastScrollPos;
          } else {
            if (el.closest('.quickbox__mail').classList.contains('quickbox__mail--unread')) {
              el.closest('.quickbox__mail').classList.remove('quickbox__mail--unread');
            }
            _this.lastScrollPos = el.closest('.quickbox__mails').scrollTop;
            el.closest('.quickbox__mails').scrollTop = 0;
            el.closest('.quickbox__mails').style.overflowY = 'hidden';
            el.closest('.quickbox__mail').classList.add('quickbox__mail--expanded');
          }
          e.preventDefault();
        }
      });
      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__mail-submit');
        if (el) {
          var form = el.closest('.quickbox__mail-form'),
            id = form.closest('.quickbox__mail').getAttribute('data-id'),
            mail = _Store["default"].data.mails.filter(function (mails__value) {
              return mails__value.id === id;
            })[0],
            action = el.classList.contains('quickbox__mail-submit--create') ? 'create' : 'discard';
          form.closest('.quickbox__mail').classList.add('quickbox__mail--move-' + (action === 'discard' ? 'left' : 'right'));
          document.querySelector('.quickbox__mails').style.overflowY = 'auto';
          document.querySelector('.quickbox__mails').scrollTop = _this.lastScrollPos;
          if (action === 'create' && form.querySelector('[name="action_ticket_time"]:checked') !== null) {
            var date = form.querySelector('[name="action_ticket_time"]:checked').value;
            _Tickets["default"].createAndAppendTicket({
              date: date,
              description: mail.subject,
              priority: 'A',
              project: 'mail',
              status: 'scheduled',
              time: '0,50',
              visible: true,
              attachments: [_hlp["default"].base64tofile(mail.eml, null, _hlp["default"].slugify(mail.subject + ' ' + mail.date) + '.eml')]
            }, null, 1, false, true);
          }
          _Store["default"].data.busy = true;
          _Store["default"].data.api.fetch('_api/mails', {
            method: 'PUT',
            body: new URLSearchParams(new FormData(form)),
            cache: 'no-cache',
            headers: {
              'content-type': 'application/json'
            }
          }).then(function (res) {
            return res.json();
          })["catch"](function () {}).then(function (response) {
            _Store["default"].data.busy = false;
          });
          e.preventDefault();
          setTimeout(function () {
            _Store["default"].data.mails = _Store["default"].data.mails.filter(function (mails__value) {
              return mails__value.id != form.closest('.quickbox__mail').getAttribute('data-id');
            });
            Quickbox.renderMails();
            Quickbox.updateMailCount();
          }, 500);
        }
      });
      if (!_hlp["default"].isDesktop()) {
        _pulltorefreshjs["default"].init({
          mainElement: '.quickbox__mails',
          triggerElement: '.quickbox__mails',
          classPrefix: 'quickbox__pull-to-refresh--',
          distThreshold: 80,
          distMax: 140,
          distIgnore: 10,
          instructionsPullToRefresh: '_swipe down to refresh',
          instructionsReleaseToRefresh: '_release to refresh',
          instructionsRefreshing: '_refreshing',
          shouldPullToRefresh: function shouldPullToRefresh() {
            return !this.mainElement.scrollTop && document.querySelector('.quickbox__mails--loading') === null && document.querySelector('.quickbox__mail--expanded') === null;
          },
          onRefresh: function onRefresh() {
            if (document.querySelector('.quickbox__mail--expanded') !== null) {
              return;
            }
            Quickbox.fetchMails(false);
          }
        });
      }
    }
  }, {
    key: "allowUnselectRadio",
    value: function allowUnselectRadio() {
      document.addEventListener('click', function (e) {
        var el = e.target.closest('input[type="radio"][uncheckable]');
        if (el) {
          if (el.hasAttribute('data-checked')) {
            el.removeAttribute('data-checked');
            el.checked = false;
          } else {
            el.checked = true;
            if (document.querySelector('input[type="radio"][uncheckable][data-checked]') !== null) {
              document.querySelectorAll('input[type="radio"][uncheckable][data-checked]').forEach(function (el) {
                el.removeAttribute('data-checked');
              });
            }
            el.setAttribute('data-checked', '');
          }
        }
      });
    }
  }, {
    key: "bindNav",
    value: function bindNav() {
      var _this2 = this;
      if (document.querySelector('.quickbox__content') !== null) {
        this.bindNavToggle('mails');
      }
      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__navitem');
        if (el) {
          if (!el.classList.contains('quickbox__navitem--active')) {
            _this2.bindNavToggle(el.getAttribute('href').replace('#', ''));
          }
          e.preventDefault();
        }
      });
    }
  }, {
    key: "bindNavToggle",
    value: function bindNavToggle(view) {
      if (document.querySelector('.quickbox__content').classList.contains('quickbox__content--disabled')) {
        return;
      }
      document.querySelector('.quickbox__content').classList.add('quickbox__content--disabled');
      /* in chrome we want ctrl+f to not find hidden elements (so we must apply display:none) */
      /* the following lines ensure to do exactly that */
      document.querySelectorAll('.quickbox__content > *').forEach(function (el2) {
        el2.style.display = 'block';
      });
      requestAnimationFrame(function () {
        setTimeout(function () {
          document.querySelectorAll('.quickbox__content > *:not(.quickbox__' + view + ')').forEach(function (el2) {
            el2.style.display = 'none';
          });
          document.querySelector('.quickbox__content').classList.remove('quickbox__content--disabled');
        }, 250);
        document.querySelector('.quickbox__content').setAttribute('data-view', view);
        if (document.querySelector('.quickbox__navitem--active') !== null) {
          document.querySelectorAll('.quickbox__navitem--active').forEach(function (navitem__value) {
            navitem__value.classList.remove('quickbox__navitem--active');
          });
        }
        document.querySelector('.quickbox__navitem[href="#' + view + '"]').classList.add('quickbox__navitem--active');
      });
    }
  }, {
    key: "initToday",
    value: function initToday() {
      document.querySelector('.quickbox__today').innerHTML = "\n            <div class=\"quickbox__today-nav\">\n                <a class=\"quickbox__today-navitem quickbox__today-navitem--prev-day\" href=\"#\">&lt;</a>\n                <a class=\"quickbox__today-navitem quickbox__today-navitem--cur-day\" href=\"#\">".concat(_Dates["default"].dateFormat(_Dates["default"].getActiveDate(), 'd.m.y'), "</a>\n                <a class=\"quickbox__today-navitem quickbox__today-navitem--next-day\" href=\"#\">&gt;</a>\n            </div>\n            <ul class=\"quickbox__today-tickets\"></ul>\n        ");
      var tickets = _hlp["default"].deepCopy(_Store["default"].data.tickets),
        count = 0;
      tickets.sort(function (a, b) {
        var sort_list = ['fixed'
          /*
          'scheduled',
          'fixed',
          'idle',
          'allday',
          'roaming',
          'recurring',
          'done',
          'billed',
          */],
          a_pos = Infinity,
          b_pos = Infinity;
        sort_list.forEach(function (sort_list__value, sort_list__key) {
          if (sort_list__value === a.status) {
            a_pos = sort_list__key;
          }
          if (sort_list__value === b.status) {
            b_pos = sort_list__key;
          }
        });
        if (a_pos < b_pos) {
          return -1;
        }
        if (a_pos > b_pos) {
          return 1;
        }
        for (var _i = 0, _arr = [a.status == 'recurring' && b.status == 'recurring' ? [a.date, b.date] : [_Dates["default"].germanDateTimeToEnglishString(a.date), _Dates["default"].germanDateTimeToEnglishString(b.date)], [a.priority, b.priority], [a.project, b.project],
          //[a.description, b.description],
          [a.id, b.id]]; _i < _arr.length; _i++) {
          var _arr$_i = (0, _slicedToArray2["default"])(_arr[_i], 2),
            val_a = _arr$_i[0],
            val_b = _arr$_i[1];
          if (val_a < val_b) {
            return -1;
          }
          if (val_a > val_b) {
            return 1;
          }
        }
        return 0;
      });
      tickets.forEach(function (tickets__value) {
        if (['done', 'billed'].includes(tickets__value.status)) {
          return;
        }
        var parsed_values = _Dates["default"].parseDateString(tickets__value.date, 'tickets');
        if (parsed_values !== false && parsed_values.length > 0) {
          parsed_values.forEach(function (parsed_values__value) {
            document.querySelector('.quickbox__today-tickets').insertAdjacentHTML('beforeend', "\n                            <li class=\"quickbox__today-ticket\" style=\"\n                                    ".concat(['fixed'].includes(tickets__value.status) ? 'border-color' : 'border-left-color', ": ").concat(_Scheduler["default"].getStoreProperty('border', tickets__value.status, tickets__value.project, 'transparent'), "; ").concat(['fixed'].includes(tickets__value.status) ? 'border-width: 5rem;' : '', "\">\n                                <div class=\"quickbox__today-ticket-project\">").concat(tickets__value.project, "<small class=\"quickbox__today-ticket-project-status\">[").concat(tickets__value.status, "]</small></div>\n                                <div class=\"quickbox__today-ticket-date\">\n                                    ").concat(tickets__value.status === 'fixed' ? (parsed_values__value.minutes_left < 8 * 60 ? '<span class="quickbox__today-ticket-date-countdown">' : '') + (parsed_values__value.minutes_left < 0 ? '⌛⌛⌛' : parsed_values__value.minutes_left < 8 * 60 ? '⌛' + parsed_values__value.minutes_left + 'min⌛' : '') + (parsed_values__value.minutes_left < 8 * 60 ? '</span>' : '') : '', "\n                                    ").concat(tickets__value.date.indexOf(' ') > -1 ? tickets__value.date.split(' ')[1] : tickets__value.date, "\n                                </div>\n                                <div class=\"quickbox__today-ticket-description\">").concat(_hlp["default"].nl2br(tickets__value.description), "</div>\n                            </li>\n                        "));
          });
          count++;
        }
      });
      document.querySelector('.quickbox__navitem[href="#today"] .quickbox__navitem-count').innerText = count;
    }
  }, {
    key: "bindToday",
    value: function bindToday() {
      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__today-nav');
        if (el) {
          if (e.target.closest('.quickbox__today-navitem--prev-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 1);
          }
          if (e.target.closest('.quickbox__today-navitem--cur-day')) {
            _Store["default"].data.session.activeDay = new Date();
          }
          if (e.target.closest('.quickbox__today-navitem--next-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 1);
          }
          Quickbox.initToday();
          _Scheduler["default"].initScheduler();
          _Filter["default"].doFilter();
          e.preventDefault();
        }
      });
      if (!_hlp["default"].isDesktop()) {
        _pulltorefreshjs["default"].init({
          mainElement: '.quickbox__today',
          triggerElement: '.quickbox__today',
          classPrefix: 'quickbox__pull-to-refresh--',
          distThreshold: 80,
          distMax: 140,
          distIgnore: 10,
          instructionsPullToRefresh: '_swipe down to refresh',
          instructionsReleaseToRefresh: '_release to refresh',
          instructionsRefreshing: '_refreshing',
          shouldPullToRefresh: function shouldPullToRefresh() {
            return this.mainElement.querySelector('.quickbox__today-tickets') !== null && !this.mainElement.querySelector('.quickbox__today-tickets').scrollTop;
          },
          onRefresh: function onRefresh() {
            _Tickets["default"].fetchAndRenderTicketsAndUpdateApp();
          }
        });
      }
    }
  }, {
    key: "initNew",
    value: function initNew() {
      document.querySelector('.quickbox__new').innerHTML = "\n            <form class=\"quickbox__new-form\">\n                <ul class=\"quickbox__new-inputrows\">\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><label class=\"quickbox__new-label\"><input class=\"quickbox__new-input quickbox__new-input--radio\" type=\"radio\" name=\"date\" value=\"tonight\" checked /><span class=\"quickbox__new-label-text\">tonight</span></label></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><label class=\"quickbox__new-label\"><input class=\"quickbox__new-input quickbox__new-input--radio\" type=\"radio\" name=\"date\" value=\"weekend\" /><span class=\"quickbox__new-label-text\">weekend</span></label></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><label class=\"quickbox__new-label\"><input class=\"quickbox__new-input quickbox__new-input--radio\" type=\"radio\" name=\"date\" value=\"next\" /><span class=\"quickbox__new-label-text\">next</span></label></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><input class=\"quickbox__new-input quickbox__new-input--text\" type=\"text\" name=\"date\" placeholder=\"date\" value=\"\" /></li>\n                    <li class=\"quickbox__new-inputrow\"><input class=\"quickbox__new-input quickbox__new-input--text\" type=\"text\" required=\"required\" name=\"project\" placeholder=\"project\" value=\"private\" /></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--rheight\">\n                        <textarea\n                            class=\"quickbox__new-input quickbox__new-input--textarea\"\n                            autocorrect=\"off\"\n                            autocapitalize=\"off\"\n                            spellcheck=\"false\"\n                            required=\"required\"\n                            name=\"description\"\n                            placeholder=\"description\"></textarea>\n                    </li>\n                    <li class=\"quickbox__new-inputrow\"><input class=\"quickbox__new-submit\" type=\"submit\" value=\"_create\" /></li>\n                </ul>\n            </form>\n        ";
    }
  }, {
    key: "bindNew",
    value: function bindNew() {
      document.querySelector('.quickbox__new-form [name="date"][type="text"]').addEventListener('keyup', function (e) {
        if (e.target.value != '' && document.querySelector('.quickbox__new-form [name="date"][type="radio"]:checked') !== null) {
          document.querySelector('.quickbox__new-form [name="date"][type="radio"]:checked').checked = false;
        }
      });
      document.querySelectorAll('.quickbox__new-form [name="date"][type="radio"]').forEach(function (el) {
        el.addEventListener('change', function (e) {
          if (e.target.checked === true) {
            document.querySelector('.quickbox__new-form [name="date"][type="text"]').value = '';
          }
        });
      });
      document.querySelector('.quickbox__new-form').addEventListener('submit', function (e) {
        _Tickets["default"].createAndAppendTicket({
          date: document.querySelector('.quickbox__new-form [type="radio"][name="date"]:checked') !== null ? document.querySelector('.quickbox__new-form [type="radio"][name="date"]:checked').value : document.querySelector('.quickbox__new-form [type="text"][name="date"]').value,
          description: document.querySelector('.quickbox__new-form [name="description"]').value,
          priority: 'A',
          project: document.querySelector('.quickbox__new-form [name="project"]').value,
          status: 'scheduled',
          time: '0,50',
          visible: true
        }, null, 1, false, true);
        document.querySelector('.quickbox__new-form').reset();
        document.querySelector('.quickbox__navitem[href="#today"]').click();
        e.preventDefault();
      });
    }
  }]);
  return Quickbox;
}();
exports["default"] = Quickbox;

},{"./Dates":4,"./Filter":5,"./Footer":6,"./Scheduler":12,"./Store":14,"./Tickets":16,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/defineProperty":26,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/helpers/slicedToArray":33,"hlp":40,"pulltorefreshjs":198}],12:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Store = _interopRequireDefault(require("./Store"));
var _Dates = _interopRequireDefault(require("./Dates"));
var _Filter = _interopRequireDefault(require("./Filter"));
var _hlp = _interopRequireDefault(require("hlp"));
var _Quickbox = _interopRequireDefault(require("./Quickbox"));
var _Weather = _interopRequireDefault(require("./Weather"));
var Scheduler = /*#__PURE__*/function () {
  function Scheduler() {
    (0, _classCallCheck2["default"])(this, Scheduler);
  }
  (0, _createClass2["default"])(Scheduler, null, [{
    key: "initScheduler",
    value: function initScheduler() {
      document.querySelector('.scheduler').innerHTML = "\n            <div class=\"scheduler__navigation\">\n                <span class=\"scheduler__navigation-week\"></span>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--next-month\" title=\"_next_month\">&gt;&gt;&gt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--next-week\" title=\"_next_week\">&gt;&gt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--next-day\" title=\"_next_day\">&gt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--today\" title=\"_next_today\">_</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--prev-day\" title=\"_prev_day\">&lt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--prev-week\" title=\"_prev_week\">&lt;&lt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--prev-month\" title=\"_prev_month\">&lt;&lt;&lt;</a>\n            </div>\n\n            <table class=\"scheduler__table\">\n                <thead class=\"scheduler__table-head\">\n                    <tr class=\"scheduler__row\">\n                        <td class=\"scheduler__cell\"></td>   \n                        ".concat(Array(7).join(0).split(0).map(function (item, i) {
        return "\n                            <td class=\"\n                                scheduler__cell\n                                ".concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getCurrentDate()) ? ' scheduler__cell--curday' : '', "\n                                ").concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getActiveDate()) ? ' scheduler__cell--activeday' : '', "\n                            \">\n                                ").concat(_Dates["default"].dateFormat(_Dates["default"].getDayOfActiveWeek(i + 1), 'D d.m.'), "\n                            </td>\n                        ");
      }).join(''), "\n                    </tr>\n                    <tr class=\"scheduler__row\">\n                        <td class=\"scheduler__cell\"></td>\n                        ").concat(Array(7).join(0).split(0).map(function (item, i) {
        return "\n                                    <td class=\"\n                                        scheduler__cell\n                                        ".concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getCurrentDate()) ? ' scheduler__cell--curday' : '', "\n                                        ").concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getActiveDate()) ? ' scheduler__cell--activeday' : '', "\n                                    \">\n                                        ").concat(_Weather["default"].outputWeather(_Dates["default"].getDayOfActiveWeek(i + 1)), "\n                                    </td>\n                                ");
      }).join(''), "\n                    </tr>\n                </thead>\n                <tbody class=\"scheduler__table-body\">\n                    <tr class=\"scheduler__row\">\n                        <td class=\"scheduler__cell\"></td>   \n                        ").concat(Array(7).join(0).split(0).map(function (item, i) {
        return "\n                            <td class=\"\n                                scheduler__cell\n                                ".concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getCurrentDate()) ? ' scheduler__cell--curday' : '', "\n                                ").concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getActiveDate()) ? ' scheduler__cell--activeday' : '', "\n                            \"></td>\n                        ");
      }).join(''), "\n                    </tr>\n                    ").concat(Array(15).join(0).split(0).map(function (item, j) {
        j = j + 9;
        return "\n                            <tr class=\"scheduler__row\">\n                                <td class=\"scheduler__cell\">".concat(('0' + j).slice(-2), "&ndash;").concat(('0' + (j + 1)).slice(-2), "</td>\n                                ").concat(Array(7).join(0).split(0).map(function (item, i) {
          return "\n                                    <td class=\"\n                                        scheduler__cell\n                                        ".concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getCurrentDate()) ? ' scheduler__cell--curday' : '', "\n                                        ").concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getActiveDate()) ? ' scheduler__cell--activeday' : '', "\n                                        ").concat(i < 5 && (j >= 9 && j < 13 || j >= 14 && j < 18) ? ' scheduler__cell--main' : '', "\n                                    \">\n                                    </td>\n                                ");
        }).join(''), "\n                            </tr>\n                        ");
      }).join(''), "\n                </tbody>\n            </table>\n\n            <div class=\"scheduler__appointments\">\n            </div>\n        ");
      var generatedDates = Scheduler.generateDates();
      var weeklySum = 0;
      generatedDates.forEach(function (date__value) {
        document.querySelector('.scheduler__appointments').insertAdjacentHTML('beforeend', "\n                    <div class=\"scheduler__appointment\" title=\"".concat(date__value.title, "\" style=\"\n                        left:").concat(date__value.posLeft, "%;\n                        top:").concat(date__value.posTop, "%;\n                        bottom:").concat(date__value.posBottom, "%;\n                        background:").concat(date__value.background, ";\n                        opacity:").concat(date__value.opacity, ";\n                        width:").concat(date__value.width, ";\n                    \">\n                        ").concat(date__value.name, "\n                    </div>\n                "));
        if (date__value.time != '' && date__value.project !== 'Olga') {
          weeklySum += date__value.time;
        }
      });
      weeklySum = (Math.round(weeklySum * 100) / 100).toString().replace('.', ',');
      document.querySelector('.scheduler__navigation-week').innerHTML = "\n            ".concat(_Dates["default"].dateFormat(_Dates["default"].getDayOfActiveWeek(1), 'd.m.'), " &ndash; ").concat(_Dates["default"].dateFormat(_Dates["default"].getDayOfActiveWeek(7), 'd.m.Y'), " /// _kw ").concat(_Dates["default"].weekNumber(_Dates["default"].getDayOfActiveWeek(1)), " /// ").concat(weeklySum, " hours\n        ");
    }
  }, {
    key: "bindScheduler",
    value: function bindScheduler() {
      document.querySelector('.scheduler').addEventListener('click', function (e) {
        if (e.target.closest('.scheduler__navigation-button')) {
          if (e.target.closest('.scheduler__navigation-button--today')) {
            _Store["default"].data.session.activeDay = new Date();
          }
          if (e.target.closest('.scheduler__navigation-button--prev-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 1);
          }
          if (e.target.closest('.scheduler__navigation-button--next-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 1);
          }
          if (e.target.closest('.scheduler__navigation-button--prev-week')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 7);
          }
          if (e.target.closest('.scheduler__navigation-button--next-week')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 7);
          }
          if (e.target.closest('.scheduler__navigation-button--prev-month')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 28);
          }
          if (e.target.closest('.scheduler__navigation-button--next-month')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 28);
          }
          document.querySelector('.metabar__select--filter[name="date"]').value = _Dates["default"].dateFormat(_Store["default"].data.session.activeDay, 'Y-m-d');
          Scheduler.initScheduler();
          _Quickbox["default"].initToday();
          _Filter["default"].doFilter();
          e.preventDefault();
        }
      });
    }
  }, {
    key: "generateDates",
    value: function generateDates() {
      var generatedDates = [];
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        var name = tickets__value.project,
          title = _hlp["default"].htmlEncode(tickets__value.project + '\n' + (tickets__value.description || '').split('\n').map(function (i) {
            return _hlp["default"].truncate_string(i, 100);
          }).join('\n')),
          project = tickets__value.project,
          parsed_values = _Dates["default"].parseDateString(tickets__value.date, 'scheduler');
        var background = Scheduler.getStoreProperty('background', tickets__value.status, tickets__value.project, null) || Scheduler.getStoreProperty('border', tickets__value.status, tickets__value.project, '#9E9E9E');
        if (parsed_values !== false && parsed_values.length > 0) {
          parsed_values.forEach(function (parsed_values__value) {
            generatedDates.push({
              day: parsed_values__value.day,
              begin: parsed_values__value.begin,
              end: parsed_values__value.end,
              name: name,
              title: title,
              project: project,
              time: parsed_values__value.time,
              background: background,
              opacity: Scheduler.getStoreProperty('opacity', tickets__value.status, tickets__value.project, 1)
            });
          });
        }
      });

      /* visual compression of all day events */
      var generatedDatesUndefinedMax = [],
        generatedDatesUndefinedCur = [];
      generatedDates.forEach(function (generatedDates__value) {
        if (generatedDates__value.begin === null) {
          if (!(generatedDates__value.day in generatedDatesUndefinedMax)) {
            generatedDatesUndefinedMax[generatedDates__value.day] = 0;
          }
          if (!(generatedDates__value.day in generatedDatesUndefinedCur)) {
            generatedDatesUndefinedCur[generatedDates__value.day] = 0;
          }
          generatedDatesUndefinedMax[generatedDates__value.day]++;
        }
      });

      /* visual compression of conflicting events */
      var conflicts = {};
      generatedDates.forEach(function (gv1, gk1) {
        if (gv1.begin === null || gv1.end === null) {
          return;
        }
        generatedDates.forEach(function (gv2, gk2) {
          if (gk1 === gk2) {
            return;
          }
          if (gv2.day !== gv1.day) {
            return;
          }
          if (gv2.begin === null || gv2.end === null) {
            return;
          }
          if (gv2.begin < gv1.begin) {
            return;
          }
          if ('conflict' in gv2 && 'conflict' in gv1 && gv2.conflict === gv1.conflict) {
            return;
          }
          if (gv2.begin < gv1.end) {
            if ('conflict' in gv1) {
              var conflictId = gv1.conflict;
              gv2.conflict = conflictId;
              if (!(conflictId in conflicts)) {
                conflicts[conflictId] = {
                  count: 0,
                  painted: 0
                };
              }
              conflicts[conflictId].count += 1;
            } else if ('conflict' in gv2) {
              var _conflictId = gv2.conflict;
              gv1.conflict = _conflictId;
              if (!(_conflictId in conflicts)) {
                conflicts[_conflictId] = {
                  count: 0,
                  painted: 0
                };
              }
              conflicts[_conflictId].count += 1;
            } else {
              var _conflictId2 = _hlp["default"].pushId();
              gv1.conflict = _conflictId2;
              gv2.conflict = _conflictId2;
              if (!(_conflictId2 in conflicts)) {
                conflicts[_conflictId2] = {
                  count: 0,
                  painted: 0
                };
              }
              conflicts[_conflictId2].count += 2;
            }
          }
        });
      });

      /* finalize */
      generatedDates.forEach(function (date__value) {
        var posTop, posBottom;
        if (date__value.begin === null) {
          posTop = generatedDatesUndefinedCur[date__value.day] / generatedDatesUndefinedMax[date__value.day] * 6.25;
          posBottom = 100 - (generatedDatesUndefinedCur[date__value.day] + 1) / generatedDatesUndefinedMax[date__value.day] * 6.25;
          generatedDatesUndefinedCur[date__value.day]++;
        } else {
          posTop = 6.25 * (date__value.begin - 8);
          posBottom = 100 - 6.25 * (date__value.end - 8);
        }
        var width, posLeft;
        if (!('conflict' in date__value)) {
          width = 'calc(12.5% - 4rem)';
          posLeft = 12.5 * date__value.day;
        } else {
          width = 'calc(' + 12.5 / conflicts[date__value.conflict].count + '% - 4rem)';
          posLeft = 12.5 * date__value.day + 12.5 / conflicts[date__value.conflict].count * conflicts[date__value.conflict].painted;
          conflicts[date__value.conflict].painted++;
        }
        date__value.posLeft = posLeft;
        date__value.posTop = posTop;
        date__value.posBottom = posBottom;
        date__value.width = width;
      });
      return generatedDates;
    }
  }, {
    key: "determineNextFreeSlot",
    value: function determineNextFreeSlot(str) {
      var d = _Dates["default"].parseDateString(str, 'scheduler')[0],
        dates = [];
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        var parsed_values = _Dates["default"].parseDateString(tickets__value.date, 'scheduler');
        if (parsed_values !== false && parsed_values.length > 0) {
          parsed_values.forEach(function (parsed_values__value) {
            dates.push({
              date: parsed_values__value.date,
              begin: parsed_values__value.begin,
              end: parsed_values__value.end
            });
          });
        }
      });
      var conflict = true;
      while (conflict === true) {
        conflict = false;
        dates.forEach(function (dates__value) {
          if (dates__value.begin === null || dates__value.end === null || d.begin === null || d.end === null) {
            return;
          }
          if (_Dates["default"].compareDates(d.date, dates__value.date) !== 0) {
            return;
          }
          if (d.end <= dates__value.begin || dates__value.end <= d.begin) {
            return;
          }
          d.begin += 0.5;
          d.end += 0.5;
          if (d.begin >= 21) {
            d.date.setDate(d.date.getDate() + 1);
            d.date.setHours(9);
            d.begin = 9;
            d.end = 9.5;
          }
          conflict = true;
        });
      }
      return _Dates["default"].dateFormat(d.date, 'd.m.y') + ' ' + _Dates["default"].timeFormat(d.begin) + '-' + _Dates["default"].timeFormat(d.end);
    }
  }, {
    key: "getStoreProperty",
    value: function getStoreProperty(property, status) {
      var project = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var defValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      if (project !== null && project !== '' && _Store["default"].data.colors.project.hasOwnProperty(project) && (0, _typeof2["default"])(_Store["default"].data.colors.project[project]) === 'object' && property in _Store["default"].data.colors.project[project]) {
        return _Store["default"].data.colors.project[project][property];
      }
      if (status !== null && status !== '' && _Store["default"].data.colors.status.hasOwnProperty(status) && (0, _typeof2["default"])(_Store["default"].data.colors.status[status]) === 'object' && property in _Store["default"].data.colors.status[status]) {
        return _Store["default"].data.colors.status[status][property];
      }
      return defValue;
    }
  }, {
    key: "updateColors",
    value: function updateColors() {
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.visible === true) {
          var borderColor = Scheduler.getStoreProperty('border', tickets__value.status, tickets__value.project, '#9E9E9E'),
            backgroundColor = Scheduler.getStoreProperty('background', tickets__value.status, tickets__value.project, null),
            opacity = Scheduler.getStoreProperty('opacity', tickets__value.status, tickets__value.project, 1),
            el = document.querySelector('.tickets .tickets__entry[data-id="' + tickets__value.id + '"]');
          if (borderColor) {
            el.style.borderLeftColor = borderColor;
          } else {
            el.style.borderLeftColor = 'transparent';
          }
          if (backgroundColor) {
            el.style.background = backgroundColor;
          } else {
            el.style.background = 'none';
          }
          if (opacity) {
            el.style.opacity = opacity;
          } else {
            el.style.opacity = 1;
          }
        }
      });
    }
  }]);
  return Scheduler;
}();
exports["default"] = Scheduler;

},{"./Dates":4,"./Filter":5,"./Quickbox":11,"./Store":14,"./Weather":18,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/helpers/typeof":37,"hlp":40}],13:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Store = _interopRequireDefault(require("./Store"));
var Sort = /*#__PURE__*/function () {
  function Sort() {
    (0, _classCallCheck2["default"])(this, Sort);
  }
  (0, _createClass2["default"])(Sort, null, [{
    key: "initSort",
    value: function initSort() {
      document.querySelector('.metabar').insertAdjacentHTML('beforeend', '<div class="metabar__sort"></div>');
      [1, 2].forEach(function (step) {
        document.querySelector('.metabar__sort').insertAdjacentHTML('beforeend', '<select class="metabar__select metabar__select--sort" name="sort_' + step + '"><option value="">sort #' + step + '</option></select>');
        _Store["default"].data.cols.forEach(function (columns__value) {
          document.querySelector('.metabar__select--sort[name="sort_' + step + '"]').insertAdjacentHTML('beforeend', '<option value="' + columns__value + '">' + columns__value + '</option>');
        });
      });
      document.querySelector('.metabar').addEventListener('change', function (e) {
        if (e.target.closest('.metabar__select--sort')) {
          Sort.doSort();
        }
      });
    }
  }, {
    key: "doSort",
    value: function doSort() {
      var sort_1 = document.querySelector('.metabar__select--sort[name="sort_1"]').value,
        sort_2 = document.querySelector('.metabar__select--sort[name="sort_2"]').value,
        sorted = (0, _toConsumableArray2["default"])(document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--visible')).sort(function (a, b) {
          var val_a, val_b;
          if (sort_1 != '') {
            val_a = a.querySelector('[name="' + sort_1 + '"]').value.toLowerCase();
            val_b = b.querySelector('[name="' + sort_1 + '"]').value.toLowerCase();
            if (sort_1 === 'date') {
              val_a = Dates.germanDateTimeToEnglishString(val_a);
              val_b = Dates.germanDateTimeToEnglishString(val_b);
            }
            if (val_a < val_b) {
              return -1;
            }
            if (val_a > val_b) {
              return 1;
            }
          }
          if (sort_1 == '') {
            val_a = a.querySelector('[name="status"]').value;
            val_b = b.querySelector('[name="status"]').value;
            if (val_a != val_b) {
              for (var _i = 0, _arr = ['allday', 'billed', 'done', 'working', 'fixed', 'scheduled', 'idle', 'recurring', 'roaming']; _i < _arr.length; _i++) {
                var status__value = _arr[_i];
                if (val_a === status__value) {
                  return -1;
                }
                if (val_b === status__value) {
                  return 1;
                }
              }
            }
          }
          if (sort_2 != '') {
            val_a = a.querySelector('[name="' + sort_2 + '"]').value.toLowerCase();
            val_b = b.querySelector('[name="' + sort_2 + '"]').value.toLowerCase();
            if (val_a < val_b) {
              return -1;
            }
            if (val_a > val_b) {
              return 1;
            }
          }
          for (var _i2 = 0, _arr2 = [a.querySelector('[name="status"]').value == 'recurring' && b.querySelector('[name="status"]').value == 'recurring' ? [a.querySelector('[name="date"]').value, b.querySelector('[name="date"]').value] : [Dates.germanDateTimeToEnglishString(a.querySelector('[name="date"]').value), Dates.germanDateTimeToEnglishString(b.querySelector('[name="date"]').value)], [a.querySelector('[name="priority"]').value, b.querySelector('[name="priority"]').value], [a.querySelector('[name="project"]').value, b.querySelector('[name="project"]').value], [a.querySelector('[name="description"]').value, b.querySelector('[name="description"]').value], [a.getAttribute('data-id'), b.getAttribute('data-id')]]; _i2 < _arr2.length; _i2++) {
            var _arr2$_i = (0, _slicedToArray2["default"])(_arr2[_i2], 2),
              _val_a = _arr2$_i[0],
              _val_b = _arr2$_i[1];
            if (_val_a < _val_b) {
              return -1;
            }
            if (_val_a > _val_b) {
              return 1;
            }
          }
          return 0;
        });
      for (var i = 0; i < sorted.length; i++) {
        // save scroll positions
        sorted[i].querySelectorAll('textarea').forEach(function (el) {
          el.scrollTopBackup = el.scrollTop;
        });
        sorted[i].parentNode.appendChild(sorted[i]);
        // restore scroll positions
        sorted[i].querySelectorAll('textarea').forEach(function (el) {
          el.scrollTop = el.scrollTopBackup;
        });
      }
    }
  }]);
  return Sort;
}();
exports["default"] = Sort;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/helpers/slicedToArray":33,"@babel/runtime/helpers/toConsumableArray":34}],14:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var Store = /*#__PURE__*/function () {
  function Store() {
    (0, _classCallCheck2["default"])(this, Store);
  }
  (0, _createClass2["default"])(Store, null, [{
    key: "initStore",
    value: function initStore() {
      Store.data = {
        busy: false,
        api: null,
        user: null,
        tickets: null,
        mails: null,
        weather: null,
        cols: ['status', 'priority', 'date', 'time', 'project', 'description'],
        colors: {
          status: {
            idle: {
              border: '#4527a0'
            },
            allday: {
              border: '#868686',
              opacity: 0.75
            },
            roaming: {
              border: '#ba68c8'
            },
            fixed: {
              border: '#2196F3'
            },
            done: {
              border: '#FFB300'
            },
            billed: {
              border: '#4CAF50'
            },
            recurring: {
              border: '#E91E63'
            },
            working: {
              border: '#F44336'
            },
            scheduled: {
              border: '#9E9E9E'
            }
          },
          project: {
            Geburtstag: {
              border: '#ba68c8',
              background: 'linear-gradient(178deg, #cb60b3 0%, #c146a1 50%, #a80077 51%, #db36a4 100%)'
            },
            Olga: {
              opacity: 0.75
            },
            mail: {
              opacity: 0.75
            }
          }
        },
        session: {
          activeDay: new Date()
        }
      };
    }
  }]);
  return Store;
}();
exports["default"] = Store;
(0, _defineProperty2["default"])(Store, "data", {});
window.Store = Store;

},{"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/defineProperty":26,"@babel/runtime/helpers/interopRequireDefault":27}],15:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Helper = _interopRequireDefault(require("./Helper"));
var Textarea = /*#__PURE__*/function () {
  function Textarea() {
    (0, _classCallCheck2["default"])(this, Textarea);
  }
  (0, _createClass2["default"])(Textarea, null, [{
    key: "textareaAutoHeight",
    value: function textareaAutoHeight() {
      var debounce = _Helper["default"].debounce(function (e) {
        Textarea.textareaSetHeight(e.target);
      }, 100);
      document.querySelector('.tickets .tickets__table-body').addEventListener('input', function (e) {
        if (e.target && e.target.tagName === 'TEXTAREA' && e.target.classList.contains('tickets__textarea--description')) {
          /* immediately change height if enter is pressed */
          if (e.inputType === 'insertLineBreak') {
            Textarea.textareaSetHeight(e.target);
          } else {
            /* otherwise debounce */
            debounce(e);
          }
        }
      });
    }
  }, {
    key: "textareaSetVisibleHeights",
    value: function textareaSetVisibleHeights() {
      document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--visible .tickets__textarea--description').forEach(function (el, index) {
        Textarea.textareaSetHeight(el);
      });
    }
  }, {
    key: "textareaSetHeight",
    value: function textareaSetHeight(el) {
      var min = 3,
        max = 7,
        cur = (el.value.match(/\n/g) || []).length + 1;
      if (cur < min) {
        cur = min;
      } else if (cur > max) {
        cur = max;
      }
      var height = 15 * cur + 'rem';
      el.style.height = height;
      /* also set other textarea heights */
      var parent = el.parentNode;
      (0, _toConsumableArray2["default"])(parent.parentNode.children).filter(function (child) {
        return child !== parent;
      }).forEach(function (i) {
        if (i.querySelector('textarea') !== null) {
          i.querySelector('textarea').style.height = height;
        }
      });
    }
  }]);
  return Textarea;
}();
exports["default"] = Textarea;

},{"./Helper":7,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/helpers/toConsumableArray":34}],16:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Dates = _interopRequireDefault(require("./Dates"));
var _Filter = _interopRequireDefault(require("./Filter"));
var _Helper = _interopRequireDefault(require("./Helper"));
var _Html = _interopRequireDefault(require("./Html"));
var _Lock = _interopRequireDefault(require("./Lock"));
var _Scheduler = _interopRequireDefault(require("./Scheduler"));
var _Quickbox = _interopRequireDefault(require("./Quickbox"));
var _Store = _interopRequireDefault(require("./Store"));
var _Textarea = _interopRequireDefault(require("./Textarea"));
var _Footer = _interopRequireDefault(require("./Footer"));
var _Attachments = _interopRequireDefault(require("./Attachments"));
var _hlp = _interopRequireDefault(require("hlp"));
var Tickets = /*#__PURE__*/function () {
  function Tickets() {
    (0, _classCallCheck2["default"])(this, Tickets);
  }
  (0, _createClass2["default"])(Tickets, null, [{
    key: "updateLocalTicket",
    value: function updateLocalTicket(ticket_id) {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.busy = true;
        _Store["default"].data.api.fetch('_api/tickets/' + ticket_id, {
          method: 'GET',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          _Store["default"].data.busy = false;
          Tickets.setTicketData(ticket_id, response.data);
          resolve();
        });
      });
    }
  }, {
    key: "setTicketData",
    value: function setTicketData(ticket_id, property) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.id == ticket_id) {
          if (_Helper["default"].isObject(property)) {
            Object.entries(property).forEach(function (_ref) {
              var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                property__key = _ref2[0],
                property__value = _ref2[1];
              tickets__value[property__key] = property__value;
            });
          } else {
            tickets__value[property] = value;
          }
        }
      });
    }
  }, {
    key: "fetchAndRenderTicketsInterval",
    value: function fetchAndRenderTicketsInterval() {
      if (_hlp["default"].isDesktop()) {
        setInterval(function () {
          if (_Store["default"].data.busy === true) {
            return;
          }
          if (document.querySelector(':focus') !== null) {
            return;
          }
          Tickets.fetchAndRenderTicketsAndUpdateApp();
          _Footer["default"].updateStatus('successfully synced tasks.', 'success');
        }, 1 * 60 * 1000);
      }
    }
  }, {
    key: "fetchAndRenderTicketsAndUpdateApp",
    value: function () {
      var _fetchAndRenderTicketsAndUpdateApp = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Tickets.fetchAndRenderTickets();
            case 2:
              _Scheduler["default"].initScheduler();
              _Scheduler["default"].updateColors();
              _Quickbox["default"].initToday();
              Tickets.updateSum();
              _Filter["default"].updateFilter();
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function fetchAndRenderTicketsAndUpdateApp() {
        return _fetchAndRenderTicketsAndUpdateApp.apply(this, arguments);
      }
      return fetchAndRenderTicketsAndUpdateApp;
    }()
  }, {
    key: "fetchAndRenderTickets",
    value: function fetchAndRenderTickets() {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.busy = true;
        _Store["default"].data.api.fetch('_api/tickets', {
          method: 'GET',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          _Store["default"].data.busy = false;
          if (_Store["default"].data.tickets === null) {
            _Store["default"].data.tickets = [];
          }

          // remove
          _Store["default"].data.tickets = _Store["default"].data.tickets.filter(function (tickets__value) {
            var exists = response.data.filter(function (el) {
              return el.id == tickets__value.id;
            }).length > 0;
            if (exists === false) {
              document.querySelector('.tickets__entry[data-id="' + tickets__value.id + '"]').remove();
              //console.log('removing ticket ' + tickets__value.id);
            }

            return exists;
          });

          // edit
          response.data.forEach(function (tickets__value) {
            _Store["default"].data.tickets.forEach(function (store__value, store__key) {
              if (store__value.id == tickets__value.id && store__value.updated_at != tickets__value.updated_at) {
                tickets__value.visible = false;
                _Store["default"].data.tickets[store__key] = tickets__value;
                document.querySelector('.tickets__entry[data-id="' + tickets__value.id + '"]').outerHTML = _Html["default"].createHtmlLine(tickets__value, false);
                //console.log('editing ticket ' + tickets__value.id);
              }
            });
          });

          // add
          response.data.forEach(function (tickets__value) {
            if (_Store["default"].data.tickets.filter(function (el) {
              return el.id == tickets__value.id;
            }).length === 0) {
              tickets__value.visible = false;
              _Store["default"].data.tickets.push(tickets__value);
              document.querySelector('.tickets__table-body').insertAdjacentHTML('beforeend', _Html["default"].createHtmlLine(tickets__value, false));
              //console.log('adding ticket ' + tickets__value.id);
            }
          });

          resolve();
        });
      });
    }
  }, {
    key: "getTicketData",
    value: function getTicketData(ticket_id) {
      var data = null;
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.id == ticket_id) {
          data = tickets__value;
        }
      });
      return _hlp["default"].deepCopy(data);
    }
  }, {
    key: "deleteTicket",
    value: function deleteTicket(ticket_id) {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.busy = true;
        _Store["default"].data.api.fetch('_api/tickets/' + ticket_id, {
          method: 'DELETE',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          console.error(err);
        }).then(function (response) {
          _Store["default"].data.busy = false;
          _Store["default"].data.tickets.forEach(function (tickets__value, tickets__key) {
            if (tickets__value.id == ticket_id) {
              _Store["default"].data.tickets.splice(tickets__key, 1);
            }
          });
          resolve();
        });
      });
    }
  }, {
    key: "saveTickets",
    value: function saveTickets() {
      return new Promise(function (resolve, reject) {
        if (document.querySelector('.tickets .tickets__table-body').querySelector('.tickets__textarea:invalid') !== null) {
          reject('not saved - invalid fields!');
          return;
        }
        var changed = [];
        document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--changed').forEach(function (el) {
          var data = {};
          _Store["default"].data.cols.forEach(function (cols__value) {
            data[cols__value] = el.querySelector('[name="' + cols__value + '"]').value;
          });
          data['updated_at'] = _Dates["default"].time().toString();
          Tickets.setTicketData(el.getAttribute('data-id'), data);
          _Lock["default"].lockTicket(el.getAttribute('data-id'));
          changed.push(Tickets.getTicketData(el.getAttribute('data-id')));
        });
        _Store["default"].data.busy = true;
        _Store["default"].data.api.fetch('_api/tickets', {
          method: 'PUT',
          body: JSON.stringify({
            tickets: changed
          }),
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          console.error(err);
        }).then(function (response) {
          _Store["default"].data.busy = false;
          response.data.ids.forEach(function (value) {
            _Lock["default"].unlockTicket(value);
          });
          _Scheduler["default"].initScheduler();
          _Scheduler["default"].updateColors();
          _Quickbox["default"].initToday();
          Tickets.updateSum();
          _Filter["default"].updateFilter();
          resolve();
        });
      });
    }
  }, {
    key: "createTicket",
    value: function createTicket() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new Promise(function (resolve, reject) {
        var ticket = {};
        _Store["default"].data.cols.forEach(function (cols__value) {
          ticket[cols__value] = cols__value in data ? data[cols__value] : '';
        });
        ticket['updated_at'] = _Dates["default"].time().toString();
        _Store["default"].data.busy = true;
        _Store["default"].data.api.fetch('_api/tickets', {
          method: 'POST',
          body: JSON.stringify(ticket),
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          _Store["default"].data.busy = false;
          ticket.id = response.data.id;
          ticket.visible = true;
          _Store["default"].data.tickets.push(ticket);
          resolve(ticket);
        });
      });
    }
  }, {
    key: "bindSave",
    value: function bindSave() {
      // ctrl+s
      document.addEventListener('keydown', function (event) {
        var focus = document.activeElement;
        if (event.ctrlKey || event.metaKey) {
          if (String.fromCharCode(event.which).toLowerCase() === 's') {
            _Footer["default"].updateStatus('saving...', 'warning');
            Tickets.saveTickets().then(function () {
              _Footer["default"].updateStatus('saved!', 'success');
              if (focus !== null) {
                focus.focus();
              }
            })["catch"](function (error) {
              _Footer["default"].updateStatus(error, 'error');
            });
            event.preventDefault();
          }
        }
      });
    }
  }, {
    key: "bindCreate",
    value: function bindCreate() {
      // ctrl+d
      document.addEventListener('keydown', function (event) {
        if (event.ctrlKey || event.metaKey) {
          if (String.fromCharCode(event.which).toLowerCase() === 'd') {
            Tickets.prepareCreateTicket();
            event.preventDefault();
          }
        }
      });
    }
  }, {
    key: "prepareCreateTicket",
    value: function prepareCreateTicket() {
      var visibleAll = document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--visible'),
        current = null,
        currentCol = 1,
        duplicateData = {};
      if (visibleAll.length > 0) {
        if (document.activeElement.closest('.tickets__entry') !== null) {
          current = document.activeElement.closest('.tickets__entry');
          currentCol = _Helper["default"].prevAll(document.activeElement.closest('td')).length + 1;
        } else {
          current = visibleAll[visibleAll.length - 1];
          currentCol = 1;
        }
        duplicateData = Tickets.getTicketData(current.getAttribute('data-id'));
        delete duplicateData['attachments'];
      }
      /* if source is a recurring ticket, do some magic */
      if (current !== null && duplicateData.status === 'recurring' && confirm('should the copy be a scheduled ticket and the recurring ticket automatically be postponed?')) {
        var newDates = [];
        duplicateData.date.split('\n').forEach(function (duplicateData__value) {
          // only add relevant
          var parsed = _Dates["default"].parseDateString(duplicateData__value, 'tickets');
          if (parsed.length === 0) {
            return;
          }
          var newDate = _Dates["default"].dateFormat(_Dates["default"].getActiveDate(), 'd.m.y'),
            extractedTime = _Dates["default"].extractTimeFromDate(duplicateData__value);
          if (extractedTime) {
            newDate += ' ' + extractedTime;
          }
          newDates.push(newDate);
        });
        current.querySelector('.tickets__textarea--date').value = _Dates["default"].includeNewLowerBoundInDate(duplicateData.date, _Dates["default"].getActiveDate());
        current.querySelector('.tickets__textarea--date').dispatchEvent(new Event('input', {
          bubbles: true
        }));
        duplicateData.date = newDates.join('\n');
        duplicateData.status = 'scheduled';
      }
      Tickets.createAndAppendTicket(duplicateData, current, currentCol, true, false);
    }
  }, {
    key: "createAndAppendTicket",
    value: function createAndAppendTicket(data) {
      var current = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var currentCol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var withSelect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var doFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      if (['tonight', 'weekend', 'next'].includes(data.date)) {
        var d = new Date();
        /*
        if (d.getHours() >= 21) {
            d.setDate(d.getDate() + 1);
            d.setHours(9);
        }
        */
        if (data.date === 'weekend') {
          while (d.getDay() % 6 !== 0) {
            d.setDate(d.getDate() + 1);
          }
        }
        if (data.date === 'next') {
          data.date = _Scheduler["default"].determineNextFreeSlot(('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear().toString().substr(-2) + ' ' + _Dates["default"].timeFormat(d.getHours() + 1) + '-' + _Dates["default"].timeFormat(d.getHours() + 1.5));
        } else {
          data.date = ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear().toString().substr(-2) + ' 21:00-21:30';
        }
      }
      Tickets.createTicket(data).then(function (ticket) {
        var next;
        if (current !== null) {
          current.insertAdjacentHTML('afterend', _Html["default"].createHtmlLine(ticket, true));
          next = current.nextElementSibling;
        } else {
          document.querySelector('.tickets .tickets__table-body').insertAdjacentHTML('beforeend', _Html["default"].createHtmlLine(ticket, true));
          next = document.querySelector('.tickets .tickets__table-body').querySelector('.tickets__entry--visible[data-id="' + ticket.id + '"]');
        }
        if (withSelect === true) {
          var input = next.querySelector('td:nth-child(' + currentCol + ')').querySelector('input, textarea');
          input.select();
          input.dispatchEvent(new Event('input', {
            bubbles: true
          }));
        }
        _Scheduler["default"].initScheduler();
        _Scheduler["default"].updateColors();
        _Quickbox["default"].initToday();
        Tickets.updateSum();
        _Filter["default"].updateFilter();
        _Textarea["default"].textareaSetVisibleHeights();
        if (doFilter === true) {
          _Filter["default"].doFilter();
        }
        if ('attachments' in data && data.attachments.length > 0) {
          _Attachments["default"].startUploadsAndBuildHtml(ticket.id, data.attachments);
        }
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }, {
    key: "bindChangeTracking",
    value: function bindChangeTracking() {
      document.querySelector('.tickets').addEventListener('input', function (e) {
        if (e.target.closest('.tickets__entry input, .tickets__entry textarea')) {
          if (e.target.hasAttribute('type') && e.target.getAttribute('type') === 'file') {
            return;
          }
          e.target.closest('.tickets__entry').classList.add('tickets__entry--changed');
        }
      });
    }
  }, {
    key: "bindValidation",
    value: function bindValidation() {
      document.querySelector('.tickets').addEventListener('input', function (e) {
        if (e.target.value !== '') {
          if (e.target.closest('.tickets__textarea--date')) {
            if (_Dates["default"].parseDateString(e.target.value, 'tickets') === false) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }
          if (e.target.closest('.tickets__textarea--time')) {
            if (!new RegExp('^[0-9]$|^[0-9],[0-9]$|^[0-9],[0-9][0-9]$').test(e.target.value) || e.target.value < 0 || e.target.value > 24) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }
          if (e.target.closest('.tickets__textarea--project')) {
            if (new RegExp('[^a-zA-Z0-9äÄöÖüÜß .-]').test(e.target.value)) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }
          if (e.target.closest('.tickets__textarea--priority')) {
            if (!['A', 'B', 'C', 'D'].includes(e.target.value)) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }
          if (e.target.closest('.tickets__textarea--status')) {
            if (!['scheduled', 'idle', 'allday', 'roaming', 'fixed', 'done', 'billed', 'recurring', 'working'].includes(e.target.value)) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }
        } else {
          e.target.setCustomValidity('');
        }
      });
    }
  }, {
    key: "bindAutoTime",
    value: function bindAutoTime() {
      document.querySelector('.tickets').addEventListener('input', function (e) {
        if (e.target.closest('.tickets__entry [name="date"]')) {
          if (e.target.value != '') {
            var parsed_values = _Dates["default"].parseDateString(e.target.value, 'all');
            if (parsed_values !== false) {
              var time = 0;
              parsed_values.forEach(function (parses_values__value) {
                if (parses_values__value.begin !== undefined && parses_values__value.end !== undefined) {
                  time += Math.abs(parses_values__value.end - parses_values__value.begin);
                }
              });
              if (!Number.isInteger(time)) {
                time = time.toFixed(2);
              }
              time = time.toString().replace('.', ',');
              e.target.closest('.tickets__entry').querySelector('.tickets__textarea--time').value = time;
              e.target.closest('.tickets__entry').querySelector('.tickets__textarea--time').setCustomValidity('');
            }
          }
        }
      });
    }
  }, {
    key: "bindDelete",
    value: function bindDelete() {
      document.querySelector('.tickets').addEventListener('click', function (e) {
        if (e.target.closest('.tickets__entry__delete')) {
          var ticket_id = e.target.closest('.tickets__entry').getAttribute('data-id');
          if (_Lock["default"].ticketIsLocked(ticket_id)) {
            e.preventDefault();
          }
          var result = confirm('Sind Sie sicher?');
          if (result) {
            Tickets.deleteTicket(ticket_id).then(function (result) {
              e.target.closest('.tickets__entry').remove();
              _Scheduler["default"].initScheduler();
              _Quickbox["default"].initToday();
              Tickets.updateSum();
              _Filter["default"].updateFilter();
            })["catch"](function (error) {});
            e.preventDefault();
          }
          e.preventDefault();
        }
      });
    }
  }, {
    key: "updateSum",
    value: function updateSum() {
      var sum = 0;
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.visible !== false && tickets__value.time !== null && tickets__value.time != '' && !['allday', 'billed'].includes(tickets__value.status)) {
          sum += parseFloat(tickets__value.time.replace(',', '.'));
        }
      });
      sum = Math.round(sum * 100) / 100;
      sum = sum.toString().replace('.', ',');
      document.querySelector('.tickets__table-foot').querySelector('.tickets__sum').textContent = sum;
    }
  }]);
  return Tickets;
}();
exports["default"] = Tickets;

},{"./Attachments":2,"./Dates":4,"./Filter":5,"./Footer":6,"./Helper":7,"./Html":8,"./Lock":10,"./Quickbox":11,"./Scheduler":12,"./Store":14,"./Textarea":15,"@babel/runtime/helpers/asyncToGenerator":23,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"@babel/runtime/helpers/slicedToArray":33,"@babel/runtime/regenerator":39,"hlp":40}],17:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Store = _interopRequireDefault(require("./Store"));
var User = /*#__PURE__*/function () {
  function User() {
    (0, _classCallCheck2["default"])(this, User);
  }
  (0, _createClass2["default"])(User, null, [{
    key: "fetchUser",
    value: function fetchUser() {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.busy = true;
        _Store["default"].data.api.fetch('_api/users', {
          method: 'GET',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          _Store["default"].data.busy = false;
          _Store["default"].data.user = response.data;
          resolve();
        });
      });
    }
  }]);
  return User;
}();
exports["default"] = User;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27}],18:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Store = _interopRequireDefault(require("./Store"));
var _Dates = _interopRequireDefault(require("./Dates"));
var Weather = /*#__PURE__*/function () {
  function Weather() {
    (0, _classCallCheck2["default"])(this, Weather);
  }
  (0, _createClass2["default"])(Weather, null, [{
    key: "fetchWeather",
    value: function fetchWeather() {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.busy = true;
        _Store["default"].data.api.fetch('_api/weather', {
          method: 'GET',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          _Store["default"].data.busy = false;
          _Store["default"].data.weather = response.data;
          resolve();
        });
      });
    }
  }, {
    key: "outputWeather",
    value: function outputWeather(date) {
      if (!(_Dates["default"].dateFormat(date, 'Y-m-d') in _Store["default"].data.weather)) {
        return '';
      }
      var html = '',
        data = _Store["default"].data.weather[_Dates["default"].dateFormat(date, 'Y-m-d')];
      html += '🌡️' + data.temp + '°C☔' + data.rain + 'mm';
      return html;
    }
  }]);
  return Weather;
}();
exports["default"] = Weather;

},{"./Dates":4,"./Store":14,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27}],19:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _App = _interopRequireDefault(require("./App"));
document.addEventListener('DOMContentLoaded', function () {
  _App["default"].init();
});

},{"./App":1,"@babel/runtime/helpers/interopRequireDefault":27}],20:[function(require,module,exports){
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],21:[function(require,module,exports){
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],22:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}
module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayLikeToArray.js":20}],23:[function(require,module,exports){
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],24:[function(require,module,exports){
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],25:[function(require,module,exports){
var toPropertyKey = require("./toPropertyKey.js");
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./toPropertyKey.js":36}],26:[function(require,module,exports){
var toPropertyKey = require("./toPropertyKey.js");
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./toPropertyKey.js":36}],27:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],28:[function(require,module,exports){
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],29:[function(require,module,exports){
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],30:[function(require,module,exports){
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],31:[function(require,module,exports){
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],32:[function(require,module,exports){
var _typeof = require("./typeof.js")["default"];
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function define(t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function value(t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./typeof.js":37}],33:[function(require,module,exports){
var arrayWithHoles = require("./arrayWithHoles.js");
var iterableToArrayLimit = require("./iterableToArrayLimit.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableRest = require("./nonIterableRest.js");
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayWithHoles.js":21,"./iterableToArrayLimit.js":29,"./nonIterableRest.js":30,"./unsupportedIterableToArray.js":38}],34:[function(require,module,exports){
var arrayWithoutHoles = require("./arrayWithoutHoles.js");
var iterableToArray = require("./iterableToArray.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableSpread = require("./nonIterableSpread.js");
function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}
module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayWithoutHoles.js":22,"./iterableToArray.js":28,"./nonIterableSpread.js":31,"./unsupportedIterableToArray.js":38}],35:[function(require,module,exports){
var _typeof = require("./typeof.js")["default"];
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./typeof.js":37}],36:[function(require,module,exports){
var _typeof = require("./typeof.js")["default"];
var toPrimitive = require("./toPrimitive.js");
function _toPropertyKey(arg) {
  var key = toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./toPrimitive.js":35,"./typeof.js":37}],37:[function(require,module,exports){
function _typeof(o) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],38:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayLikeToArray.js":20}],39:[function(require,module,exports){
// TODO(Babel 8): Remove this file.

var runtime = require("../helpers/regeneratorRuntime")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

},{"../helpers/regeneratorRuntime":32}],40:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class hlp {
  static x(input) {
    if (typeof input === 'function') {
      try {
        input = input();
        return this.x(input);
      } catch (e) {
        return false;
      }
    }
    if (input === null || input === false || typeof input === 'string' && input.trim() == '' || typeof input === 'object' && Object.keys(input).length === 0 && input.constructor === Object || typeof input === 'undefined' || Array.isArray(input) && input.length === 0 || Array.isArray(input) && input.length === 1 && input[0] === '') {
      return false;
    }
    return true;
  }
  static nx(input) {
    return !this.x(input);
  }
  static true(input) {
    if (typeof input === 'function') {
      try {
        input = input();
        return this.true(input);
      } catch (e) {
        return false;
      }
    }
    if (input === undefined) {
      return false;
    }
    if (input === null) {
      return false;
    }
    if (input === false) {
      return false;
    }
    if (Array.isArray(input) && input.length === 0) {
      return false;
    }
    if (Array.isArray(input) && hlp.first(input) === '') {
      return false;
    }
    if (typeof input === 'object' && Object.keys(input).length === 0 && input.constructor === Object) {
      return false;
    }
    if (input === 0) {
      return false;
    }
    if (input === '0') {
      return false;
    }
    if (input === '') {
      return false;
    }
    if (input === ' ') {
      return false;
    }
    if (input === 'null') {
      return false;
    }
    if (input === 'false') {
      return false;
    }
    return true;
  }
  static false(input) {
    if (typeof input === 'function') {
      try {
        input = input();
        return this.false(input);
      } catch (e) {
        return false;
      }
    }
    if (input === undefined) {
      return false;
    }
    if (input === null) {
      return false;
    }
    if (input === false) {
      return true;
    }
    if (Array.isArray(input) && input.length === 0) {
      return false;
    }
    if (Array.isArray(input) && hlp.first(input) === '') {
      return false;
    }
    if (typeof input === 'object' && Object.keys(input).length === 0 && input.constructor === Object) {
      return false;
    }
    if (input === 0) {
      return true;
    }
    if (input === '0') {
      return true;
    }
    if (input === '') {
      return false;
    }
    if (input === ' ') {
      return false;
    }
    if (input === 'null') {
      return false;
    }
    if (input === 'false') {
      return true;
    }
    return false;
  }
  static v() {
    if (this.nx(arguments)) {
      return '';
    }
    for (let i = 0; i < arguments.length; i++) {
      if (this.x(arguments[i])) {
        return arguments[i];
      }
    }
    return '';
  }
  static loop(input, fun) {
    if (this.nx(input)) {
      return null;
    }
    if (Array.isArray(input)) {
      input.forEach((input__value, input__key) => {
        fun(input__value, input__key);
      });
    } else if (typeof input === 'object') {
      Object.entries(input).forEach(_ref => {
        let [input__key, input__value] = _ref;
        fun(input__value, input__key);
      });
    }
  }
  static map(obj, fn, ctx) {
    return Object.keys(obj).reduce((a, b) => {
      a[b] = fn.call(ctx || null, b, obj[b]);
      return a;
    }, {});
  }
  static first(input) {
    if (Array.isArray(input)) {
      var ret = null;
      input.forEach((input__value, input__key) => {
        if (ret === null) {
          ret = input__value;
        }
      });
      return ret;
    }
    if (typeof input === 'object') {
      var ret = null;
      Object.entries(input).forEach(_ref2 => {
        let [input__key, input__value] = _ref2;
        if (ret === null) {
          ret = input__value;
        }
      });
      return ret;
    }
    return null;
  }
  static last(input) {
    if (Array.isArray(input)) {
      let ret = null;
      input.forEach((input__value, input__key) => {
        ret = input__value;
      });
      return ret;
    }
    if (typeof input === 'object') {
      let ret = null;
      Object.entries(input).forEach(_ref3 => {
        let [input__key, input__value] = _ref3;
        ret = input__value;
      });
      return ret;
    }
    return null;
  }
  static rand(input) {
    if (Array.isArray(input)) {
      return input[Math.floor(Math.random() * input.length)];
    }
    if (typeof input === 'object') {
      var input = Object.values(input);
      return input[Math.floor(Math.random() * input.length)];
    }
    return null;
  }
  static random_string() {
    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
    let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (chars === null) {
      chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    }
    let chars_length = chars.length,
      random_string = '';
    for (let i = 0; i < length; i++) {
      random_string += chars[~~(Math.random() * (chars_length - 1 - 0 + 1)) + 0];
    }
    return random_string;
  }
  static round() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
  }
  static isInteger(value) {
    return !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));
  }
  static random_int() {
    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99999;
    if (!this.isInteger(min) || !this.isInteger(max)) {
      return false;
    }
    if (min > max) {
      [min, max] = [max, min];
    }
    return ~~(Math.random() * (max - min + 1)) + min;
  }
  static capitalize() {
    let string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    if (string === null) {
      return string;
    }
    if (string === '') {
      return string;
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  static cookieExists(cookie_name) {
    if (document.cookie !== undefined && this.cookieGet(cookie_name) !== null) {
      return true;
    }
    return false;
  }
  static cookieGet(cookie_name) {
    var cookie_match = document.cookie.match(new RegExp(cookie_name + '=([^;]+)'));
    if (cookie_match) {
      return decodeURIComponent(cookie_match[1]);
    }
    return null;
  }
  static cookieSet(cookie_name, cookie_value, days) {
    let full_domain = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    let samesite = '';
    if (window.location.protocol.indexOf('https') > -1) {
      samesite = '; SameSite=None; Secure';
    }
    document.cookie = cookie_name + '=' + encodeURIComponent(cookie_value) + '; ' + 'expires=' + new Date(new Date().getTime() + days * 24 * 60 * 60 * 1000).toUTCString() + '; path=/' + samesite + '; domain=' + (full_domain === true ? this.urlHostTopLevel() : '');
  }
  static cookieDelete(cookie_name) {
    let full_domain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let samesite = '';
    if (window.location.protocol.indexOf('https') > -1) {
      samesite = '; SameSite=None; Secure';
    }
    document.cookie = cookie_name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/' + samesite + '; domain=' + (full_domain === true ? this.urlHostTopLevel() : '');
  }
  static localStorageSet(key, value) {
    let ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    ttl = ttl * (24 * 60 * 60 * 1000);
    let now = new Date(),
      item = {
        value: value,
        expiry: now.getTime() + ttl
      };
    localStorage.setItem(key, JSON.stringify(item));
  }
  static localStorageGet(key) {
    let itemStr = localStorage.getItem(key);
    if (!itemStr) {
      return null;
    }
    let item = JSON.parse(itemStr),
      now = new Date();
    if (now.getTime() > item.expiry) {
      localStorage.removeItem(key);
      return null;
    }
    return item.value;
  }
  static localStorageDelete(key) {
    localStorage.removeItem(key);
  }
  static localStorageExists(key) {
    return this.localStorageGet(key) !== null;
  }
  static getParam(variable) {
    let url = window.location.search;
    if (this.nx(url)) {
      return null;
    }
    let query = url.substring(1),
      vars = query.split('&');
    for (var i = 0; i < vars.length; i++) {
      var pair = vars[i].split('=');
      if (pair[0] == variable && this.x(pair[1])) {
        return pair[1];
      }
    }
    return null;
  }
  static getDevice() {
    if (this.isPhone()) {
      return 'phone';
    }
    if (this.isTablet()) {
      return 'tablet';
    }
    return 'desktop';
  }
  static isPhone() {
    // based on detectmobilebrowsers.com
    let a = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
  }
  static isTablet() {
    // based on detectmobilebrowsers.com
    let a = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
  }
  static isDesktop() {
    return !this.isPhone() && !this.isTablet();
  }
  static isMobile() {
    // viewport width based OR phone based
    if (window.innerWidth < 750 || this.isPhone()) {
      return true;
    }
    return false;
  }
  static isTouch() {
    return 'ontouchstart' in window || navigator.maxTouchPoints || false;
  }
  static isMac() {
    return hlp.getOs() === 'mac';
  }
  static isLinux() {
    return hlp.getOs() === 'linux';
  }
  static isWindows() {
    return hlp.getOs() === 'windows';
  }
  static getOs() {
    let userAgent = window.navigator.userAgent,
      platform = window.navigator.platform,
      macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
      windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
      iosPlatforms = ['iPhone', 'iPad', 'iPod'],
      os = 'unknown';
    if (macosPlatforms.indexOf(platform) !== -1) {
      os = 'mac';
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = 'mac';
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = 'windows';
    } else if (/Android/.test(userAgent)) {
      os = 'linux';
    } else if (/Linux/.test(platform)) {
      os = 'linux';
    }
    return os;
  }
  static getBrowser() {
    let browser_name = '',
      isIE = /*@cc_on!@*/false || !!document.documentMode,
      isEdge = !isIE && !!window.StyleMedia;
    if (navigator.userAgent.indexOf('Opera') != -1 || navigator.userAgent.indexOf('OPR') != -1) {
      browser_name = 'opera';
    } else if (navigator.userAgent.indexOf('Chrome') != -1 && !isEdge) {
      browser_name = 'chrome';
    } else if (navigator.userAgent.indexOf('Safari') != -1 && !isEdge) {
      browser_name = 'safari';
    } else if (navigator.userAgent.indexOf('Firefox') != -1) {
      browser_name = 'firefox';
    } else if (navigator.userAgent.indexOf('MSIE') != -1 || !!document.documentMode == true) {
      //IF IE > 10
      browser_name = 'ie';
    } else if (isEdge) {
      browser_name = 'edge';
    } else {
      browser_name = 'unknown';
    }
    return browser_name;
  }
  static isObject(a) {
    return !!a && a.constructor === Object;
  }
  static isArray(a) {
    return !!a && a.constructor === Array;
  }
  static isString(string) {
    return typeof string === 'string' || string instanceof String;
  }
  static isDate(string) {
    if (this.nx(string)) {
      return false;
    }
    // if string is of object date
    if (Object.prototype.toString.call(string) === '[object Date]') {
      return true;
    }
    // if this is not a string
    if (!this.isString(string)) {
      return false;
    }
    // strong check
    if (string.split('-').length !== 3) {
      return false;
    }
    let day = parseInt(string.split('-')[2]),
      month = parseInt(string.split('-')[1]),
      year = parseInt(string.split('-')[0]),
      date = new Date();
    date.setFullYear(year, month - 1, day);
    if (date.getFullYear() == year && date.getMonth() + 1 == month && date.getDate() == day) {
      return true;
    }
    return false;
  }
  static formatDate(format) {
    let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (date === false || date === true || date === null || date === '') {
      date = new Date();
    } else if (typeof date !== 'object') {
      date = new Date(date.replace(/-/g, '/'));
    }
    let string = '',
      mo = date.getMonth(),
      m1 = mo + 1,
      dow = date.getDay(),
      d = date.getDate(),
      y = date.getFullYear(),
      h = date.getHours(),
      mi = date.getMinutes(),
      s = date.getSeconds();
    for (let i = 0, len = format.length; i < len; i++) {
      switch (format[i]) {
        case 'j':
          string += d;
          break;
        case 'd':
          string += d < 10 ? '0' + d : d;
          break;
        case 'l':
          let days = Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
          string += days[dow];
          break;
        case 'w':
          string += dow;
          break;
        case 'D':
          days = Array('Sun', 'Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat');
          string += days[dow];
          break;
        case 'm':
          string += m1 < 10 ? '0' + m1 : m1;
          break;
        case 'n':
          string += m1;
          break;
        case 'F':
          let months = Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
          string += months[mo];
          break;
        case 'M':
          months = Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
          string += months[mo];
          break;
        case 'Y':
          string += y;
          break;
        case 'y':
          string += y.toString().slice(-2);
          break;
        case 'H':
          string += h < 10 ? '0' + h : h;
          break;
        case 'g':
          let hour = h === 0 ? 12 : h;
          string += hour > 12 ? hour - 12 : hour;
          break;
        case 'h':
          hour = h === 0 ? 12 : h;
          hour = hour > 12 ? hour - 12 : hour;
          string += hour < 10 ? '0' + hour : hour;
          break;
        case 'a':
          string += h < 12 ? 'am' : 'pm';
          break;
        case 'i':
          string += mi < 10 ? '0' + mi : mi;
          break;
        case 's':
          string += s < 10 ? '0' + s : s;
          break;
        case 'c':
          string += date.toISOString();
          break;
        default:
          string += format[i];
      }
    }
    return string;
  }
  static deepCopy(obj) {
    let hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new WeakMap();
    if (Object(obj) !== obj) return obj; // primitives
    if (hash.has(obj)) return hash.get(obj); // cyclic reference
    const result = obj instanceof Date ? new Date(obj) : obj instanceof RegExp ? new RegExp(obj.source, obj.flags) : obj.constructor ? new obj.constructor() : Object.create(null);
    hash.set(obj, result);
    if (obj instanceof Map) Array.from(obj, _ref4 => {
      let [key, val] = _ref4;
      return result.set(key, hlp.deepCopy(val, hash));
    });
    return Object.assign(result, ...Object.keys(obj).map(key => ({
      [key]: hlp.deepCopy(obj[key], hash)
    })));
  }
  static jsonStringToObject(string) {
    if (this.nx(string) || !this.isString(string)) {
      return null;
    }
    try {
      return JSON.parse(string);
    } catch (error) {
      return null;
    }
  }
  static isJsonString(string) {
    if (this.nx(string) || !this.isString(string)) {
      return false;
    }
    try {
      let json = JSON.parse(string);
      return true;
    } catch (error) {
      return false;
    }
  }
  static jsonObjectToString(object) {
    try {
      return JSON.stringify(object);
    } catch (error) {
      return null;
    }
  }
  static uuid() {
    function s4() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
  }
  static guid() {
    return this.uuid();
  }
  static replaceAll(string, search, replace) {
    return string.split(search).join(replace);
  }
  static replaceLast(string, search, replace) {
    let n = string.lastIndexOf(search);
    string = string.slice(0, n) + string.slice(n).replace(search, replace);
    return string;
  }
  static replaceFirst(string, search, replace) {
    return string.replace(search, replace);
  }
  static findAllPositions(searchStr, str) {
    let searchStrLen = searchStr.length,
      startIndex = 0,
      index,
      indices = [];
    if (searchStrLen == 0) {
      return [];
    }
    while ((index = str.indexOf(searchStr, startIndex)) > -1) {
      indices.push(index);
      startIndex = index + searchStrLen;
    }
    return indices;
  }
  static findAllPositionsCaseInsensitive(searchStr, str) {
    let searchStrLen = searchStr.length,
      startIndex = 0,
      index,
      indices = [];
    if (searchStrLen == 0) {
      return [];
    }
    while ((index = this.indexOfCaseInsensitive(searchStr, str, startIndex)) > -1) {
      indices.push(index);
      startIndex = index + searchStrLen;
    }
    return indices;
  }
  static countAllOccurences(value, str) {
    let regExp = new RegExp(value, 'g');
    return (str.match(regExp) || []).length;
  }
  static countAllOccurencesCaseInsensitive(value, str) {
    let regExp = new RegExp(value, 'gi');
    return (str.match(regExp) || []).length;
  }
  static indexOfCaseInsensitive(searchStr, str, offset) {
    return str.toLowerCase().indexOf(searchStr.toLowerCase(), offset);
  }
  static highlight(string, query) {
    let strip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let strip_length = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 500;
    if (this.nx(string) || this.nx(query)) {
      return string;
    }
    if (strip === true) {
      let dots = '...';
      // get all query begin positions in spot
      let positions = this.findAllPositionsCaseInsensitive(query, string);
      // strip away parts
      let words = string.split(' ');
      let i = 0;
      words.forEach((words__value, words__key) => {
        let strip_now = true;
        positions.forEach(positions__value => {
          if (i >= positions__value - strip_length && i <= positions__value + query.length + strip_length - 1) {
            strip_now = false;
          }
        });
        if (strip_now === true) {
          words[words__key] = dots;
        }
        i += words__value.length + 1;
      });
      string = words.join(' ');
      while (string.indexOf(dots + ' ' + dots) > -1) {
        string = this.replaceAll(string, dots + ' ' + dots, dots);
      }
      string = string.trim();
    }
    // again: get all query begin positions in spot
    let positions = this.findAllPositionsCaseInsensitive(query, string);
    // wrap span element around them
    let wrap_begin = '<strong class="highlight">';
    let wrap_end = '</strong>';
    for (let x = 0; x < positions.length; x++) {
      string = string.substring(0, positions[x]) + wrap_begin + string.substring(positions[x], positions[x] + query.length) + wrap_end + string.substring(positions[x] + query.length);
      // shift other positions
      for (let y = x + 1; y < positions.length; y++) {
        positions[y] = positions[y] + wrap_begin.length + wrap_end.length;
      }
    }
    return string;
  }
  static get(url) {
    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return this.call('GET', url, args);
  }
  static post(url) {
    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return this.call('POST', url, args);
  }
  static call(method, url) {
    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (args === null) {
      args = {};
    }
    if (!('data' in args)) {
      args.data = {};
    }
    if (!('headers' in args)) {
      args.headers = null;
    }
    if (!('throttle' in args)) {
      args.throttle = 0;
    }
    if (!('allow_errors' in args)) {
      args.allow_errors = true;
    }
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (url.indexOf('http') !== 0) {
          url = hlp.baseUrl() + '/' + url;
        }
        let xhr = new XMLHttpRequest();
        xhr.open(method, url, true);
        if (method === 'POST') {
          if ('data' in args && args.data !== null && typeof args.data === 'object' && !(args.data instanceof FormData)) {
            xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
            args.data = JSON.stringify(args.data);
          }
          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }
        if (this.x(args.headers)) {
          Object.entries(args.headers).forEach(_ref5 => {
            let [headers__key, headers__value] = _ref5;
            xhr.setRequestHeader(headers__key, headers__value);
          });
        }
        xhr.onload = () => {
          if (xhr.readyState != 4 || args.allow_errors !== true && xhr.status != 200 && xhr.status != 304) {
            if (this.isJsonString(xhr.responseText)) {
              reject(this.jsonStringToObject(xhr.responseText));
            } else {
              reject(xhr.responseText);
            }
          }
          if (this.isJsonString(xhr.responseText)) {
            resolve(this.jsonStringToObject(xhr.responseText));
          } else {
            resolve(xhr.responseText);
          }
        };
        xhr.onerror = () => {
          reject([xhr.readyState, xhr.status, xhr.statusText]);
        };
        if (method === 'GET') {
          xhr.send(null);
        }
        if (method === 'POST') {
          xhr.send(args.data);
        }
      }, args.throttle);
    });
  }
  static onResizeHorizontal(fun) {
    let windowWidth = window.innerWidth,
      windowWidthNew,
      timeout;
    window.addEventListener('resize', () => {
      windowWidthNew = window.innerWidth;
      if (windowWidthNew != windowWidth) {
        windowWidth = windowWidthNew;
        if (timeout) {
          clearTimeout(timeout);
        }
        timeout = window.setTimeout(() => {
          fun();
        }, 50);
      }
    });
    fun();
  }
  static onResizeVertical(fun) {
    var windowHeight = window.innerHeight,
      windowHeightNew,
      timeout;
    window.addEventListener('resize', () => {
      windowHeightNew = window.innerHeight;
      if (windowHeightNew != windowHeight) {
        windowHeight = windowHeightNew;
        if (timeout) {
          clearTimeout(timeout);
        }
        timeout = window.setTimeout(() => {
          fun();
        }, 50);
      }
    });
    fun();
  }
  static removeEmpty(array) {
    if (this.nx(array) || !Array.isArray(array)) {
      return array;
    }
    array = array.filter(array__value => {
      return this.x(array__value);
    });
    return array;
  }
  static uniqueArray(array) {
    let seen = {},
      ret_arr = [];
    for (let i = 0; i < array.length; i++) {
      if (!(array[i] in seen)) {
        ret_arr.push(array[i]);
        seen[array[i]] = true;
      }
    }
    return ret_arr;
  }
  static powerset(array) {
    if (!Array.isArray(array)) {
      return array;
    }
    return array.reduce((subsets, value) => subsets.concat(subsets.map(set => [...set, value])), [[]]);
  }
  static charToInt(val) {
    val = val.toUpperCase();
    let base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      i,
      j,
      result = 0;
    for (i = 0, j = val.length - 1; i < val.length; i += 1, j -= 1) {
      result += Math.pow(base.length, j) * (base.indexOf(val[i]) + 1);
    }
    return result;
  }
  static intToChar(num) {
    for (var ret = '', a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {
      ret = String.fromCharCode(parseInt(num % b / a) + 65) + ret;
    }
    return ret;
  }
  static slugify(text) {
    return text.toString().toLowerCase().trim().split('ä').join('ae').split('ö').join('oe').split('ü').join('ue').split('ß').join('ss').replace(/[^\w\s-]/g, '') // remove non-word [a-z0-9_], non-whitespace, non-hyphen characters
    .replace(/[\s_-]+/g, '-') // swap any length of whitespace, underscore, hyphen characters with a single -
    .replace(/^-+|-+$/g, ''); // remove leading, trailing -
  }

  static incChar(char) {
    let shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    return this.intToChar(this.charToInt(char) + shift);
  }
  static decChar(char) {
    let shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    return this.intToChar(this.charToInt(char) - shift);
  }
  static range(start, end) {
    let range = [],
      typeofStart = typeof start,
      typeofEnd = typeof end,
      step = 1;
    if (typeofStart == 'undefined' || typeofEnd == 'undefined' || typeofStart != typeofEnd) {
      return null;
    }
    if (end < start) {
      step = -step;
    }
    if (typeofStart == 'number') {
      while (step > 0 ? end >= start : end <= start) {
        range.push(start);
        start += step;
      }
    } else if (typeofStart == 'string') {
      if (start.length != 1 || end.length != 1) {
        return null;
      }
      start = start.charCodeAt(0);
      end = end.charCodeAt(0);
      while (step > 0 ? end >= start : end <= start) {
        range.push(String.fromCharCode(start));
        start += step;
      }
    } else {
      return null;
    }
    return range;
  }
  static dateToWeek() {
    let d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    if (d === null) {
      d = new Date();
    }
    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
    d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
    let yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)),
      weekNo = Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
    return weekNo;
  }
  static weekToDate(week, year) {
    if (year == null) {
      year = new Date().getFullYear();
    }
    let date = new Date();
    date.setYear(year);
    date.setDate(1);
    date.setMonth(0);
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    date.setMilliseconds(0);
    let FIRST_DAY_OF_WEEK = 1;
    let WEEK_LENGTH = 7;
    let day = date.getDay();
    day = day === 0 ? 7 : day;
    let dayOffset = -day + FIRST_DAY_OF_WEEK;
    if (WEEK_LENGTH - day + 1 < 4) {
      dayOffset += WEEK_LENGTH;
    }
    date = new Date(date.getTime() + dayOffset * 24 * 60 * 60 * 1000);
    let weekTime = 1000 * 60 * 60 * 24 * 7 * (week - 1);
    let targetTime = date.getTime() + weekTime;
    date.setTime(targetTime);
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    date.setMilliseconds(0);
    return date;
  }
  static addDays(date, days) {
    var result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  }
  static objectsAreEqual(x, y) {
    var _this = this;
    if (x === null || x === undefined || y === null || y === undefined) {
      return x === y;
    }
    if (x.constructor !== y.constructor) {
      return false;
    }
    if (x instanceof Function) {
      return x === y;
    }
    if (x instanceof RegExp) {
      return x === y;
    }
    if (x === y || x.valueOf() === y.valueOf()) {
      return true;
    }
    if (Array.isArray(x) && x.length !== y.length) {
      return false;
    }
    if (x instanceof Date) {
      return false;
    }
    if (!(x instanceof Object)) {
      return false;
    }
    if (!(y instanceof Object)) {
      return false;
    }
    var p = Object.keys(x);
    return Object.keys(y).every(function (i) {
      return p.indexOf(i) !== -1;
    }) && p.every(function (i) {
      return _this.objectsAreEqual(x[i], y[i]);
    });
  }
  static containsObject(obj, list) {
    var x;
    for (x in list) {
      if (list.hasOwnProperty(x) && this.objectsAreEqual(list[x], obj)) {
        return true;
      }
    }
    return false;
  }
  static fadeOut(el) {
    let speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    if (speed <= 25) {
      speed = 25;
    }
    return new Promise(resolve => {
      el.style.opacity = 1;
      (function fade() {
        if ((el.style.opacity -= 25 / speed) < 0) {
          el.style.display = 'none';
          resolve();
        } else {
          requestAnimationFrame(fade);
        }
      })();
    });
  }
  static fadeIn(el) {
    let speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    if (speed <= 25) {
      speed = 25;
    }
    return new Promise(resolve => {
      el.style.opacity = 0;
      el.style.display = 'block';
      (function fade() {
        var val = parseFloat(el.style.opacity);
        if (!((val += 25 / speed) > 1)) {
          el.style.opacity = val;
          requestAnimationFrame(fade);
        } else {
          resolve();
        }
      })();
    });
  }
  static scrollTop() {
    let doc = document.documentElement;
    return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
  }
  static scrollLeft() {
    let doc = document.documentElement;
    return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
  }
  static closestScrollable(node) {
    let isElement = node instanceof HTMLElement,
      overflowY = isElement && window.getComputedStyle(node).overflowY,
      isScrollable = overflowY && !(overflowY.includes('hidden') || overflowY.includes('visible'));
    if (!node) {
      return null;
    } else if (isScrollable && node.scrollHeight >= node.clientHeight) {
      return node;
    }
    return this.closestScrollable(node.parentNode) || document.scrollingElement || document.body;
  }
  static offsetTop(el) {
    return el.getBoundingClientRect().top + window.pageYOffset - document.documentElement.clientTop;
  }
  static offsetLeft(el) {
    return el.getBoundingClientRect().left + window.pageXOffset - document.documentElement.clientLeft;
  }
  static offsetRight(el) {
    return el.getBoundingClientRect().left + window.pageXOffset - document.documentElement.clientLeft + el.offsetWidth;
  }
  static offsetBottom(el) {
    return el.getBoundingClientRect().top + window.pageYOffset - document.documentElement.clientTop + el.offsetHeight;
  }
  static offsetTopWithMargin(el) {
    return this.offsetTop(el) - parseInt(getComputedStyle(el).marginTop);
  }
  static offsetLeftWithMargin(el) {
    return this.offsetLeft(el) - parseInt(getComputedStyle(el).marginLeft);
  }
  static offsetRightWithMargin(el) {
    return this.offsetRight(el) + parseInt(getComputedStyle(el).marginRight);
  }
  static offsetBottomWithMargin(el) {
    return this.offsetBottom(el) + parseInt(getComputedStyle(el).marginBottom);
  }
  static documentHeight() {
    return Math.max(document.body.offsetHeight, document.body.scrollHeight, document.documentElement.clientHeight, document.documentElement.offsetHeight, document.documentElement.scrollHeight);
  }
  static documentWidth() {
    return document.documentElement.clientWidth || document.body.clientWidth;
  }
  static windowWidth() {
    return window.innerWidth;
  }
  static windowHeight() {
    return window.innerHeight;
  }
  static windowWidthWithoutScrollbar() {
    return document.documentElement.clientWidth || document.body.clientWidth;
  }
  static windowHeightWithoutScrollbar() {
    return document.documentElement.clientHeight || document.body.clientHeight;
  }
  static outerWidthWithMargin(el) {
    return el.offsetWidth + parseInt(getComputedStyle(el).marginLeft) + parseInt(getComputedStyle(el).marginRight);
  }
  static outerHeightWithMargin(el) {
    return el.offsetHeight + parseInt(getComputedStyle(el).marginTop) + parseInt(getComputedStyle(el).marginBottom);
  }
  static scrollTo(to) {
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    let element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let only_up = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    return new Promise(resolve => {
      if (element === null) {
        element = document.scrollingElement || document.documentElement;
      }
      if (!hlp.isNumeric(to)) {
        if (element === (document.scrollingElement || documentElement)) {
          to = this.offsetTopWithMargin(to);
        } else {
          to = to.getBoundingClientRect().top - parseInt(getComputedStyle(to).marginTop) - (element.getBoundingClientRect().top - element.scrollTop - parseInt(getComputedStyle(element).marginTop));
        }
      }
      let offset_calc = 0;
      if (!Array.isArray(offset)) {
        offset = [offset];
      }
      offset.forEach(offset__value => {
        if (hlp.isNumeric(offset__value)) {
          offset_calc += offset__value;
        } else {
          if (offset__value !== null) {
            if (window.getComputedStyle(offset__value).position === 'fixed') {
              offset_calc += -1 * offset__value.offsetHeight;
            }
          }
        }
      });
      to += offset_calc;
      const start = element.scrollTop,
        change = to - start,
        startDate = +new Date(),
        // t = current time
        // b = start value
        // c = change in value
        // d = duration
        easeInOutQuad = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) return c / 2 * t * t + b;
          t--;
          return -c / 2 * (t * (t - 2) - 1) + b;
        },
        easeInOutCirc = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
          t -= 2;
          return c / 2 * (Math.sqrt(1 - t * t) + 1) + b;
        },
        animateScroll = function () {
          const currentDate = +new Date();
          const currentTime = currentDate - startDate;
          element.scrollTop = parseInt(easeInOutCirc(currentTime, start, change, duration));
          if (currentTime < duration) {
            requestAnimationFrame(animateScroll);
          } else {
            element.scrollTop = to;
            resolve();
          }
        };
      if (only_up === true && change > 0) {
        resolve();
        return;
      }
      animateScroll();
    });
  }
  static loadJs(urls) {
    if (!hlp.isArray(urls)) {
      urls = [urls];
    }
    let promises = [];
    hlp.loop(urls, (urls__value, urls__key) => {
      promises.push(new Promise((resolve, reject) => {
        let script = document.createElement('script');
        script.src = urls__value;
        script.onload = () => {
          resolve();
        };
        document.head.appendChild(script);
      }));
    });
    return Promise.all(promises);
  }
  static async loadJsSequentially(urls) {
    if (!hlp.isArray(urls)) {
      urls = [urls];
    }
    for (let urls__value of urls) {
      await hlp.loadJs(urls__value);
    }
    return;
  }
  static triggerAfterAllImagesLoaded(selectorContainer, selectorImage, fn) {
    window.addEventListener('load', e => {
      if (document.querySelector(selectorContainer + ' ' + selectorImage) !== null) {
        document.querySelectorAll(selectorContainer + ' ' + selectorImage).forEach(el => {
          this.triggerAfterAllImagesLoadedBindLoadEvent(el, selectorContainer, selectorImage, fn);
        });
      }
    });
    document.addEventListener('DOMContentLoaded', () => {
      if (document.querySelector(selectorContainer) !== null) {
        new MutationObserver(mutations => {
          mutations.forEach(mutation => {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
              mutation.addedNodes.forEach(el => {
                this.triggerAfterAllImagesLoadedHandleEl(el, selectorContainer, selectorImage, fn);
              });
            } else if (mutation.type === 'attributes' && mutation.attributeName === 'src' && mutation.target.classList.contains(selectorImage.replace('.', '')) && mutation.oldValue !== mutation.target.getAttribute('src')) {
              this.triggerAfterAllImagesLoadedHandleEl(mutation.target, selectorContainer, selectorImage, fn);
            }
          });
        }).observe(document.querySelector(selectorContainer), {
          attributes: true,
          childList: true,
          characterData: false,
          subtree: true,
          attributeOldValue: true,
          characterDataOldValue: false
        });
      }
    });
  }
  static triggerAfterAllImagesLoadedHandleEl(el, selectorContainer, selectorImage, fn) {
    if (el.nodeType === Node.ELEMENT_NODE) {
      el.classList.remove('loaded-img');
      el.closest(selectorContainer).classList.remove('loaded-all');
      // only bind if not yet binded
      if (!el.classList.contains('binded-trigger')) {
        el.classList.add('binded-trigger');
        el.addEventListener('load', () => {
          this.triggerAfterAllImagesLoadedBindLoadEvent(el, selectorContainer, selectorImage, fn);
        });
      }
    }
  }
  static triggerAfterAllImagesLoadedBindLoadEvent(el, selectorContainer, selectorImage, fn) {
    el.classList.add('loaded-img');
    if (el.closest(selectorContainer).querySelectorAll('.loaded-img').length === el.closest(selectorContainer).querySelectorAll(selectorImage).length) {
      el.closest(selectorContainer).classList.add('loaded-all');
      fn();
    }
  }
  static isVisible(el) {
    return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
  }
  static isVisibleInViewport(el) {
    if (!this.isVisible(el)) {
      return false;
    }
    let rect = el.getBoundingClientRect();
    return !(rect.bottom < 0 || rect.right < 0 || rect.left > window.innerWidth || rect.top > window.innerHeight);
  }
  static textareaAutoHeight() {
    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'textarea';
    this.textareaSetHeights(selector);
    this.onResizeHorizontal(() => {
      this.textareaSetHeights(selector);
    });
    [].forEach.call(document.querySelectorAll(selector), el => {
      el.addEventListener('keyup', e => {
        this.textareaSetHeight(e.target);
      });
    });
  }
  static textareaSetHeights() {
    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'textarea';
    [].forEach.call(document.querySelectorAll(selector), el => {
      if (this.isVisible(el)) {
        this.textareaSetHeight(el);
      }
    });
  }
  static textareaSetHeight(el) {
    el.style.height = '5px';
    el.style.height = el.scrollHeight + 'px';
  }
  static real100vh() {
    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
    if (selector === null) {
      // apply trick from https://css-tricks.com/the-trick-to-viewport-units-on-mobile/
      let fn = () => {
        let vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      };
      fn();
      window.addEventListener('resize', () => {
        fn();
      });
    } else {
      let fn = () => {
        console.log(selector);
        if (document.querySelector(selector) !== null) {
          document.querySelectorAll(selector).forEach(selector__value => {
            selector__value.style.height = window.innerHeight * (percent / 100) + 'px';
          });
        }
      };
      fn();
      window.addEventListener('resize', () => {
        fn();
      });
    }
  }
  static iOsRemoveHover() {
    if (hlp.getBrowser() === 'safari' && hlp.getDevice() !== 'desktop') {
      hlp.on('touchend', 'a', (e, el) => {
        el.click();
      });
    }
  }
  static isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }
  static animate(el, from, to, easing, duration) {
    return new Promise(resolve => {
      // on durations smaller than 50, the end event does not trigger!
      if (duration <= 50) {
        duration = 50;
      }
      let properties = [];
      from.split(';').forEach(from__value => {
        properties.push(from__value.split(':')[0].trim());
      });
      let transition = [];
      properties.forEach(properties__value => {
        transition.push(properties__value + ' ' + Math.round(duration / 1000 * 10) / 10 + 's ' + easing);
      });
      transition = 'transition: ' + transition.join(', ') + ' !important;';
      let els = null;
      if (NodeList.prototype.isPrototypeOf(el)) {
        els = Array.from(el);
      } else if (el === null) {
        console.log('cannot animate element from ' + from + ' to ' + to + ' because it does not exist');
        resolve();
      } else {
        els = [el];
      }
      let toFinish = els.length;
      els.forEach((els__value, els__key) => {
        // add random class
        let random_class = hlp.random_string(10, 'abcdefghijklmnopqrstuvwxyz');
        els__value.classList.add(random_class);
        window.requestAnimationFrame(() => {
          // set from style inline (don't fully remove previous style)
          let new_style = [];
          let prev_style = els__value.getAttribute('style');
          if (prev_style !== null) {
            prev_style.split(';').forEach(prev_style__value => {
              if (!properties.includes(prev_style__value.split(':')[0].trim())) {
                new_style.push(prev_style__value);
              }
            });
          }
          new_style = new_style.join(';') + from + ';';
          els__value.setAttribute('style', new_style);
          window.requestAnimationFrame(() => {
            // add transition property
            let style = document.createElement('style');
            style.innerHTML = '.' + random_class + ' { ' + transition + ' }';
            document.head.appendChild(style);
            window.requestAnimationFrame(() => {
              // set last style inline
              els__value.setAttribute('style', els__value.getAttribute('style').replace(from + ';', '') + to + ';');
              if (this.isVisible(els__value)) {
                let fired = false;
                hlp.addEventListenerOnce(els__value, 'transitionend', event => {
                  fired = true;

                  // transitionend fires also, when animating child elements
                  // the following line ensures, that those events do not bubble up
                  // in that case, we return false and ensure, the event listener is still alive
                  if (event.target !== event.currentTarget) {
                    return false;
                  }

                  // remove previous styles property
                  document.head.removeChild(style);

                  // remove random class
                  els__value.classList.remove(random_class);

                  // resolve promise when last is finished
                  toFinish--;
                  if (toFinish <= 0) {
                    window.requestAnimationFrame(() => {
                      resolve();
                    });
                  }
                });

                // safeguard
                // in some edge cases, transitionend does not fire
                setTimeout(() => {
                  if (fired === false) {
                    document.head.removeChild(style);
                    els__value.classList.remove(random_class);
                    toFinish--;
                    if (toFinish <= 0) {
                      resolve();
                    }
                  }
                }, duration * 1.5);
              } else {
                document.head.removeChild(style);
                els__value.classList.remove(random_class);
                toFinish--;
                if (toFinish <= 0) {
                  resolve();
                }
              }
            });
          });
        });
      });
    });
  }
  static addEventListenerOnce(target, type, listener, addOptions, removeOptions) {
    target.addEventListener(type, function fn(event) {
      let result = listener.apply(this, arguments, addOptions);
      if (result !== false) {
        target.removeEventListener(type, fn, removeOptions);
      }
    });
  }
  static htmlDecode(value) {
    let tmp = document.createElement('textarea');
    tmp.innerHTML = value;
    return tmp.value;
  }
  static htmlEncode(value) {
    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/`/g, '&#96;');
  }
  static nl2br(str) {
    if (typeof str === 'undefined' || str === null) {
      return '';
    }
    let breakTag = '<br/>',
      replaceStr = '$1' + breakTag;
    return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, replaceStr);
  }
  static br2nl(str) {
    if (typeof str === 'undefined' || str === null) {
      return '';
    }
    let replaceStr = '\n';
    return str.replace(/<\s*\/?br\s*[\/]?>/gi, replaceStr);
  }
  static closest(el, selector) {
    if (!document.documentElement.contains(el)) {
      return null;
    }
    do {
      if (this.matches(el, selector)) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1);
    return null;
  }
  static matches(el, selector) {
    let node = el,
      nodes = (node.parentNode || node.document).querySelectorAll(selector),
      i = -1;
    while (nodes[++i] && nodes[i] != node);
    return !!nodes[i];
  }
  static wrap(el, html) {
    if (el === null) {
      return;
    }
    let wrapper = new DOMParser().parseFromString(html, 'text/html').body.childNodes[0];
    el.parentNode.insertBefore(wrapper, el.nextSibling);
    wrapper.appendChild(el);
  }
  static wrapTextNodes(el, tag) {
    if (el === null) {
      return;
    }
    Array.from(el.childNodes).filter(node => node.nodeType === 3 && node.textContent.trim().length > 1).forEach(node => {
      const wrapper = document.createElement(tag);
      node.after(wrapper);
      wrapper.appendChild(node);
    });
  }
  static html2dom(html) {
    let template = document.createElement('template');
    html = html.trim();
    template.innerHTML = html;
    if (template.content === undefined) {
      return this.html2domLegacy(html);
    }
    return template.content.firstChild;
  }
  static html2domLegacy(html) {
    /* source: https://gist.github.com/Munawwar/6e6362dbdf77c7865a99 */
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      rtagName = /<([\w:]+)/,
      rhtml = /<|&#?\w+;/,
      wrapMap = {
        option: [1, "<select multiple='multiple'>", '</select>'],
        thead: [1, '<table>', '</table>'],
        col: [2, '<table><colgroup>', '</colgroup></table>'],
        tr: [2, '<table><tbody>', '</tbody></table>'],
        td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
        _default: [0, '', '']
      },
      context = document;
    var tmp,
      tag,
      wrap,
      j,
      fragment = context.createDocumentFragment();
    if (!rhtml.test(html)) {
      fragment.appendChild(context.createTextNode(html));
    } else {
      tmp = fragment.appendChild(context.createElement('div'));
      tag = (rtagName.exec(html) || ['', ''])[1].toLowerCase();
      wrap = wrapMap[tag] || wrapMap._default;
      tmp.innerHTML = wrap[1] + html.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
      j = wrap[0];
      while (j--) {
        tmp = tmp.lastChild;
      }
      fragment.removeChild(fragment.firstChild);
      while (tmp.firstChild) {
        fragment.appendChild(tmp.firstChild);
      }
    }
    return fragment.querySelector('*');
  }
  static prev(elem, filter) {
    let prev = elem.previousElementSibling;
    if (prev === null) {
      return null;
    }
    if (filter === undefined || this.matches(prev, filter)) {
      return prev;
    }
    return null;
  }
  static next(elem, filter) {
    let next = elem.nextElementSibling;
    if (next === null) {
      return null;
    }
    if (filter === undefined || this.matches(next, filter)) {
      return next;
    }
    return null;
  }
  static prevAll(elem, filter) {
    let sibs = [];
    while (elem = elem.previousElementSibling) {
      if (filter === undefined || this.matches(elem, filter)) {
        sibs.push(elem);
      }
    }
    return sibs;
  }
  static nextAll(elem, filter) {
    let sibs = [];
    while (elem = elem.nextElementSibling) {
      if (filter === undefined || this.matches(elem, filter)) {
        sibs.push(elem);
      }
    }
    return sibs;
  }
  static prevUntil(elem, filter) {
    let sibs = [];
    while (elem = elem.previousElementSibling) {
      if (!this.matches(elem, filter)) {
        sibs.push(elem);
      } else {
        break;
      }
    }
    return sibs;
  }
  static nextUntil(elem, filter) {
    let sibs = [];
    while (elem = elem.nextElementSibling) {
      if (!this.matches(elem, filter)) {
        sibs.push(elem);
      } else {
        break;
      }
    }
    return sibs;
  }
  static siblings(elem, filter) {
    let sibs = [];
    let self = elem;
    elem = elem.parentNode.firstChild;
    while (elem = elem.nextElementSibling) {
      if (filter === undefined || this.matches(elem, filter)) {
        if (self !== elem) {
          sibs.push(elem);
        }
      }
    }
    return sibs;
  }
  static parents(elem, selector) {
    let elements = [];
    let ishaveselector = selector !== undefined;
    while ((elem = elem.parentElement) !== null) {
      if (elem.nodeType !== Node.ELEMENT_NODE) {
        continue;
      }
      if (!ishaveselector || this.matches(elem, selector)) {
        elements.push(elem);
      }
    }
    return elements;
  }
  static css(el) {
    let sheets = document.styleSheets,
      o = {};
    for (let sheets__key in sheets) {
      try {
        let rules = sheets[sheets__key].rules || sheets[sheets__key].cssRules;
        for (let rules__key in rules) {
          if (this.matches(el, rules[rules__key].selectorText)) {
            o = Object.assign(o, this.css2json(rules[rules__key].style), this.css2json(el.getAttribute('style')));
          }
        }
      } catch (e) {}
    }
    return o;
  }
  static css2json(css) {
    let obj = {};
    if (!css) {
      return obj;
    }
    if (css instanceof CSSStyleDeclaration) {
      for (let css__key in css) {
        if (css[css__key].toLowerCase && css[css[css__key]] !== undefined) {
          obj[css[css__key].toLowerCase()] = css[css[css__key]];
        }
      }
    } else if (typeof css == 'string') {
      css = css.split(';');
      for (let css__key in css) {
        if (css[css__key].indexOf(':') > -1) {
          let val = css[css__key].split(':');
          obj[val[0].toLowerCase().trim()] = val[1].trim();
        }
      }
    }
    return obj;
  }
  static compareDates(d1, d2) {
    // safari has problems in parsing "2019-01-01 00:00:00"
    if (typeof d1 === 'string') {
      d1 = d1.split(' ').join('T');
    }
    if (typeof d2 === 'string') {
      d2 = d2.split(' ').join('T');
    }
    d1 = new Date(d1);
    d2 = new Date(d2);
    d1.setHours(0);
    d1.setMinutes(0);
    d1.setSeconds(0);
    d1.setMilliseconds(0);
    d2.setHours(0);
    d2.setMinutes(0);
    d2.setSeconds(0);
    d2.setMilliseconds(0);
    if (d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate()) {
      return 0;
    }
    if (d1 < d2) {
      return -1;
    }
    return 1;
  }
  static spaceship(val1, val2) {
    if (val1 === null || val2 === null || typeof val1 != typeof val2) {
      return null;
    }
    if (typeof val1 === 'string') {
      return val1.localeCompare(val2);
    } else {
      if (val1 > val2) {
        return 1;
      } else if (val1 < val2) {
        return -1;
      }
      return 0;
    }
  }
  static focus(selector) {
    hlp.unfocus();
    let el = null;
    if (typeof selector === 'string' || selector instanceof String) {
      el = document.querySelector(selector);
    } else {
      el = selector;
    }
    if (el !== null) {
      let mask = document.createElement('div');
      mask.classList.add('hlp-focus-mask');
      mask.style.position = 'fixed';
      mask.style.top = 0;
      mask.style.bottom = 0;
      mask.style.left = 0;
      mask.style.right = 0;
      mask.style.backgroundColor = 'rgba(0,0,0,0.8)';
      mask.style.zIndex = 2147483646;
      el.before(mask);
      el.setAttribute('data-focussed', 1);
      el.setAttribute('data-focussed-orig-z-index', el.style.zIndex);
      el.setAttribute('data-focussed-orig-position', el.style.position);
      el.setAttribute('data-focussed-orig-background-color', el.style.backgroundColor);
      el.setAttribute('data-focussed-orig-box-shadow', el.style.boxShadow);
      el.style.zIndex = 2147483647;
      el.style.position = 'relative';
      el.style.backgroundColor = '#ffffff';
      el.style.boxShadow = '0px 0px 0px 20px #fff';
    }
  }
  static unfocus() {
    if (document.querySelector('.hlp-focus-mask') !== null) {
      document.querySelectorAll('.hlp-focus-mask').forEach(el => {
        hlp.remove(el);
      });
    }
    if (document.querySelector('[data-focussed]') !== null) {
      document.querySelectorAll('[data-focussed]').forEach(el => {
        el.style.zIndex = el.getAttribute('data-focussed-orig-z-index');
        el.style.position = el.getAttribute('data-focussed-orig-position');
        el.style.backgroundColor = el.getAttribute('data-focussed-orig-background-color');
        el.style.boxShadow = el.getAttribute('data-focussed-orig-box-shadow');
        el.removeAttribute('data-focussed');
        el.removeAttribute('data-focussed-orig-z-index');
        el.removeAttribute('data-focussed-orig-position');
        el.removeAttribute('data-focussed-orig-background-color');
        el.removeAttribute('data-focussed-orig-box-shadow');
      });
    }
  }
  static remove(el) {
    if (el !== null) {
      el.parentNode.removeChild(el);
    }
  }
  static on(event, selector, scope) {
    let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    if (callback === null) {
      callback = scope;
      scope = document;
    } else {
      scope = document.querySelector(scope);
    }
    scope.addEventListener(event, e => {
      var el = hlp.closest(e.target, selector);
      if (el) {
        callback(e, el);
      }
    }, false);
  }
  static url() {
    return window.location.protocol + '//' + window.location.host + window.location.pathname;
  }
  static urlWithHash() {
    return window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.hash;
  }
  static fullUrl() {
    return window.location.href;
  }
  static urlWithArgs() {
    return window.location.href.split('#')[0];
  }
  static baseUrl() {
    return window.location.protocol + '//' + window.location.host;
  }
  static urlProtocol() {
    return window.location.protocol + '//';
  }
  static urlHost() {
    return window.location.host;
  }
  static urlHostTopLevel() {
    let host = window.location.host;
    // ipv4
    if (host.match(/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/)) {
      return host;
    }
    host = host.split('.');
    while (host.length > 2) {
      host.shift();
    }
    host = host.join('.');
    return host;
  }
  static urlPath() {
    return window.location.pathname;
  }
  static urlHash() {
    return window.location.hash;
  }
  static urlArgs() {
    return window.location.search;
  }
  static urlOfScript() {
    if (document.currentScript) {
      return document.currentScript.src;
    } else {
      let scripts = document.getElementsByTagName('script');
      return scripts[scripts.length - 1].src;
    }
  }
  static pathOfScript() {
    let script = this.urlOfScript(),
      path = script.substring(0, script.lastIndexOf('/'));
    return path;
  }
  static waitUntil(selector) {
    let css_option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let css_value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return new Promise((resolve, reject) => {
      let timeout = setInterval(() => {
        if (document.querySelector(selector) !== null && (css_option === null || css_value === null && window.getComputedStyle(document.querySelector(selector))[css_option] !== undefined && window.getComputedStyle(document.querySelector(selector))[css_option] != '' || css_value !== null && window.getComputedStyle(document.querySelector(selector))[css_option] === css_value)) {
          window.clearInterval(timeout);
          resolve();
        }
      }, 30);
    });
  }
  static waitUntilVar() {
    let arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let varName = null,
      parentContainer = null;
    if (arg2 === null) {
      varName = arg1;
      parentContainer = window;
    } else {
      varName = arg2;
      parentContainer = arg1;
    }
    return new Promise((resolve, reject) => {
      let timeout = setInterval(() => {
        if (parentContainer[varName] !== undefined && parentContainer[varName] !== null) {
          if (value === null || parentContainer[varName] === value) {
            window.clearInterval(timeout);
            resolve();
          }
        }
      }, 30);
    });
  }
  static ready() {
    return new Promise(resolve => {
      if (document.readyState !== 'loading') {
        return resolve();
      } else {
        document.addEventListener('DOMContentLoaded', () => {
          return resolve();
        });
      }
    });
  }
  static load() {
    return new Promise(resolve => {
      if (document.readyState === 'complete') {
        return resolve();
      } else {
        window.addEventListener('load', () => {
          return resolve();
        });
      }
    });
  }
  static runForEl(selector, callback) {
    hlp.ready().then(() => {
      // add unique id
      let id = hlp.pushId();

      // also run for existing
      if (document.querySelector(selector) !== null) {
        document.querySelectorAll(selector).forEach(el => {
          if (el.runForEl === undefined) {
            el.runForEl = [];
          }
          if (!el.runForEl.includes(id)) {
            el.runForEl.push(id);
            callback(el);
          }
        });
      }
      // setup queue
      if (window.runForEl_queue === undefined) {
        window.runForEl_queue = [];
      }
      // setup observer
      if (window.runForEl_observer === undefined) {
        window.runForEl_observer = new MutationObserver(mutations => {
          mutations.forEach(mutations__value => {
            if (!mutations__value.addedNodes) {
              return;
            }
            for (let i = 0; i < mutations__value.addedNodes.length; i++) {
              let node = mutations__value.addedNodes[i];
              if (node.nodeType === Node.ELEMENT_NODE) {
                window.runForEl_queue.forEach(queue__value => {
                  if (node.matches(queue__value.selector)) {
                    if (node.runForEl === undefined) {
                      node.runForEl = [];
                    }
                    if (!node.runForEl.includes(queue__value.id)) {
                      node.runForEl.push(queue__value.id);
                      queue__value.callback(node);
                    }
                  }
                  // if you modify lots of html (e.g. with innerHTML), also check childs
                  if (node.querySelector(queue__value.selector) !== null) {
                    node.querySelectorAll(queue__value.selector).forEach(nodes__value => {
                      if (nodes__value.runForEl === undefined) {
                        nodes__value.runForEl = [];
                      }
                      if (!nodes__value.runForEl.includes(queue__value.id)) {
                        nodes__value.runForEl.push(queue__value.id);
                        queue__value.callback(nodes__value);
                      }
                    });
                  }
                });
              }
            }
          });
        }).observe(document.body, {
          attributes: false,
          childList: true,
          characterData: false,
          subtree: true,
          attributeOldValue: false,
          characterDataOldValue: false
        });
      }
      // push to queue
      window.runForEl_queue.push({
        id: id,
        selector: selector,
        callback: callback
      });
    });
  }
  static fmath(op, x, y) {
    let precision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
    let n = {
      '*': x * y,
      '-': x - y,
      '+': x + y,
      '/': x / y
    }[op];
    return Math.round(n * 10 * Math.pow(10, precision)) / (10 * Math.pow(10, precision));
  }
  static trim(str, charlist) {
    let whitespace = [' ', '\n', '\r', '\t', '\f', '\x0b', '\xa0', '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006', '\u2007', '\u2008', '\u2009', '\u200a', '\u200b', '\u2028', '\u2029', '\u3000'].join('');
    let l = 0;
    let i = 0;
    str += '';
    if (charlist) {
      whitespace = (charlist + '').replace(/([[\]().?/*{}+$^:])/g, '$1');
    }
    l = str.length;
    for (i = 0; i < l; i++) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(i);
        break;
      }
    }
    l = str.length;
    for (i = l - 1; i >= 0; i--) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(0, i + 1);
        break;
      }
    }
    return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';
  }
  static ltrim(str, charlist) {
    charlist = !charlist ? ' \\s\u00A0' : (charlist + '').replace(/([[\]().?/*{}+$^:])/g, '$1');
    const re = new RegExp('^[' + charlist + ']+', 'g');
    return (str + '').replace(re, '');
  }
  static rtrim(str, charlist) {
    charlist = !charlist ? ' \\s\u00A0' : (charlist + '').replace(/([[\]().?/*{}+$^:])/g, '\\$1');
    const re = new RegExp('[' + charlist + ']+$', 'g');
    return (str + '').replace(re, '');
  }
  static truncate_string(str) {
    let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
    let chars = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';
    if (this.nx(str) || !(typeof str === 'string' || str instanceof String)) {
      return str;
    }
    if (this.trim(str).length > len) {
      str = this.trim(str);
      if (str.indexOf(' ') === -1) {
        str = str.substring(0, len);
      } else {
        str = str.substring(0, len);
        str = this.trim(str);
        if (str.lastIndexOf(' ') > -1) {
          str = str.substring(0, str.lastIndexOf(' '));
          str = this.trim(str);
        }
      }
      str += ' ' + chars;
    }
    return str;
  }
  static pushId() {
    /* source https://gist.github.com/mikelehen/3596a30bd69384624c11 */
    let pushIdData = null;
    // browser
    if (window !== undefined) {
      if (window.pushIdDataGlobal === undefined) {
        window.pushIdDataGlobal = {};
      }
      pushIdData = window.pushIdDataGlobal;
    }
    // node.js
    if (global !== undefined) {
      if (global.pushIdDataGlobal === undefined) {
        global.pushIdDataGlobal = {};
      }
      pushIdData = global.pushIdDataGlobal;
    }
    // first run
    if (hlp.objectsAreEqual(pushIdData, {})) {
      pushIdData.lastPushTime = 0;
      pushIdData.lastRandChars = [];
      pushIdData.PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
    }
    let now = new Date().getTime(),
      duplicateTime = now === pushIdData.lastPushTime;
    pushIdData.lastPushTime = now;
    let timeStampChars = new Array(8);
    for (var i = 7; i >= 0; i--) {
      timeStampChars[i] = pushIdData.PUSH_CHARS.charAt(now % 64);
      now = Math.floor(now / 64);
    }
    if (now !== 0) {
      throw new Error();
    }
    let id = timeStampChars.join('');
    if (!duplicateTime) {
      for (i = 0; i < 12; i++) {
        pushIdData.lastRandChars[i] = Math.floor(Math.random() * 64);
      }
    } else {
      for (i = 11; i >= 0 && pushIdData.lastRandChars[i] === 63; i--) {
        pushIdData.lastRandChars[i] = 0;
      }
      pushIdData.lastRandChars[i]++;
    }
    for (i = 0; i < 12; i++) {
      id += pushIdData.PUSH_CHARS.charAt(pushIdData.lastRandChars[i]);
    }
    if (id.length != 20) {
      throw new Error();
    }
    return id;
  }
  static getProp(obj, desc) {
    let arr = desc.split('.');
    while (arr.length && (obj = obj[arr.shift()]));
    return obj;
  }
  static base64toblob(base64) {
    let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let sliceSize = 512,
      byteCharacters = atob(base64),
      byteArrays = [];
    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
      let slice = byteCharacters.slice(offset, offset + sliceSize),
        byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }
      let byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }
    let blob = new Blob(byteArrays, {
      type: contentType
    });
    return blob;
  }
  static blobtobase64(blob) {
    return new Promise(resolve => {
      let reader = new FileReader();
      reader.onload = () => {
        var dataUrl = reader.result;
        var base64 = dataUrl.split(',')[1];
        resolve(base64);
      };
      reader.readAsDataURL(blob);
    });
  }
  static stringtoblob(string) {
    let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let blob = new Blob([string], {
      type: contentType
    });
    return blob;
  }
  static blobtostring(blob) {
    return new Promise(resolve => {
      let reader = new FileReader();
      reader.onload = () => {
        resolve(reader.result);
      };
      reader.readAsText(blob);
    });
  }
  static filetobase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result.split(',')[1]);
      reader.onerror = error => reject(error);
    });
  }
  static blobtofile(blob) {
    let filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'file.txt';
    let file = null;
    try {
      file = new File([blob], filename);
    } catch {
      // ie 11
      file = new Blob([blob], filename);
    }
    return file;
  }
  static filetoblob(file) {
    return new Blob([file]);
  }
  static base64tofile(base64) {
    let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let filename = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'file.txt';
    return this.blobtofile(this.base64toblob(base64, contentType), filename);
  }
  static blobtourl(blob) {
    return URL.createObjectURL(blob, {
      type: 'text/plain'
    });
  }
  static stringtourl(string) {
    return this.blobtourl(this.stringtoblob(string));
  }
  static base64tostring(base64) {
    return atob(base64);
  }
  static stringtobase64(string) {
    return btoa(string);
  }
  static base64tourl(base64) {
    return this.blobtourl(this.base64toblob(base64));
  }
  static filetourl(file) {
    return this.blobtourl(this.filetoblob(file));
  }
  static getImageOrientation(base64) {
    return new Promise((resolve, reject) => {
      base64 = base64.replace('data:image/jpeg;base64,', '');
      let file = this.base64tofile(base64),
        reader = new FileReader();
      reader.onload = e => {
        var view = new DataView(e.target.result);
        if (view.getUint16(0, false) != 0xffd8) {
          resolve(-2);
          return;
        }
        var length = view.byteLength,
          offset = 2;
        while (offset < length) {
          if (view.getUint16(offset + 2, false) <= 8) {
            resolve(-1);
            return;
          }
          var marker = view.getUint16(offset, false);
          offset += 2;
          if (marker == 0xffe1) {
            if (view.getUint32(offset += 2, false) != 0x45786966) {
              resolve(-1);
              return;
            }
            var little = view.getUint16(offset += 6, false) == 0x4949;
            offset += view.getUint32(offset + 4, little);
            var tags = view.getUint16(offset, little);
            offset += 2;
            for (var i = 0; i < tags; i++) {
              if (view.getUint16(offset + i * 12, little) == 0x0112) {
                resolve(view.getUint16(offset + i * 12 + 8, little));
                return;
              }
            }
          } else if ((marker & 0xff00) != 0xff00) {
            break;
          } else {
            offset += view.getUint16(offset, false);
          }
        }
        resolve(-1);
        return;
      };
      reader.readAsArrayBuffer(file);
    });
  }
  static resetImageOrientation(srcBase64, srcOrientation) {
    return new Promise((resolve, reject) => {
      var img = new Image();
      img.onload = () => {
        var width = img.width,
          height = img.height,
          canvas = document.createElement('canvas'),
          ctx = canvas.getContext('2d');
        if (4 < srcOrientation && srcOrientation < 9) {
          canvas.width = height;
          canvas.height = width;
        } else {
          canvas.width = width;
          canvas.height = height;
        }
        switch (srcOrientation) {
          case 2:
            ctx.transform(-1, 0, 0, 1, width, 0);
            break;
          case 3:
            ctx.transform(-1, 0, 0, -1, width, height);
            break;
          case 4:
            ctx.transform(1, 0, 0, -1, 0, height);
            break;
          case 5:
            ctx.transform(0, 1, 1, 0, 0, 0);
            break;
          case 6:
            ctx.transform(0, 1, -1, 0, height, 0);
            break;
          case 7:
            ctx.transform(0, -1, -1, 0, height, width);
            break;
          case 8:
            ctx.transform(0, -1, 1, 0, 0, width);
            break;
          default:
            break;
        }
        ctx.drawImage(img, 0, 0);
        let base64 = canvas.toDataURL();
        base64 = 'data:image/jpeg;base64,' + base64.split(',')[1];
        resolve(base64);
        return;
      };
      img.src = srcBase64;
    });
  }
  static fixImageOrientation(base64) {
    return new Promise((resolve, reject) => {
      if (base64.indexOf('data:') === -1) {
        resolve(base64);
        return;
      }
      if (base64.indexOf('data:image/jpeg;base64,') === 0) {
        base64 = base64.replace('data:image/jpeg;base64,', '');
      }
      this.getImageOrientation(base64).then(orientation => {
        base64 = 'data:image/jpeg;base64,' + base64;
        if (orientation <= 1) {
          resolve(base64);
          return;
        } else {
          this.resetImageOrientation(base64, orientation).then(base64_new => {
            resolve(base64_new);
            return;
          });
        }
      });
    });
  }
  static debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this,
        args = arguments;
      var later = function () {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  }
  static throttle(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function () {
      previous = options.leading === false ? 0 : Date.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function () {
      var now = Date.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  }
  static shuffle(array) {
    let currentIndex = array.length,
      temporaryValue,
      randomIndex;
    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  }
  static findRecursiveInObject(object) {
    let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    let paths = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
    if (object !== null && typeof object === 'object') {
      for (const [object__key, object__value] of Object.entries(object)) {
        if (object__value !== null && typeof object__value === 'object') {
          this.findRecursiveInObject(object__value, key, value, (path === '' ? '' : path + '.') + object__key, paths);
        } else if ((key === null || object__key === key) && (value === null || object__value === value)) {
          paths.push(path);
          break; // only take first
        }
      }
    }

    return paths;
  }
}

/* expose all functions to window */
exports.default = hlp;
if (typeof window !== 'undefined') {
  window.hlp = {};
  Object.getOwnPropertyNames(hlp).forEach((value, key) => {
    if (value === 'length' || value === 'name' || value === 'prototype' || value === 'caller' || value === 'arguments') {
      return;
    }
    window.hlp[value] = hlp[value];
  });
}
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],41:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.match.js");

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.regexp.to-string.js");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var helpers = /*#__PURE__*/function () {
  function helpers() {
    (0, _classCallCheck2.default)(this, helpers);
  }

  (0, _createClass2.default)(helpers, null, [{
    key: "cookieExists",
    value: function cookieExists(cookie_name) {
      if (document.cookie !== undefined && this.cookieGet(cookie_name) !== null) {
        return true;
      }

      return false;
    }
  }, {
    key: "cookieGet",
    value: function cookieGet(cookie_name) {
      var cookie_match = document.cookie.match(new RegExp(cookie_name + '=([^;]+)'));

      if (cookie_match) {
        return decodeURIComponent(cookie_match[1]);
      }

      return null;
    }
  }, {
    key: "cookieSet",
    value: function cookieSet(cookie_name, cookie_value, days) {
      var samesite = '';

      if (window.location.protocol.indexOf('https') > -1) {
        samesite = '; SameSite=None; Secure';
      }

      document.cookie = cookie_name + '=' + encodeURIComponent(cookie_value) + '; ' + 'expires=' + new Date(new Date().getTime() + days * 24 * 60 * 60 * 1000).toUTCString() + '; path=/' + samesite;
    }
  }, {
    key: "cookieDelete",
    value: function cookieDelete(cookie_name) {
      var samesite = '';

      if (window.location.protocol.indexOf('https') > -1) {
        samesite = '; SameSite=None; Secure';
      }

      document.cookie = cookie_name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/' + samesite;
    }
  }, {
    key: "remove",
    value: function remove(el) {
      if (el !== null) {
        el.parentNode.removeChild(el);
      }
    }
  }]);
  return helpers;
}();

exports.default = helpers;
},{"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/interopRequireDefault":27,"core-js/modules/es.regexp.constructor.js":191,"core-js/modules/es.regexp.exec.js":192,"core-js/modules/es.regexp.to-string.js":193,"core-js/modules/es.string.match.js":194}],42:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.string.sub.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.array.concat.js");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

require("whatwg-fetch");

var _helpers = _interopRequireDefault(require("./_helpers"));

// use fetch
var jwtbutler = /*#__PURE__*/function () {
  function jwtbutler(config) {
    (0, _classCallCheck2.default)(this, jwtbutler);

    if (!('auth_login' in config)) {
      config.auth_login = 'email';
    }

    this.config = config;
  }

  (0, _createClass2.default)(jwtbutler, [{
    key: "isLoggedIn",
    value: function isLoggedIn() {
      if (this.getPayload() === null) {
        return false;
      }

      return true;
    }
  }, {
    key: "getUserId",
    value: function getUserId() {
      var payload = this.getPayload();

      if (payload === null) {
        return null;
      }

      return payload.sub;
    }
  }, {
    key: "getPayload",
    value: function getPayload() {
      if (_helpers.default.cookieGet('access_token') === null) {
        return null;
      }

      try {
        return JSON.parse(atob(_helpers.default.cookieGet('access_token').split('.')[1]));
      } catch (e) {
        return null;
      }
    }
  }, {
    key: "logout",
    value: function logout() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.addLoadingState('logging-out');

        fetch(_this2.config.auth_server + '/logout', {
          method: 'POST',
          headers: {
            'content-type': 'application/json',
            Authorization: 'Bearer ' + _helpers.default.cookieGet('access_token')
          },
          cache: 'no-cache'
        }).then(function (res) {
          return res.json();
        }).catch(function (err) {
          return err;
        }).then(function (response) {
          _this2.setCookies(null).then(function () {
            _this2.removeLoadingStates();

            resolve();
          }).catch(function (error) {
            reject(error);
          });
        });
      });
    }
  }, {
    key: "login",
    value: function login() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (_helpers.default.cookieGet('access_token') !== null) {
          _this3.addLoadingState('logging-in');

          fetch(_this3.config.auth_server + '/check', {
            method: 'POST',
            body: JSON.stringify({
              access_token: _helpers.default.cookieGet('access_token')
            }),
            headers: {
              'content-type': 'application/json'
            },
            cache: 'no-cache'
          }).then(function (res) {
            return res.json();
          }).catch(function (err) {
            return err;
          }).then(function (response) {
            if (response.success === true) {
              _this3.setCookies(_helpers.default.cookieGet('access_token')).then(function () {
                _this3.removeLoadingStates();

                resolve();
              }).catch(function (error) {
                reject(error);
              });
            } else {
              fetch(_this3.config.auth_server + '/refresh', {
                method: 'POST',
                headers: {
                  'content-type': 'application/json',
                  Authorization: 'Bearer ' + _helpers.default.cookieGet('access_token')
                },
                cache: 'no-cache'
              }).then(function (res) {
                return res.json();
              }).catch(function (err) {
                return err;
              }).then(function (response) {
                if (response.success === true) {
                  _this3.setCookies(response.data.access_token).then(function () {
                    _this3.removeLoadingStates();

                    resolve();
                  }).catch(function (error) {
                    reject(error);
                  });
                } else {
                  _this3.renderLoginFormWithPromise().then(function () {
                    resolve();
                  });
                }
              });
            }
          });
        } else {
          _this3.renderLoginFormWithPromise().then(function () {
            resolve();
          }).catch(function () {
            reject();
          });
        }
      });
    }
  }, {
    key: "fetch",
    value: function (_fetch) {
      function fetch(_x) {
        return _fetch.apply(this, arguments);
      }

      fetch.toString = function () {
        return _fetch.toString();
      };

      return fetch;
    }(function (url) {
      var _this4 = this;

      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return new Promise(function (resolve, reject) {
        if (!('headers' in args)) {
          args.headers = {};
        }

        if (!('tries' in args)) {
          args.tries = 0;
        }

        args.tries++;

        if (args.tries > 3) {
          reject(null);
          return;
        } else if (_this4.isLoggedIn() === false) {
          _this4.login().then(function () {
            _this4.fetch(url, args).then(function (response) {
              resolve(response);
            }).catch(function (error) {
              reject(error);
            });
          }).catch(function (error) {
            reject(error);
          });
        } else {
          _this4.addLoadingState('fetching');

          args.headers.Authorization = 'Bearer ' + _helpers.default.cookieGet('access_token');
          fetch(url, args).then(function (v) {
            return v;
          }).catch(function (v) {
            return v;
          }).then(function (response) {
            _this4.removeLoadingStates();

            if (response.status === 401) {
              _this4.addLoadingState('logging-in');

              fetch(_this4.config.auth_server + '/refresh', {
                method: 'POST',
                headers: {
                  'content-type': 'application/json',
                  Authorization: 'Bearer ' + _helpers.default.cookieGet('access_token')
                },
                cache: 'no-cache'
              }).then(function (res) {
                return res.json();
              }).catch(function (error) {
                return error;
              }).then(function (response) {
                if (response.success === true) {
                  _this4.setCookies(response.data.access_token).then(function () {
                    _this4.removeLoadingStates();

                    _this4.fetch(url, args).then(function (response) {
                      resolve(response);
                    }).catch(function (error) {
                      reject(error);
                    });
                  }).catch(function (error) {
                    _this4.removeLoadingStates();

                    reject(error);
                  });
                } else {
                  _this4.removeLoadingStates();

                  _this4.renderLoginFormWithPromise().then(function () {
                    _this4.fetch(url, args).then(function (response) {
                      resolve(response);
                    }).catch(function (error) {
                      reject(error);
                    });
                  }).catch(function (error) {
                    reject(error);
                  });
                }
              });
            } else {
              resolve(response);
            }
          });
        }
      });
    })
  }, {
    key: "setCookies",
    value: function setCookies() {
      var _this5 = this;

      var access_token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return new Promise(function (resolve, reject) {
        if (_this5.setCookieLoading === undefined) {
          _this5.setCookieLoading === false;
        }

        if (_this5.setCookieLoading === true) {
          resolve();
          return;
        }

        _this5.setCookieLoading = true;

        if (access_token !== null) {
          _helpers.default.cookieSet('access_token', access_token, 28);
        } else {
          _helpers.default.cookieDelete('access_token');
        }

        if (_this5.config.sso === undefined || _this5.config.sso.length === 1 && _this5.config.sso[0] === window.location.protocol + '//' + window.location.host) {
          _this5.setCookieLoading = false;
          resolve();
          return;
        }

        _helpers.default.remove(document.querySelector('.iframe_wrapper'));

        var iframe_wrapper = document.createElement('div');
        iframe_wrapper.setAttribute('class', 'iframe_wrapper');
        iframe_wrapper.style.position = 'absolute';
        iframe_wrapper.style.opacity = '0';
        document.body.appendChild(iframe_wrapper);
        var timeout = null;

        var _this = _this5,
            todo = _this5.config.sso.length - 1,
            waitForPostMessage = function waitForPostMessage(e) {
          if (_this.config.sso.indexOf(e.origin) === -1) {
            return;
          }

          if (e.data !== undefined && e.data !== null && 'success' in e.data && e.data.success === true) {
            todo--;
          } //console.log(todo);


          if (todo <= 0) {
            if (timeout) {
              //console.log('cleared timeout');
              clearTimeout(timeout);
            }

            window.removeEventListener('message', waitForPostMessage, false);

            _helpers.default.remove(document.querySelector('.iframe_wrapper'));

            _this.setCookieLoading = false;
            resolve();
          }
        };

        window.addEventListener('message', waitForPostMessage, false);
        timeout = setTimeout(function () {
          if (_this5.setCookieLoading === true) {
            //console.log('timeout');
            window.removeEventListener('message', waitForPostMessage, false);

            _helpers.default.remove(document.querySelector('.iframe_wrapper'));

            _this5.setCookieLoading = false;
            resolve();
          }
        }, 20000);

        _this5.config.sso.forEach(function (sso__value) {
          if (sso__value === window.location.protocol + '//' + window.location.host) {
            return;
          }

          var iframe = document.createElement('iframe');
          iframe.setAttribute('src', sso__value + '/sso.html');
          iframe.style.width = '1px';
          iframe.style.height = '1px';
          iframe.addEventListener('load', function (e) {
            iframe.contentWindow.postMessage({
              access_token: access_token
            }, sso__value);
          });
          document.querySelector('.iframe_wrapper').appendChild(iframe);
        });
      });
    }
  }, {
    key: "renderLoginFormWithPromise",
    value: function renderLoginFormWithPromise() {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        _this6.buildUpLoginFormHtml();

        _this6.bindLoginFormSubmit().then(function () {
          resolve();
        }).catch(function (error) {
          reject(error);
        });

        _this6.triggerLoginFormRenderedEvent();
      });
    }
  }, {
    key: "buildUpLoginFormHtml",
    value: function buildUpLoginFormHtml() {
      if (!('login_form' in this.config) || this.config.login_form == '') {
        this.config.login_form = "<div class=\"login-form\">\n                <div class=\"login-form__inner\">\n                    <form class=\"login-form__form\">\n                        <ul class=\"login-form__items\">\n                            <li class=\"login-form__item\">\n                                <label class=\"login-form__label login-form__label--".concat(this.config.auth_login, "\" for=\"login-form__label--").concat(this.config.auth_login, "\">").concat(this.config.auth_login === 'email' ? 'E-Mail-Adresse' : this.config.auth_login === 'username' ? 'Benutzername' : this.config.auth_login, "</label>\n                                <input class=\"login-form__input login-form__input--").concat(this.config.auth_login, "\" id=\"login-form__label--").concat(this.config.auth_login, "\" type=\"text\" required=\"required\" name=\"").concat(this.config.auth_login, "\" />\n                            </li>\n                            <li class=\"login-form__item\">\n                                <label class=\"login-form__label login-form__label--password\" for=\"login-form__label--password\">Passwort</label>\n                                <input class=\"login-form__input login-form__input--password\" id=\"login-form__label--password\" type=\"password\" required=\"required\" name=\"password\" />\n                            </li>\n                            <li class=\"login-form__item\">\n                                <input class=\"login-form__submit\" type=\"submit\" value=\"Anmelden\" />\n                            </li>\n                        </ul>\n                    </form>\n                </div>\n            </div>");
      }

      var dom = new DOMParser().parseFromString(this.config.login_form, 'text/html').body.childNodes[0];
      this.config.login_form_class = dom.getAttribute('class').split(' ')[0];

      _helpers.default.remove(document.querySelector('.' + this.config.login_form_class));

      this.addLoadingState('login-form-visible');
      var parent = document.body;

      if ('login_form_parent' in this.config && this.config.login_form_parent != '' && document.querySelector(this.config.login_form_parent) !== null) {
        parent = document.querySelector(this.config.login_form_parent);
      }

      parent.appendChild(dom);
    }
  }, {
    key: "triggerLoginFormRenderedEvent",
    value: function triggerLoginFormRenderedEvent() {
      if ('login_form_rendered' in this.config && this.config.login_form_rendered != '' && typeof this.config.login_form_rendered === 'function') {
        this.config.login_form_rendered(document.querySelector('.' + this.config.login_form_class));
      }
    }
  }, {
    key: "bindLoginFormSubmit",
    value: function bindLoginFormSubmit() {
      var _this7 = this;

      return new Promise(function (resolve, reject) {
        var dom = document.querySelector('.' + _this7.config.login_form_class),
            form = dom.querySelector('form');
        form.addEventListener('submit', function (e) {
          var _JSON$stringify;

          _this7.addLoadingState('logging-in');

          if (form.querySelector('input[type="submit"]') !== null) {
            form.querySelector('input[type="submit"]').disabled = true;
          }

          _helpers.default.remove(dom.querySelector('.' + _this7.config.login_form_class + '__error'));

          fetch(_this7.config.auth_server + '/login', {
            method: 'POST',
            body: JSON.stringify((_JSON$stringify = {}, (0, _defineProperty2.default)(_JSON$stringify, _this7.config.auth_login, form.querySelector('input[name="' + _this7.config.auth_login + '"]').value), (0, _defineProperty2.default)(_JSON$stringify, "password", form.querySelector('input[name="password"]').value), _JSON$stringify)),
            headers: {
              'content-type': 'application/json'
            },
            cache: 'no-cache'
          }).then(function (res) {
            return res.json();
          }).catch(function (err) {
            return err;
          }).then(function (response) {
            if (form.querySelector('input[type="submit"]') !== null) {
              form.querySelector('input[type="submit"]').disabled = false;
            }

            if (response !== undefined && response !== null && 'success' in response && response.success === true) {
              _helpers.default.remove(document.querySelector('.' + _this7.config.login_form_class));

              _this7.setCookies(response.data.access_token).then(function () {
                _this7.removeLoadingStates();

                resolve();
              }).catch(function (error) {
                reject(error);
              });
            } else {
              form.insertAdjacentHTML('afterbegin', '<div class="' + _this7.config.login_form_class + '__error">' + response.public_message + '</div>');
            }
          });
          e.preventDefault();
        }, false);
      });
    }
  }, {
    key: "addLoadingState",
    value: function addLoadingState(state) {
      document.documentElement.classList.add('jwtbutler-' + state);

      if (state === 'logging-in' || state === 'logging-out') {
        document.documentElement.classList.add('jwtbutler-loading');
      }
    }
  }, {
    key: "removeLoadingStates",
    value: function removeLoadingStates() {
      document.documentElement.classList.remove('jwtbutler-logging-in');
      document.documentElement.classList.remove('jwtbutler-logging-out');
      document.documentElement.classList.remove('jwtbutler-loading');
      document.documentElement.classList.remove('jwtbutler-fetching');
      document.documentElement.classList.remove('jwtbutler-login-form-visible');
    }
  }]);
  return jwtbutler;
}();

exports.default = jwtbutler;
window.jwtbutler = jwtbutler;
},{"./_helpers":41,"@babel/runtime/helpers/classCallCheck":24,"@babel/runtime/helpers/createClass":25,"@babel/runtime/helpers/defineProperty":26,"@babel/runtime/helpers/interopRequireDefault":27,"core-js/modules/es.array.concat.js":182,"core-js/modules/es.object.to-string.js":183,"core-js/modules/es.promise.js":187,"core-js/modules/es.regexp.exec.js":192,"core-js/modules/es.regexp.to-string.js":193,"core-js/modules/es.string.split.js":195,"core-js/modules/es.string.sub.js":196,"core-js/modules/web.dom-collections.for-each.js":197,"whatwg-fetch":199}],43:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var tryToString = require('../internals/try-to-string');

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};

},{"../internals/is-callable":111,"../internals/try-to-string":175}],44:[function(require,module,exports){
'use strict';
var isConstructor = require('../internals/is-constructor');
var tryToString = require('../internals/try-to-string');

var $TypeError = TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a constructor');
};

},{"../internals/is-constructor":112,"../internals/try-to-string":175}],45:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');

var $String = String;
var $TypeError = TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw $TypeError("Can't set " + $String(argument) + ' as a prototype');
};

},{"../internals/is-callable":111}],46:[function(require,module,exports){
'use strict';
var charAt = require('../internals/string-multibyte').charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

},{"../internals/string-multibyte":163}],47:[function(require,module,exports){
'use strict';
var isPrototypeOf = require('../internals/object-is-prototype-of');

var $TypeError = TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw $TypeError('Incorrect invocation');
};

},{"../internals/object-is-prototype-of":133}],48:[function(require,module,exports){
'use strict';
var isObject = require('../internals/is-object');

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};

},{"../internals/is-object":115}],49:[function(require,module,exports){
'use strict';
var $forEach = require('../internals/array-iteration').forEach;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
} : [].forEach;

},{"../internals/array-iteration":51,"../internals/array-method-is-strict":53}],50:[function(require,module,exports){
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el !== el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value !== value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

},{"../internals/length-of-array-like":122,"../internals/to-absolute-index":166,"../internals/to-indexed-object":167}],51:[function(require,module,exports){
'use strict';
var bind = require('../internals/function-bind-context');
var uncurryThis = require('../internals/function-uncurry-this');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var arraySpeciesCreate = require('../internals/array-species-create');

var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE === 1;
  var IS_FILTER = TYPE === 2;
  var IS_SOME = TYPE === 3;
  var IS_EVERY = TYPE === 4;
  var IS_FIND_INDEX = TYPE === 6;
  var IS_FILTER_REJECT = TYPE === 7;
  var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};

},{"../internals/array-species-create":57,"../internals/function-bind-context":88,"../internals/function-uncurry-this":94,"../internals/indexed-object":105,"../internals/length-of-array-like":122,"../internals/to-object":170}],52:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/engine-v8-version":82,"../internals/fails":85,"../internals/well-known-symbol":181}],53:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call -- required for testing
    method.call(null, argument || function () { return 1; }, 1);
  });
};

},{"../internals/fails":85}],54:[function(require,module,exports){
'use strict';
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var createProperty = require('../internals/create-property');

var $Array = Array;
var max = Math.max;

module.exports = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = $Array(max(fin - k, 0));
  var n = 0;
  for (; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};

},{"../internals/create-property":65,"../internals/length-of-array-like":122,"../internals/to-absolute-index":166}],55:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

module.exports = uncurryThis([].slice);

},{"../internals/function-uncurry-this":94}],56:[function(require,module,exports){
'use strict';
var isArray = require('../internals/is-array');
var isConstructor = require('../internals/is-constructor');
var isObject = require('../internals/is-object');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? $Array : C;
};

},{"../internals/is-array":110,"../internals/is-constructor":112,"../internals/is-object":115,"../internals/well-known-symbol":181}],57:[function(require,module,exports){
'use strict';
var arraySpeciesConstructor = require('../internals/array-species-constructor');

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

},{"../internals/array-species-constructor":56}],58:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  try {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  } catch (error) { return false; } // workaround of old WebKit + `eval` bug
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":181}],59:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};

},{"../internals/function-uncurry-this":94}],60:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var isCallable = require('../internals/is-callable');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};

},{"../internals/classof-raw":59,"../internals/is-callable":111,"../internals/to-string-tag-support":173,"../internals/well-known-symbol":181}],61:[function(require,module,exports){
'use strict';
var hasOwn = require('../internals/has-own-property');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

},{"../internals/has-own-property":100,"../internals/object-define-property":129,"../internals/object-get-own-property-descriptor":130,"../internals/own-keys":140}],62:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var requireObjectCoercible = require('../internals/require-object-coercible');
var toString = require('../internals/to-string');

var quot = /"/g;
var replace = uncurryThis(''.replace);

// `CreateHTML` abstract operation
// https://tc39.es/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = toString(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + replace(toString(value), quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

},{"../internals/function-uncurry-this":94,"../internals/require-object-coercible":155,"../internals/to-string":174}],63:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/create-property-descriptor":64,"../internals/descriptors":69,"../internals/object-define-property":129}],64:[function(require,module,exports){
'use strict';
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],65:[function(require,module,exports){
'use strict';
var toPropertyKey = require('../internals/to-property-key');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/create-property-descriptor":64,"../internals/object-define-property":129,"../internals/to-property-key":172}],66:[function(require,module,exports){
'use strict';
var makeBuiltIn = require('../internals/make-built-in');
var defineProperty = require('../internals/object-define-property');

module.exports = function (target, name, descriptor) {
  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
  return defineProperty.f(target, name, descriptor);
};

},{"../internals/make-built-in":123,"../internals/object-define-property":129}],67:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var definePropertyModule = require('../internals/object-define-property');
var makeBuiltIn = require('../internals/make-built-in');
var defineGlobalProperty = require('../internals/define-global-property');

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};

},{"../internals/define-global-property":68,"../internals/is-callable":111,"../internals/make-built-in":123,"../internals/object-define-property":129}],68:[function(require,module,exports){
'use strict';
var global = require('../internals/global');

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};

},{"../internals/global":99}],69:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;
});

},{"../internals/fails":85}],70:[function(require,module,exports){
'use strict';
var documentAll = typeof document == 'object' && document.all;

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;

module.exports = {
  all: documentAll,
  IS_HTMLDDA: IS_HTMLDDA
};

},{}],71:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var isObject = require('../internals/is-object');

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

},{"../internals/global":99,"../internals/is-object":115}],72:[function(require,module,exports){
'use strict';
var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};

},{}],73:[function(require,module,exports){
'use strict';
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],74:[function(require,module,exports){
'use strict';
// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = require('../internals/document-create-element');

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

},{"../internals/document-create-element":71}],75:[function(require,module,exports){
'use strict';
var IS_DENO = require('../internals/engine-is-deno');
var IS_NODE = require('../internals/engine-is-node');

module.exports = !IS_DENO && !IS_NODE
  && typeof window == 'object'
  && typeof document == 'object';

},{"../internals/engine-is-deno":76,"../internals/engine-is-node":79}],76:[function(require,module,exports){
'use strict';
/* global Deno -- Deno case */
module.exports = typeof Deno == 'object' && Deno && typeof Deno.version == 'object';

},{}],77:[function(require,module,exports){
'use strict';
var userAgent = require('../internals/engine-user-agent');

module.exports = /ipad|iphone|ipod/i.test(userAgent) && typeof Pebble != 'undefined';

},{"../internals/engine-user-agent":81}],78:[function(require,module,exports){
'use strict';
var userAgent = require('../internals/engine-user-agent');

// eslint-disable-next-line redos/no-vulnerable -- safe
module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);

},{"../internals/engine-user-agent":81}],79:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var classof = require('../internals/classof-raw');

module.exports = classof(global.process) === 'process';

},{"../internals/classof-raw":59,"../internals/global":99}],80:[function(require,module,exports){
'use strict';
var userAgent = require('../internals/engine-user-agent');

module.exports = /web0s(?!.*chrome)/i.test(userAgent);

},{"../internals/engine-user-agent":81}],81:[function(require,module,exports){
'use strict';
module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';

},{}],82:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;

},{"../internals/engine-user-agent":81,"../internals/global":99}],83:[function(require,module,exports){
'use strict';
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],84:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var defineBuiltIn = require('../internals/define-built-in');
var defineGlobalProperty = require('../internals/define-global-property');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};

},{"../internals/copy-constructor-properties":61,"../internals/create-non-enumerable-property":63,"../internals/define-built-in":67,"../internals/define-global-property":68,"../internals/global":99,"../internals/is-forced":113,"../internals/object-get-own-property-descriptor":130}],85:[function(require,module,exports){
'use strict';
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

},{}],86:[function(require,module,exports){
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var uncurryThis = require('../internals/function-uncurry-this-clause');
var defineBuiltIn = require('../internals/define-built-in');
var regexpExec = require('../internals/regexp-exec');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

module.exports = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) !== 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () {
      execCalled = true;
      return null;
    };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = uncurryThis(nativeMethod);
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
        }
        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
      }
      return { done: false };
    });

    defineBuiltIn(String.prototype, KEY, methods[0]);
    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};

},{"../internals/create-non-enumerable-property":63,"../internals/define-built-in":67,"../internals/fails":85,"../internals/function-uncurry-this-clause":93,"../internals/regexp-exec":149,"../internals/well-known-symbol":181,"../modules/es.regexp.exec":192}],87:[function(require,module,exports){
'use strict';
var NATIVE_BIND = require('../internals/function-bind-native');

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});

},{"../internals/function-bind-native":89}],88:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this-clause');
var aCallable = require('../internals/a-callable');
var NATIVE_BIND = require('../internals/function-bind-native');

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-callable":43,"../internals/function-bind-native":89,"../internals/function-uncurry-this-clause":93}],89:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

},{"../internals/fails":85}],90:[function(require,module,exports){
'use strict';
var NATIVE_BIND = require('../internals/function-bind-native');

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};

},{"../internals/function-bind-native":89}],91:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var hasOwn = require('../internals/has-own-property');

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

},{"../internals/descriptors":69,"../internals/has-own-property":100}],92:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var aCallable = require('../internals/a-callable');

module.exports = function (object, key, method) {
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
  } catch (error) { /* empty */ }
};

},{"../internals/a-callable":43,"../internals/function-uncurry-this":94}],93:[function(require,module,exports){
'use strict';
var classofRaw = require('../internals/classof-raw');
var uncurryThis = require('../internals/function-uncurry-this');

module.exports = function (fn) {
  // Nashorn bug:
  //   https://github.com/zloirock/core-js/issues/1128
  //   https://github.com/zloirock/core-js/issues/1130
  if (classofRaw(fn) === 'Function') return uncurryThis(fn);
};

},{"../internals/classof-raw":59,"../internals/function-uncurry-this":94}],94:[function(require,module,exports){
'use strict';
var NATIVE_BIND = require('../internals/function-bind-native');

var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};

},{"../internals/function-bind-native":89}],95:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};

},{"../internals/global":99,"../internals/is-callable":111}],96:[function(require,module,exports){
'use strict';
var classof = require('../internals/classof');
var getMethod = require('../internals/get-method');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};

},{"../internals/classof":60,"../internals/get-method":98,"../internals/is-null-or-undefined":114,"../internals/iterators":121,"../internals/well-known-symbol":181}],97:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var anObject = require('../internals/an-object');
var tryToString = require('../internals/try-to-string');
var getIteratorMethod = require('../internals/get-iterator-method');

var $TypeError = TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw $TypeError(tryToString(argument) + ' is not iterable');
};

},{"../internals/a-callable":43,"../internals/an-object":48,"../internals/function-call":90,"../internals/get-iterator-method":96,"../internals/try-to-string":175}],98:[function(require,module,exports){
'use strict';
var aCallable = require('../internals/a-callable');
var isNullOrUndefined = require('../internals/is-null-or-undefined');

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};

},{"../internals/a-callable":43,"../internals/is-null-or-undefined":114}],99:[function(require,module,exports){
(function (global){(function (){
'use strict';
var check = function (it) {
  return it && it.Math === Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || this || Function('return this')();

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],100:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var toObject = require('../internals/to-object');

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};

},{"../internals/function-uncurry-this":94,"../internals/to-object":170}],101:[function(require,module,exports){
'use strict';
module.exports = {};

},{}],102:[function(require,module,exports){
'use strict';
module.exports = function (a, b) {
  try {
    // eslint-disable-next-line no-console -- safe
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  } catch (error) { /* empty */ }
};

},{}],103:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":95}],104:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a !== 7;
});

},{"../internals/descriptors":69,"../internals/document-create-element":71,"../internals/fails":85}],105:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) === 'String' ? split(it, '') : $Object(it);
} : $Object;

},{"../internals/classof-raw":59,"../internals/fails":85,"../internals/function-uncurry-this":94}],106:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

},{"../internals/is-callable":111,"../internals/is-object":115,"../internals/object-set-prototype-of":137}],107:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var isCallable = require('../internals/is-callable');
var store = require('../internals/shared-store');

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;

},{"../internals/function-uncurry-this":94,"../internals/is-callable":111,"../internals/shared-store":159}],108:[function(require,module,exports){
'use strict';
var NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var hasOwn = require('../internals/has-own-property');
var shared = require('../internals/shared-store');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function (it, metadata) {
    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function (it) {
    return store.get(it) || {};
  };
  has = function (it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/create-non-enumerable-property":63,"../internals/global":99,"../internals/has-own-property":100,"../internals/hidden-keys":101,"../internals/is-object":115,"../internals/shared-key":158,"../internals/shared-store":159,"../internals/weak-map-basic-detection":180}],109:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/iterators":121,"../internals/well-known-symbol":181}],110:[function(require,module,exports){
'use strict';
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) === 'Array';
};

},{"../internals/classof-raw":59}],111:[function(require,module,exports){
'use strict';
var $documentAll = require('../internals/document-all');

var documentAll = $documentAll.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = $documentAll.IS_HTMLDDA ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};

},{"../internals/document-all":70}],112:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var classof = require('../internals/classof');
var getBuiltIn = require('../internals/get-built-in');
var inspectSource = require('../internals/inspect-source');

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;

},{"../internals/classof":60,"../internals/fails":85,"../internals/function-uncurry-this":94,"../internals/get-built-in":95,"../internals/inspect-source":107,"../internals/is-callable":111}],113:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value === POLYFILL ? true
    : value === NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":85,"../internals/is-callable":111}],114:[function(require,module,exports){
'use strict';
// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};

},{}],115:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var $documentAll = require('../internals/document-all');

var documentAll = $documentAll.all;

module.exports = $documentAll.IS_HTMLDDA ? function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;
} : function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};

},{"../internals/document-all":70,"../internals/is-callable":111}],116:[function(require,module,exports){
'use strict';
module.exports = false;

},{}],117:[function(require,module,exports){
'use strict';
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) === 'RegExp');
};

},{"../internals/classof-raw":59,"../internals/is-object":115,"../internals/well-known-symbol":181}],118:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var isCallable = require('../internals/is-callable');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};

},{"../internals/get-built-in":95,"../internals/is-callable":111,"../internals/object-is-prototype-of":133,"../internals/use-symbol-as-uid":177}],119:[function(require,module,exports){
'use strict';
var bind = require('../internals/function-bind-context');
var call = require('../internals/function-call');
var anObject = require('../internals/an-object');
var tryToString = require('../internals/try-to-string');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var getIterator = require('../internals/get-iterator');
var getIteratorMethod = require('../internals/get-iterator-method');
var iteratorClose = require('../internals/iterator-close');

var $TypeError = TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_RECORD) {
    iterator = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = IS_RECORD ? iterable.next : iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};

},{"../internals/an-object":48,"../internals/function-bind-context":88,"../internals/function-call":90,"../internals/get-iterator":97,"../internals/get-iterator-method":96,"../internals/is-array-iterator-method":109,"../internals/iterator-close":120,"../internals/length-of-array-like":122,"../internals/object-is-prototype-of":133,"../internals/try-to-string":175}],120:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var anObject = require('../internals/an-object');
var getMethod = require('../internals/get-method');

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};

},{"../internals/an-object":48,"../internals/function-call":90,"../internals/get-method":98}],121:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"dup":101}],122:[function(require,module,exports){
'use strict';
var toLength = require('../internals/to-length');

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};

},{"../internals/to-length":169}],123:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var hasOwn = require('../internals/has-own-property');
var DESCRIPTORS = require('../internals/descriptors');
var CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;
var inspectSource = require('../internals/inspect-source');
var InternalStateModule = require('../internals/internal-state');

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');

},{"../internals/descriptors":69,"../internals/fails":85,"../internals/function-name":91,"../internals/function-uncurry-this":94,"../internals/has-own-property":100,"../internals/inspect-source":107,"../internals/internal-state":108,"../internals/is-callable":111}],124:[function(require,module,exports){
'use strict';
var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};

},{}],125:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var bind = require('../internals/function-bind-context');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var macrotask = require('../internals/task').set;
var Queue = require('../internals/queue');
var IS_IOS = require('../internals/engine-is-ios');
var IS_IOS_PEBBLE = require('../internals/engine-is-ios-pebble');
var IS_WEBOS_WEBKIT = require('../internals/engine-is-webos-webkit');
var IS_NODE = require('../internals/engine-is-node');

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var microtask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
var notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!microtask) {
  var queue = new Queue();

  var flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (fn = queue.get()) try {
      fn();
    } catch (error) {
      if (queue.head) notify();
      throw error;
    }
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessage
  // - onreadystatechange
  // - setTimeout
  } else {
    // `webpack` dev server bug on IE global methods - use bind(fn, global)
    macrotask = bind(macrotask, global);
    notify = function () {
      macrotask(flush);
    };
  }

  microtask = function (fn) {
    if (!queue.head) notify();
    queue.add(fn);
  };
}

module.exports = microtask;

},{"../internals/engine-is-ios":78,"../internals/engine-is-ios-pebble":77,"../internals/engine-is-node":79,"../internals/engine-is-webos-webkit":80,"../internals/function-bind-context":88,"../internals/global":99,"../internals/object-get-own-property-descriptor":130,"../internals/queue":147,"../internals/task":165}],126:[function(require,module,exports){
'use strict';
var aCallable = require('../internals/a-callable');

var $TypeError = TypeError;

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw $TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"../internals/a-callable":43}],127:[function(require,module,exports){
'use strict';
/* global ActiveXObject -- old IE, WSH */
var anObject = require('../internals/an-object');
var definePropertiesModule = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};

},{"../internals/an-object":48,"../internals/document-create-element":71,"../internals/enum-bug-keys":83,"../internals/hidden-keys":101,"../internals/html":103,"../internals/object-define-properties":128,"../internals/shared-key":158}],128:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var toIndexedObject = require('../internals/to-indexed-object');
var objectKeys = require('../internals/object-keys');

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};

},{"../internals/an-object":48,"../internals/descriptors":69,"../internals/object-define-property":129,"../internals/object-keys":135,"../internals/to-indexed-object":167,"../internals/v8-prototype-define-bug":178}],129:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');
var anObject = require('../internals/an-object');
var toPropertyKey = require('../internals/to-property-key');

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/an-object":48,"../internals/descriptors":69,"../internals/ie8-dom-define":104,"../internals/to-property-key":172,"../internals/v8-prototype-define-bug":178}],130:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var call = require('../internals/function-call');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPropertyKey = require('../internals/to-property-key');
var hasOwn = require('../internals/has-own-property');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};

},{"../internals/create-property-descriptor":64,"../internals/descriptors":69,"../internals/function-call":90,"../internals/has-own-property":100,"../internals/ie8-dom-define":104,"../internals/object-property-is-enumerable":136,"../internals/to-indexed-object":167,"../internals/to-property-key":172}],131:[function(require,module,exports){
'use strict';
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/enum-bug-keys":83,"../internals/object-keys-internal":134}],132:[function(require,module,exports){
'use strict';
// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

},{}],133:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

module.exports = uncurryThis({}.isPrototypeOf);

},{"../internals/function-uncurry-this":94}],134:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var hasOwn = require('../internals/has-own-property');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};

},{"../internals/array-includes":50,"../internals/function-uncurry-this":94,"../internals/has-own-property":100,"../internals/hidden-keys":101,"../internals/to-indexed-object":167}],135:[function(require,module,exports){
'use strict';
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/enum-bug-keys":83,"../internals/object-keys-internal":134}],136:[function(require,module,exports){
'use strict';
var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

},{}],137:[function(require,module,exports){
'use strict';
/* eslint-disable no-proto -- safe */
var uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/a-possible-prototype":45,"../internals/an-object":48,"../internals/function-uncurry-this-accessor":92}],138:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

},{"../internals/classof":60,"../internals/to-string-tag-support":173}],139:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};

},{"../internals/function-call":90,"../internals/is-callable":111,"../internals/is-object":115}],140:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var uncurryThis = require('../internals/function-uncurry-this');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};

},{"../internals/an-object":48,"../internals/function-uncurry-this":94,"../internals/get-built-in":95,"../internals/object-get-own-property-names":131,"../internals/object-get-own-property-symbols":132}],141:[function(require,module,exports){
'use strict';
module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};

},{}],142:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var isCallable = require('../internals/is-callable');
var isForced = require('../internals/is-forced');
var inspectSource = require('../internals/inspect-source');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_BROWSER = require('../internals/engine-is-browser');
var IS_DENO = require('../internals/engine-is-deno');
var IS_PURE = require('../internals/is-pure');
var V8_VERSION = require('../internals/engine-v8-version');

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var SPECIES = wellKnownSymbol('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);

var FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
    // Detect correctness of subclassing with @@species support
    var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });
    var FakePromise = function (exec) {
      exec(function () { /* empty */ }, function () { /* empty */ });
    };
    var constructor = promise.constructor = {};
    constructor[SPECIES] = FakePromise;
    SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
    if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  } return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
});

module.exports = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
  SUBCLASSING: SUBCLASSING
};

},{"../internals/engine-is-browser":75,"../internals/engine-is-deno":76,"../internals/engine-v8-version":82,"../internals/global":99,"../internals/inspect-source":107,"../internals/is-callable":111,"../internals/is-forced":113,"../internals/is-pure":116,"../internals/promise-native-constructor":143,"../internals/well-known-symbol":181}],143:[function(require,module,exports){
'use strict';
var global = require('../internals/global');

module.exports = global.Promise;

},{"../internals/global":99}],144:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var newPromiseCapability = require('../internals/new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"../internals/an-object":48,"../internals/is-object":115,"../internals/new-promise-capability":126}],145:[function(require,module,exports){
'use strict';
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;

module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {
  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });
});

},{"../internals/check-correctness-of-iteration":58,"../internals/promise-constructor-detection":142,"../internals/promise-native-constructor":143}],146:[function(require,module,exports){
'use strict';
var defineProperty = require('../internals/object-define-property').f;

module.exports = function (Target, Source, key) {
  key in Target || defineProperty(Target, key, {
    configurable: true,
    get: function () { return Source[key]; },
    set: function (it) { Source[key] = it; }
  });
};

},{"../internals/object-define-property":129}],147:[function(require,module,exports){
'use strict';
var Queue = function () {
  this.head = null;
  this.tail = null;
};

Queue.prototype = {
  add: function (item) {
    var entry = { item: item, next: null };
    var tail = this.tail;
    if (tail) tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function () {
    var entry = this.head;
    if (entry) {
      var next = this.head = entry.next;
      if (next === null) this.tail = null;
      return entry.item;
    }
  }
};

module.exports = Queue;

},{}],148:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var anObject = require('../internals/an-object');
var isCallable = require('../internals/is-callable');
var classof = require('../internals/classof-raw');
var regexpExec = require('../internals/regexp-exec');

var $TypeError = TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = call(exec, R, S);
    if (result !== null) anObject(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call(regexpExec, R, S);
  throw $TypeError('RegExp#exec called on incompatible receiver');
};

},{"../internals/an-object":48,"../internals/classof-raw":59,"../internals/function-call":90,"../internals/is-callable":111,"../internals/regexp-exec":149}],149:[function(require,module,exports){
'use strict';
/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call = require('../internals/function-call');
var uncurryThis = require('../internals/function-uncurry-this');
var toString = require('../internals/to-string');
var regexpFlags = require('../internals/regexp-flags');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var shared = require('../internals/shared');
var create = require('../internals/object-create');
var getInternalState = require('../internals/internal-state').get;
var UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');
var UNSUPPORTED_NCG = require('../internals/regexp-unsupported-ncg');

var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt = uncurryThis(''.charAt);
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call(nativeExec, re1, 'a');
  call(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = call(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = call(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice(match.input, charsAdded);
        match[0] = stringSlice(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn't work for /(.?)?/
      call(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

module.exports = patchedExec;

},{"../internals/function-call":90,"../internals/function-uncurry-this":94,"../internals/internal-state":108,"../internals/object-create":127,"../internals/regexp-flags":150,"../internals/regexp-sticky-helpers":152,"../internals/regexp-unsupported-dot-all":153,"../internals/regexp-unsupported-ncg":154,"../internals/shared":160,"../internals/to-string":174}],150:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.unicodeSets) result += 'v';
  if (that.sticky) result += 'y';
  return result;
};

},{"../internals/an-object":48}],151:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var hasOwn = require('../internals/has-own-property');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var regExpFlags = require('../internals/regexp-flags');

var RegExpPrototype = RegExp.prototype;

module.exports = function (R) {
  var flags = R.flags;
  return flags === undefined && !('flags' in RegExpPrototype) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype, R)
    ? call(regExpFlags, R) : flags;
};

},{"../internals/function-call":90,"../internals/has-own-property":100,"../internals/object-is-prototype-of":133,"../internals/regexp-flags":150}],152:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var global = require('../internals/global');

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp = global.RegExp;

var UNSUPPORTED_Y = fails(function () {
  var re = $RegExp('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') !== null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y || fails(function () {
  return !$RegExp('a', 'y').sticky;
});

var BROKEN_CARET = UNSUPPORTED_Y || fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') !== null;
});

module.exports = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y
};

},{"../internals/fails":85,"../internals/global":99}],153:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var global = require('../internals/global');

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});

},{"../internals/fails":85,"../internals/global":99}],154:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var global = require('../internals/global');

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});

},{"../internals/fails":85,"../internals/global":99}],155:[function(require,module,exports){
'use strict';
var isNullOrUndefined = require('../internals/is-null-or-undefined');

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw $TypeError("Can't call method on " + it);
  return it;
};

},{"../internals/is-null-or-undefined":114}],156:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var defineBuiltInAccessor = require('../internals/define-built-in-accessor');
var wellKnownSymbol = require('../internals/well-known-symbol');
var DESCRIPTORS = require('../internals/descriptors');

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineBuiltInAccessor(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

},{"../internals/define-built-in-accessor":66,"../internals/descriptors":69,"../internals/get-built-in":95,"../internals/well-known-symbol":181}],157:[function(require,module,exports){
'use strict';
var defineProperty = require('../internals/object-define-property').f;
var hasOwn = require('../internals/has-own-property');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn(target, TO_STRING_TAG)) {
    defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};

},{"../internals/has-own-property":100,"../internals/object-define-property":129,"../internals/well-known-symbol":181}],158:[function(require,module,exports){
'use strict';
var shared = require('../internals/shared');
var uid = require('../internals/uid');

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":160,"../internals/uid":176}],159:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var defineGlobalProperty = require('../internals/define-global-property');

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;

},{"../internals/define-global-property":68,"../internals/global":99}],160:[function(require,module,exports){
'use strict';
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.32.2',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.32.2/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});

},{"../internals/is-pure":116,"../internals/shared-store":159}],161:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');
var aConstructor = require('../internals/a-constructor');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
};

},{"../internals/a-constructor":44,"../internals/an-object":48,"../internals/is-null-or-undefined":114,"../internals/well-known-symbol":181}],162:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};

},{"../internals/fails":85}],163:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');
var toString = require('../internals/to-string');
var requireObjectCoercible = require('../internals/require-object-coercible');

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

},{"../internals/function-uncurry-this":94,"../internals/require-object-coercible":155,"../internals/to-integer-or-infinity":168,"../internals/to-string":174}],164:[function(require,module,exports){
'use strict';
/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = require('../internals/engine-v8-version');
var fails = require('../internals/fails');
var global = require('../internals/global');

var $String = global.String;

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol('symbol detection');
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
  // of course, fail.
  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

},{"../internals/engine-v8-version":82,"../internals/fails":85,"../internals/global":99}],165:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var apply = require('../internals/function-apply');
var bind = require('../internals/function-bind-context');
var isCallable = require('../internals/is-callable');
var hasOwn = require('../internals/has-own-property');
var fails = require('../internals/fails');
var html = require('../internals/html');
var arraySlice = require('../internals/array-slice');
var createElement = require('../internals/document-create-element');
var validateArgumentsLength = require('../internals/validate-arguments-length');
var IS_IOS = require('../internals/engine-is-ios');
var IS_NODE = require('../internals/engine-is-node');

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var $location, defer, channel, port;

fails(function () {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  $location = global.location;
});

var run = function (id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var eventListener = function (event) {
  run(event.data);
};

var globalPostMessageDefer = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), $location.protocol + '//' + $location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = eventListener;
    defer = bind(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    $location && $location.protocol !== 'file:' &&
    !fails(globalPostMessageDefer)
  ) {
    defer = globalPostMessageDefer;
    global.addEventListener('message', eventListener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};

},{"../internals/array-slice":55,"../internals/document-create-element":71,"../internals/engine-is-ios":78,"../internals/engine-is-node":79,"../internals/fails":85,"../internals/function-apply":87,"../internals/function-bind-context":88,"../internals/global":99,"../internals/has-own-property":100,"../internals/html":103,"../internals/is-callable":111,"../internals/validate-arguments-length":179}],166:[function(require,module,exports){
'use strict';
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer-or-infinity":168}],167:[function(require,module,exports){
'use strict';
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":105,"../internals/require-object-coercible":155}],168:[function(require,module,exports){
'use strict';
var trunc = require('../internals/math-trunc');

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};

},{"../internals/math-trunc":124}],169:[function(require,module,exports){
'use strict';
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer-or-infinity":168}],170:[function(require,module,exports){
'use strict';
var requireObjectCoercible = require('../internals/require-object-coercible');

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":155}],171:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var isObject = require('../internals/is-object');
var isSymbol = require('../internals/is-symbol');
var getMethod = require('../internals/get-method');
var ordinaryToPrimitive = require('../internals/ordinary-to-primitive');
var wellKnownSymbol = require('../internals/well-known-symbol');

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

},{"../internals/function-call":90,"../internals/get-method":98,"../internals/is-object":115,"../internals/is-symbol":118,"../internals/ordinary-to-primitive":139,"../internals/well-known-symbol":181}],172:[function(require,module,exports){
'use strict';
var toPrimitive = require('../internals/to-primitive');
var isSymbol = require('../internals/is-symbol');

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

},{"../internals/is-symbol":118,"../internals/to-primitive":171}],173:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":181}],174:[function(require,module,exports){
'use strict';
var classof = require('../internals/classof');

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};

},{"../internals/classof":60}],175:[function(require,module,exports){
'use strict';
var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};

},{}],176:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};

},{"../internals/function-uncurry-this":94}],177:[function(require,module,exports){
'use strict';
/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';

},{"../internals/symbol-constructor-detection":164}],178:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype !== 42;
});

},{"../internals/descriptors":69,"../internals/fails":85}],179:[function(require,module,exports){
'use strict';
var $TypeError = TypeError;

module.exports = function (passed, required) {
  if (passed < required) throw $TypeError('Not enough arguments');
  return passed;
};

},{}],180:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));

},{"../internals/global":99,"../internals/is-callable":111}],181:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var shared = require('../internals/shared');
var hasOwn = require('../internals/has-own-property');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)
      ? Symbol[name]
      : createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};

},{"../internals/global":99,"../internals/has-own-property":100,"../internals/shared":160,"../internals/symbol-constructor-detection":164,"../internals/uid":176,"../internals/use-symbol-as-uid":177}],182:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport('concat');

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike(E);
        doesNotExceedSafeInteger(n + len);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        doesNotExceedSafeInteger(n + 1);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

},{"../internals/array-method-has-species-support":52,"../internals/array-species-create":57,"../internals/create-property":65,"../internals/does-not-exceed-safe-integer":72,"../internals/engine-v8-version":82,"../internals/export":84,"../internals/fails":85,"../internals/is-array":110,"../internals/is-object":115,"../internals/length-of-array-like":122,"../internals/to-object":170,"../internals/well-known-symbol":181}],183:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var defineBuiltIn = require('../internals/define-built-in');
var toString = require('../internals/object-to-string');

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  defineBuiltIn(Object.prototype, 'toString', toString, { unsafe: true });
}

},{"../internals/define-built-in":67,"../internals/object-to-string":138,"../internals/to-string-tag-support":173}],184:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
var PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-callable":43,"../internals/export":84,"../internals/function-call":90,"../internals/iterate":119,"../internals/new-promise-capability":126,"../internals/perform":141,"../internals/promise-statics-incorrect-iteration":145}],185:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var getBuiltIn = require('../internals/get-built-in');
var isCallable = require('../internals/is-callable');
var defineBuiltIn = require('../internals/define-built-in');

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });
  }
}

},{"../internals/define-built-in":67,"../internals/export":84,"../internals/get-built-in":95,"../internals/is-callable":111,"../internals/is-pure":116,"../internals/promise-constructor-detection":142,"../internals/promise-native-constructor":143}],186:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var IS_NODE = require('../internals/engine-is-node');
var global = require('../internals/global');
var call = require('../internals/function-call');
var defineBuiltIn = require('../internals/define-built-in');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var setSpecies = require('../internals/set-species');
var aCallable = require('../internals/a-callable');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var anInstance = require('../internals/an-instance');
var speciesConstructor = require('../internals/species-constructor');
var task = require('../internals/task').set;
var microtask = require('../internals/microtask');
var hostReportErrors = require('../internals/host-report-errors');
var perform = require('../internals/perform');
var Queue = require('../internals/queue');
var InternalStateModule = require('../internals/internal-state');
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var PromiseConstructorDetection = require('../internals/promise-constructor-detection');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');

var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var setInternalState = InternalStateModule.set;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var PromiseConstructor = NativePromiseConstructor;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;

var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var callReaction = function (reaction, state) {
  var value = state.value;
  var ok = state.state === FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;
      else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(TypeError('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call(then, value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };

  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  // `Promise.prototype.then` method
  // https://tc39.es/ecma262/#sec-promise.prototype.then
  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable(onRejected) && onRejected;
    reaction.domain = IS_NODE ? process.domain : undefined;
    if (state.state === PENDING) state.reactions.add(reaction);
    else microtask(function () {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });

  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

},{"../internals/a-callable":43,"../internals/an-instance":47,"../internals/define-built-in":67,"../internals/engine-is-node":79,"../internals/export":84,"../internals/function-call":90,"../internals/global":99,"../internals/host-report-errors":102,"../internals/internal-state":108,"../internals/is-callable":111,"../internals/is-object":115,"../internals/is-pure":116,"../internals/microtask":125,"../internals/new-promise-capability":126,"../internals/object-set-prototype-of":137,"../internals/perform":141,"../internals/promise-constructor-detection":142,"../internals/promise-native-constructor":143,"../internals/queue":147,"../internals/set-species":156,"../internals/set-to-string-tag":157,"../internals/species-constructor":161,"../internals/task":165}],187:[function(require,module,exports){
'use strict';
// TODO: Remove this module from `core-js@4` since it's split to modules listed below
require('../modules/es.promise.constructor');
require('../modules/es.promise.all');
require('../modules/es.promise.catch');
require('../modules/es.promise.race');
require('../modules/es.promise.reject');
require('../modules/es.promise.resolve');

},{"../modules/es.promise.all":184,"../modules/es.promise.catch":185,"../modules/es.promise.constructor":186,"../modules/es.promise.race":188,"../modules/es.promise.reject":189,"../modules/es.promise.resolve":190}],188:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
var PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-callable":43,"../internals/export":84,"../internals/function-call":90,"../internals/iterate":119,"../internals/new-promise-capability":126,"../internals/perform":141,"../internals/promise-statics-incorrect-iteration":145}],189:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});

},{"../internals/export":84,"../internals/function-call":90,"../internals/new-promise-capability":126,"../internals/promise-constructor-detection":142}],190:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var IS_PURE = require('../internals/is-pure');
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;
var promiseResolve = require('../internals/promise-resolve');

var PromiseConstructorWrapper = getBuiltIn('Promise');
var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
  resolve: function resolve(x) {
    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
  }
});

},{"../internals/export":84,"../internals/get-built-in":95,"../internals/is-pure":116,"../internals/promise-constructor-detection":142,"../internals/promise-native-constructor":143,"../internals/promise-resolve":144}],191:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var uncurryThis = require('../internals/function-uncurry-this');
var isForced = require('../internals/is-forced');
var inheritIfRequired = require('../internals/inherit-if-required');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var isPrototypeOf = require('../internals/object-is-prototype-of');
var isRegExp = require('../internals/is-regexp');
var toString = require('../internals/to-string');
var getRegExpFlags = require('../internals/regexp-get-flags');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var proxyAccessor = require('../internals/proxy-accessor');
var defineBuiltIn = require('../internals/define-built-in');
var fails = require('../internals/fails');
var hasOwn = require('../internals/has-own-property');
var enforceInternalState = require('../internals/internal-state').enforce;
var setSpecies = require('../internals/set-species');
var wellKnownSymbol = require('../internals/well-known-symbol');
var UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');
var UNSUPPORTED_NCG = require('../internals/regexp-unsupported-ncg');

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var SyntaxError = global.SyntaxError;
var exec = uncurryThis(RegExpPrototype.exec);
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);
// TODO: Use only proper RegExpIdentifierName
var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var MISSED_STICKY = stickyHelpers.MISSED_STICKY;
var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var BASE_FORCED = DESCRIPTORS &&
  (!CORRECT_NEW || MISSED_STICKY || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails(function () {
    re2[MATCH] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return NativeRegExp(re1) !== re1 || NativeRegExp(re2) === re2 || String(NativeRegExp(re1, 'i')) !== '/a/i';
  }));

var handleDotAll = function (string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var brackets = false;
  var chr;
  for (; index <= length; index++) {
    chr = charAt(string, index);
    if (chr === '\\') {
      result += chr + charAt(string, ++index);
      continue;
    }
    if (!brackets && chr === '.') {
      result += '[\\s\\S]';
    } else {
      if (chr === '[') {
        brackets = true;
      } else if (chr === ']') {
        brackets = false;
      } result += chr;
    }
  } return result;
};

var handleNCG = function (string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var named = [];
  var names = {};
  var brackets = false;
  var ncg = false;
  var groupid = 0;
  var groupname = '';
  var chr;
  for (; index <= length; index++) {
    chr = charAt(string, index);
    if (chr === '\\') {
      chr += charAt(string, ++index);
    } else if (chr === ']') {
      brackets = false;
    } else if (!brackets) switch (true) {
      case chr === '[':
        brackets = true;
        break;
      case chr === '(':
        if (exec(IS_NCG, stringSlice(string, index + 1))) {
          index += 2;
          ncg = true;
        }
        result += chr;
        groupid++;
        continue;
      case chr === '>' && ncg:
        if (groupname === '' || hasOwn(names, groupname)) {
          throw new SyntaxError('Invalid capture group name');
        }
        names[groupname] = true;
        named[named.length] = [groupname, groupid];
        ncg = false;
        groupname = '';
        continue;
    }
    if (ncg) groupname += chr;
    else result += chr;
  } return [result, named];
};

// `RegExp` constructor
// https://tc39.es/ecma262/#sec-regexp-constructor
if (isForced('RegExp', BASE_FORCED)) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = isPrototypeOf(RegExpPrototype, this);
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var groups = [];
    var rawPattern = pattern;
    var rawFlags, dotAll, sticky, handled, result, state;

    if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
      return pattern;
    }

    if (patternIsRegExp || isPrototypeOf(RegExpPrototype, pattern)) {
      pattern = pattern.source;
      if (flagsAreUndefined) flags = getRegExpFlags(rawPattern);
    }

    pattern = pattern === undefined ? '' : toString(pattern);
    flags = flags === undefined ? '' : toString(flags);
    rawPattern = pattern;

    if (UNSUPPORTED_DOT_ALL && 'dotAll' in re1) {
      dotAll = !!flags && stringIndexOf(flags, 's') > -1;
      if (dotAll) flags = replace(flags, /s/g, '');
    }

    rawFlags = flags;

    if (MISSED_STICKY && 'sticky' in re1) {
      sticky = !!flags && stringIndexOf(flags, 'y') > -1;
      if (sticky && UNSUPPORTED_Y) flags = replace(flags, /y/g, '');
    }

    if (UNSUPPORTED_NCG) {
      handled = handleNCG(pattern);
      pattern = handled[0];
      groups = handled[1];
    }

    result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);

    if (dotAll || sticky || groups.length) {
      state = enforceInternalState(result);
      if (dotAll) {
        state.dotAll = true;
        state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
      }
      if (sticky) state.sticky = true;
      if (groups.length) state.groups = groups;
    }

    if (pattern !== rawPattern) try {
      // fails in old engines, but we have no alternatives for unsupported regex syntax
      createNonEnumerableProperty(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
    } catch (error) { /* empty */ }

    return result;
  };

  for (var keys = getOwnPropertyNames(NativeRegExp), index = 0; keys.length > index;) {
    proxyAccessor(RegExpWrapper, NativeRegExp, keys[index++]);
  }

  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  defineBuiltIn(global, 'RegExp', RegExpWrapper, { constructor: true });
}

// https://tc39.es/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');

},{"../internals/create-non-enumerable-property":63,"../internals/define-built-in":67,"../internals/descriptors":69,"../internals/fails":85,"../internals/function-uncurry-this":94,"../internals/global":99,"../internals/has-own-property":100,"../internals/inherit-if-required":106,"../internals/internal-state":108,"../internals/is-forced":113,"../internals/is-regexp":117,"../internals/object-get-own-property-names":131,"../internals/object-is-prototype-of":133,"../internals/proxy-accessor":146,"../internals/regexp-get-flags":151,"../internals/regexp-sticky-helpers":152,"../internals/regexp-unsupported-dot-all":153,"../internals/regexp-unsupported-ncg":154,"../internals/set-species":156,"../internals/to-string":174,"../internals/well-known-symbol":181}],192:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var exec = require('../internals/regexp-exec');

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});

},{"../internals/export":84,"../internals/regexp-exec":149}],193:[function(require,module,exports){
'use strict';
var PROPER_FUNCTION_NAME = require('../internals/function-name').PROPER;
var defineBuiltIn = require('../internals/define-built-in');
var anObject = require('../internals/an-object');
var $toString = require('../internals/to-string');
var fails = require('../internals/fails');
var getRegExpFlags = require('../internals/regexp-get-flags');

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) !== '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name !== TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  defineBuiltIn(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var pattern = $toString(R.source);
    var flags = $toString(getRegExpFlags(R));
    return '/' + pattern + '/' + flags;
  }, { unsafe: true });
}

},{"../internals/an-object":48,"../internals/define-built-in":67,"../internals/fails":85,"../internals/function-name":91,"../internals/regexp-get-flags":151,"../internals/to-string":174}],194:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var toLength = require('../internals/to-length');
var toString = require('../internals/to-string');
var requireObjectCoercible = require('../internals/require-object-coercible');
var getMethod = require('../internals/get-method');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@match logic
fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = isNullOrUndefined(regexp) ? undefined : getMethod(regexp, MATCH);
      return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function (string) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(nativeMatch, rx, S);

      if (res.done) return res.value;

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = toString(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"../internals/advance-string-index":46,"../internals/an-object":48,"../internals/fix-regexp-well-known-symbol-logic":86,"../internals/function-call":90,"../internals/get-method":98,"../internals/is-null-or-undefined":114,"../internals/regexp-exec-abstract":148,"../internals/require-object-coercible":155,"../internals/to-length":169,"../internals/to-string":174}],195:[function(require,module,exports){
'use strict';
var apply = require('../internals/function-apply');
var call = require('../internals/function-call');
var uncurryThis = require('../internals/function-uncurry-this');
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var isRegExp = require('../internals/is-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var toLength = require('../internals/to-length');
var toString = require('../internals/to-string');
var getMethod = require('../internals/get-method');
var arraySlice = require('../internals/array-slice-simple');
var callRegExpExec = require('../internals/regexp-exec-abstract');
var regexpExec = require('../internals/regexp-exec');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var fails = require('../internals/fails');

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var MAX_UINT32 = 0xFFFFFFFF;
var min = Math.min;
var $push = [].push;
var exec = uncurryThis(/./.exec);
var push = uncurryThis($push);
var stringSlice = uncurryThis(''.slice);

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

// @@split logic
fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] === 'c' ||
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length !== 4 ||
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = toString(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return call(nativeSplit, string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = call(regexpExec, separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          push(output, stringSlice(string, lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !exec(separatorCopy, '')) push(output, '');
      } else push(output, stringSlice(string, lastLastIndex));
      return output.length > lim ? arraySlice(output, 0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = isNullOrUndefined(separator) ? undefined : getMethod(separator, SPLIT);
      return splitter
        ? call(splitter, separator, O, limit)
        : call(internalSplit, toString(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (string, limit) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

      if (res.done) return res.value;

      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (UNSUPPORTED_Y ? 'g' : 'y');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          push(A, stringSlice(S, p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            push(A, z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      push(A, stringSlice(S, p));
      return A;
    }
  ];
}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

},{"../internals/advance-string-index":46,"../internals/an-object":48,"../internals/array-slice-simple":54,"../internals/fails":85,"../internals/fix-regexp-well-known-symbol-logic":86,"../internals/function-apply":87,"../internals/function-call":90,"../internals/function-uncurry-this":94,"../internals/get-method":98,"../internals/is-null-or-undefined":114,"../internals/is-regexp":117,"../internals/regexp-exec":149,"../internals/regexp-exec-abstract":148,"../internals/regexp-sticky-helpers":152,"../internals/require-object-coercible":155,"../internals/species-constructor":161,"../internals/to-length":169,"../internals/to-string":174}],196:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.sub` method
// https://tc39.es/ecma262/#sec-string.prototype.sub
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {
  sub: function sub() {
    return createHTML(this, 'sub', '', '');
  }
});

},{"../internals/create-html":62,"../internals/export":84,"../internals/string-html-forced":162}],197:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var DOMTokenListPrototype = require('../internals/dom-token-list-prototype');
var forEach = require('../internals/array-for-each');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var handlePrototype = function (CollectionPrototype) {
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  if (DOMIterables[COLLECTION_NAME]) {
    handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype);
  }
}

handlePrototype(DOMTokenListPrototype);

},{"../internals/array-for-each":49,"../internals/create-non-enumerable-property":63,"../internals/dom-iterables":73,"../internals/dom-token-list-prototype":74,"../internals/global":99}],198:[function(require,module,exports){
/*!
 * pulltorefreshjs v0.1.22
 * (c) Rafael Soto
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.PullToRefresh = factory());
}(this, function () { 'use strict';

  var _shared = {
    pullStartY: null,
    pullMoveY: null,
    handlers: [],
    styleEl: null,
    events: null,
    dist: 0,
    state: 'pending',
    timeout: null,
    distResisted: 0,
    supportsPassive: false,
    supportsPointerEvents: typeof window !== 'undefined' && !!window.PointerEvent
  };

  try {
    window.addEventListener('test', null, {
      get passive() {
        // eslint-disable-line getter-return
        _shared.supportsPassive = true;
      }

    });
  } catch (e) {// do nothing
  }

  function setupDOM(handler) {
    if (!handler.ptrElement) {
      var ptr = document.createElement('div');

      if (handler.mainElement !== document.body) {
        handler.mainElement.parentNode.insertBefore(ptr, handler.mainElement);
      } else {
        document.body.insertBefore(ptr, document.body.firstChild);
      }

      ptr.classList.add(((handler.classPrefix) + "ptr"));
      ptr.innerHTML = handler.getMarkup().replace(/__PREFIX__/g, handler.classPrefix);
      handler.ptrElement = ptr;

      if (typeof handler.onInit === 'function') {
        handler.onInit(handler);
      } // Add the css styles to the style node, and then
      // insert it into the dom


      if (!_shared.styleEl) {
        _shared.styleEl = document.createElement('style');

        _shared.styleEl.setAttribute('id', 'pull-to-refresh-js-style');

        document.head.appendChild(_shared.styleEl);
      }

      _shared.styleEl.textContent = handler.getStyles().replace(/__PREFIX__/g, handler.classPrefix).replace(/\s+/g, ' ');
    }

    return handler;
  }

  function onReset(handler) {
    if (!handler.ptrElement) { return; }
    handler.ptrElement.classList.remove(((handler.classPrefix) + "refresh"));
    handler.ptrElement.style[handler.cssProp] = '0px';
    setTimeout(function () {
      // remove previous ptr-element from DOM
      if (handler.ptrElement && handler.ptrElement.parentNode) {
        handler.ptrElement.parentNode.removeChild(handler.ptrElement);
        handler.ptrElement = null;
      } // reset state


      _shared.state = 'pending';
    }, handler.refreshTimeout);
  }

  function update(handler) {
    var iconEl = handler.ptrElement.querySelector(("." + (handler.classPrefix) + "icon"));
    var textEl = handler.ptrElement.querySelector(("." + (handler.classPrefix) + "text"));

    if (iconEl) {
      if (_shared.state === 'refreshing') {
        iconEl.innerHTML = handler.iconRefreshing;
      } else {
        iconEl.innerHTML = handler.iconArrow;
      }
    }

    if (textEl) {
      if (_shared.state === 'releasing') {
        textEl.innerHTML = handler.instructionsReleaseToRefresh;
      }

      if (_shared.state === 'pulling' || _shared.state === 'pending') {
        textEl.innerHTML = handler.instructionsPullToRefresh;
      }

      if (_shared.state === 'refreshing') {
        textEl.innerHTML = handler.instructionsRefreshing;
      }
    }
  }

  var _ptr = {
    setupDOM: setupDOM,
    onReset: onReset,
    update: update
  };

  var _timeout;

  var screenY = function screenY(event) {
    if (_shared.pointerEventsEnabled && _shared.supportsPointerEvents) {
      return event.screenY;
    }

    return event.touches[0].screenY;
  };

  var _setupEvents = (function () {
    var _el;

    function _onTouchStart(e) {
      // here, we must pick a handler first, and then append their html/css on the DOM
      var target = _shared.handlers.filter(function (h) { return h.contains(e.target); })[0];

      _shared.enable = !!target;

      if (target && _shared.state === 'pending') {
        _el = _ptr.setupDOM(target);

        if (target.shouldPullToRefresh()) {
          _shared.pullStartY = screenY(e);
        }

        clearTimeout(_shared.timeout);

        _ptr.update(target);
      }
    }

    function _onTouchMove(e) {
      if (!(_el && _el.ptrElement && _shared.enable)) {
        return;
      }

      if (!_shared.pullStartY) {
        if (_el.shouldPullToRefresh()) {
          _shared.pullStartY = screenY(e);
        }
      } else {
        _shared.pullMoveY = screenY(e);
      }

      if (_shared.state === 'refreshing') {
        if (e.cancelable && _el.shouldPullToRefresh() && _shared.pullStartY < _shared.pullMoveY) {
          e.preventDefault();
        }

        return;
      }

      if (_shared.state === 'pending') {
        _el.ptrElement.classList.add(((_el.classPrefix) + "pull"));

        _shared.state = 'pulling';

        _ptr.update(_el);
      }

      if (_shared.pullStartY && _shared.pullMoveY) {
        _shared.dist = _shared.pullMoveY - _shared.pullStartY;
      }

      _shared.distExtra = _shared.dist - _el.distIgnore;

      if (_shared.distExtra > 0) {
        if (e.cancelable) {
          e.preventDefault();
        }

        _el.ptrElement.style[_el.cssProp] = (_shared.distResisted) + "px";
        _shared.distResisted = _el.resistanceFunction(_shared.distExtra / _el.distThreshold) * Math.min(_el.distMax, _shared.distExtra);

        if (_shared.state === 'pulling' && _shared.distResisted > _el.distThreshold) {
          _el.ptrElement.classList.add(((_el.classPrefix) + "release"));

          _shared.state = 'releasing';

          _ptr.update(_el);
        }

        if (_shared.state === 'releasing' && _shared.distResisted < _el.distThreshold) {
          _el.ptrElement.classList.remove(((_el.classPrefix) + "release"));

          _shared.state = 'pulling';

          _ptr.update(_el);
        }
      }
    }

    function _onTouchEnd() {
      if (!(_el && _el.ptrElement && _shared.enable)) {
        return;
      } // wait 1/2 sec before unmounting...


      clearTimeout(_timeout);
      _timeout = setTimeout(function () {
        if (_el && _el.ptrElement && _shared.state === 'pending') {
          _ptr.onReset(_el);
        }
      }, 500);

      if (_shared.state === 'releasing' && _shared.distResisted > _el.distThreshold) {
        _shared.state = 'refreshing';
        _el.ptrElement.style[_el.cssProp] = (_el.distReload) + "px";

        _el.ptrElement.classList.add(((_el.classPrefix) + "refresh"));

        _shared.timeout = setTimeout(function () {
          var retval = _el.onRefresh(function () { return _ptr.onReset(_el); });

          if (retval && typeof retval.then === 'function') {
            retval.then(function () { return _ptr.onReset(_el); });
          }

          if (!retval && !_el.onRefresh.length) {
            _ptr.onReset(_el);
          }
        }, _el.refreshTimeout);
      } else {
        if (_shared.state === 'refreshing') {
          return;
        }

        _el.ptrElement.style[_el.cssProp] = '0px';
        _shared.state = 'pending';
      }

      _ptr.update(_el);

      _el.ptrElement.classList.remove(((_el.classPrefix) + "release"));

      _el.ptrElement.classList.remove(((_el.classPrefix) + "pull"));

      _shared.pullStartY = _shared.pullMoveY = null;
      _shared.dist = _shared.distResisted = 0;
    }

    function _onScroll() {
      if (_el) {
        _el.mainElement.classList.toggle(((_el.classPrefix) + "top"), _el.shouldPullToRefresh());
      }
    }

    var _passiveSettings = _shared.supportsPassive ? {
      passive: _shared.passive || false
    } : undefined;

    if (_shared.pointerEventsEnabled && _shared.supportsPointerEvents) {
      window.addEventListener('pointerup', _onTouchEnd);
      window.addEventListener('pointerdown', _onTouchStart);
      window.addEventListener('pointermove', _onTouchMove, _passiveSettings);
    } else {
      window.addEventListener('touchend', _onTouchEnd);
      window.addEventListener('touchstart', _onTouchStart);
      window.addEventListener('touchmove', _onTouchMove, _passiveSettings);
    }

    window.addEventListener('scroll', _onScroll);
    return {
      onTouchEnd: _onTouchEnd,
      onTouchStart: _onTouchStart,
      onTouchMove: _onTouchMove,
      onScroll: _onScroll,

      destroy: function destroy() {
        if (_shared.pointerEventsEnabled && _shared.supportsPointerEvents) {
          window.removeEventListener('pointerdown', _onTouchStart);
          window.removeEventListener('pointerup', _onTouchEnd);
          window.removeEventListener('pointermove', _onTouchMove, _passiveSettings);
        } else {
          window.removeEventListener('touchstart', _onTouchStart);
          window.removeEventListener('touchend', _onTouchEnd);
          window.removeEventListener('touchmove', _onTouchMove, _passiveSettings);
        }

        window.removeEventListener('scroll', _onScroll);
      }

    };
  });

  var _ptrMarkup = "\n<div class=\"__PREFIX__box\">\n  <div class=\"__PREFIX__content\">\n    <div class=\"__PREFIX__icon\"></div>\n    <div class=\"__PREFIX__text\"></div>\n  </div>\n</div>\n";

  var _ptrStyles = "\n.__PREFIX__ptr {\n  box-shadow: inset 0 -3px 5px rgba(0, 0, 0, 0.12);\n  pointer-events: none;\n  font-size: 0.85em;\n  font-weight: bold;\n  top: 0;\n  height: 0;\n  transition: height 0.3s, min-height 0.3s;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n  display: flex;\n  align-items: flex-end;\n  align-content: stretch;\n}\n\n.__PREFIX__box {\n  padding: 10px;\n  flex-basis: 100%;\n}\n\n.__PREFIX__pull {\n  transition: none;\n}\n\n.__PREFIX__text {\n  margin-top: .33em;\n  color: rgba(0, 0, 0, 0.3);\n}\n\n.__PREFIX__icon {\n  color: rgba(0, 0, 0, 0.3);\n  transition: transform .3s;\n}\n\n/*\nWhen at the top of the page, disable vertical overscroll so passive touch\nlisteners can take over.\n*/\n.__PREFIX__top {\n  touch-action: pan-x pan-down pinch-zoom;\n}\n\n.__PREFIX__release .__PREFIX__icon {\n  transform: rotate(180deg);\n}\n";

  var _defaults = {
    distThreshold: 60,
    distMax: 80,
    distReload: 50,
    distIgnore: 0,
    mainElement: 'body',
    triggerElement: 'body',
    ptrElement: '.ptr',
    classPrefix: 'ptr--',
    cssProp: 'min-height',
    iconArrow: '&#8675;',
    iconRefreshing: '&hellip;',
    instructionsPullToRefresh: 'Pull down to refresh',
    instructionsReleaseToRefresh: 'Release to refresh',
    instructionsRefreshing: 'Refreshing',
    refreshTimeout: 500,
    getMarkup: function () { return _ptrMarkup; },
    getStyles: function () { return _ptrStyles; },
    onInit: function () {},
    onRefresh: function () { return location.reload(); },
    resistanceFunction: function (t) { return Math.min(1, t / 2.5); },
    shouldPullToRefresh: function () { return !window.scrollY; }
  };

  var _methods = ['mainElement', 'ptrElement', 'triggerElement'];
  var _setupHandler = (function (options) {
    var _handler = {}; // merge options with defaults

    Object.keys(_defaults).forEach(function (key) {
      _handler[key] = options[key] || _defaults[key];
    }); // normalize timeout value, even if it is zero

    _handler.refreshTimeout = typeof options.refreshTimeout === 'number' ? options.refreshTimeout : _defaults.refreshTimeout; // normalize elements

    _methods.forEach(function (method) {
      if (typeof _handler[method] === 'string') {
        _handler[method] = document.querySelector(_handler[method]);
      }
    }); // attach events lazily


    if (!_shared.events) {
      _shared.events = _setupEvents();
    }

    _handler.contains = function (target) {
      return _handler.triggerElement.contains(target);
    };

    _handler.destroy = function () {
      // stop pending any pending callbacks
      clearTimeout(_shared.timeout); // remove handler from shared state

      var offset = _shared.handlers.indexOf(_handler);

      _shared.handlers.splice(offset, 1);
    };

    return _handler;
  });

  var index = {
    setPassiveMode: function setPassiveMode(isPassive) {
      _shared.passive = isPassive;
    },

    setPointerEventsMode: function setPointerEventsMode(isEnabled) {
      _shared.pointerEventsEnabled = isEnabled;
    },

    destroyAll: function destroyAll() {
      if (_shared.events) {
        _shared.events.destroy();

        _shared.events = null;
      }

      _shared.handlers.forEach(function (h) {
        h.destroy();
      });
    },

    init: function init(options) {
      if ( options === void 0 ) options = {};

      var handler = _setupHandler(options);

      _shared.handlers.push(handler);

      return handler;
    },

    // export utils for testing
    _: {
      setupHandler: _setupHandler,
      setupEvents: _setupEvents,
      setupDOM: _ptr.setupDOM,
      onReset: _ptr.onReset,
      update: _ptr.update
    }
  };

  return index;

}));

},{}],199:[function(require,module,exports){
(function (global){(function (){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.WHATWGFetch = {})));
}(this, (function (exports) { 'use strict';

  /* eslint-disable no-prototype-builtins */
  var g =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    // eslint-disable-next-line no-undef
    (typeof global !== 'undefined' && global) ||
    {};

  var support = {
    searchParams: 'URLSearchParams' in g,
    iterable: 'Symbol' in g && 'iterator' in Symbol,
    blob:
      'FileReader' in g &&
      'Blob' in g &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in g,
    arrayBuffer: 'ArrayBuffer' in g
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
      throw new TypeError('Invalid character in header field name: "' + name + '"')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        if (header.length != 2) {
          throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)
        }
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body._noBody) return
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
    var encoding = match ? match[1] : 'utf-8';
    reader.readAsText(blob, encoding);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */
      // eslint-disable-next-line no-self-assign
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._noBody = true;
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this);
        if (isConsumed) {
          return isConsumed
        } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else if (support.blob) {
        return this.blob().then(readBlobAsArrayBuffer)
      } else {
        throw new Error('could not read as ArrayBuffer')
      }
    };

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }

    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal || (function () {
      if ('AbortController' in g) {
        var ctrl = new AbortController();
        return ctrl.signal;
      }
    }());
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);

    if (this.method === 'GET' || this.method === 'HEAD') {
      if (options.cache === 'no-store' || options.cache === 'no-cache') {
        // Search for a '_' parameter in the query string
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          // If it already exists then set the value with the current time
          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
        } else {
          // Otherwise add a new '_' parameter to the end with the current time
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
        }
      }
    }
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders
      .split('\r')
      .map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
      })
      .forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          try {
            headers.append(key, value);
          } catch (error) {
            console.warn('Response ' + error.message);
          }
        }
      });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    if (this.status < 200 || this.status > 599) {
      throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].")
    }
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 200, statusText: ''});
    response.status = 0;
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = g.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        // This check if specifically for when a user fetches a file locally from the file system
        // Only if the status is out of a normal range
        if (request.url.startsWith('file://') && (xhr.status < 200 || xhr.status > 599)) {
          options.status = 200;
        } else {
          options.status = xhr.status;
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };

      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError('Network request timed out'));
        }, 0);
      };

      xhr.onabort = function() {
        setTimeout(function() {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        }, 0);
      };

      function fixUrl(url) {
        try {
          return url === '' && g.location.href ? g.location.href : url
        } catch (e) {
          return url
        }
      }

      xhr.open(request.method, fixUrl(request.url), true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr) {
        if (support.blob) {
          xhr.responseType = 'blob';
        } else if (
          support.arrayBuffer
        ) {
          xhr.responseType = 'arraybuffer';
        }
      }

      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
        var names = [];
        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
          names.push(normalizeName(name));
          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
        request.headers.forEach(function(value, name) {
          if (names.indexOf(name) === -1) {
            xhr.setRequestHeader(name, value);
          }
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!g.fetch) {
    g.fetch = fetch;
    g.Headers = Headers;
    g.Request = Request;
    g.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[19])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

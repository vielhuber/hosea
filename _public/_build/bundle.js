(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Auth = _interopRequireDefault(require("./Auth"));

var _Attachments = _interopRequireDefault(require("./Attachments"));

var _Footer = _interopRequireDefault(require("./Footer"));

var _Filter = _interopRequireDefault(require("./Filter"));

var _Html = _interopRequireDefault(require("./Html"));

var _Keyboard = _interopRequireDefault(require("./Keyboard"));

var _Scheduler = _interopRequireDefault(require("./Scheduler"));

var _Quickbox = _interopRequireDefault(require("./Quickbox"));

var _Sort = _interopRequireDefault(require("./Sort"));

var _Store = _interopRequireDefault(require("./Store"));

var _Textarea = _interopRequireDefault(require("./Textarea"));

var _Tickets = _interopRequireDefault(require("./Tickets"));

var _User = _interopRequireDefault(require("./User"));

var App = /*#__PURE__*/function () {
  function App() {
    (0, _classCallCheck2["default"])(this, App);
  }

  (0, _createClass2["default"])(App, null, [{
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _Store["default"].initStore();

                _context.next = 3;
                return _Auth["default"].login();

              case 3:
                _context.next = 5;
                return _User["default"].fetchUser();

              case 5:
                _context.next = 7;
                return _Tickets["default"].fetchTickets();

              case 7:
                _Html["default"].buildHtml();

                _Keyboard["default"].initKeyboardNavigation();

                _Scheduler["default"].initScheduler();

                _Quickbox["default"].initQuickbox();

                _Quickbox["default"].bindQuickbox();

                _Tickets["default"].bindAutoTime();

                _Tickets["default"].bindChangeTracking();

                _Tickets["default"].bindValidation();

                _Attachments["default"].bindUpload();

                _Attachments["default"].bindDownload();

                _Attachments["default"].bindDeleteAttachment();

                _Tickets["default"].bindDelete();

                _Tickets["default"].bindSave();

                _Footer["default"].bindSave();

                _Footer["default"].bindCreate();

                _Footer["default"].bindLogout();

                _Footer["default"].linkiCal();

                _Footer["default"].initStatus();

                _Keyboard["default"].bindRefresh();

                _Tickets["default"].bindCreate();

                _Scheduler["default"].bindScheduler();

                _Sort["default"].initSort();

                _Filter["default"].initFilter();

                _Scheduler["default"].updateColors();

                _Tickets["default"].updateSum();

                _Textarea["default"].textareaAutoHeight();

              case 33:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }]);
  return App;
}();

exports["default"] = App;

},{"./Attachments":2,"./Auth":3,"./Filter":5,"./Footer":6,"./Html":8,"./Keyboard":9,"./Quickbox":11,"./Scheduler":12,"./Sort":13,"./Store":14,"./Textarea":15,"./Tickets":16,"./User":17,"@babel/runtime/helpers/asyncToGenerator":24,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/regenerator":37}],2:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Helper = _interopRequireDefault(require("./Helper"));

var _Html = _interopRequireDefault(require("./Html"));

var _Lock = _interopRequireDefault(require("./Lock"));

var _Store = _interopRequireDefault(require("./Store"));

var _Tickets = _interopRequireDefault(require("./Tickets"));

var _Footer = _interopRequireDefault(require("./Footer"));

var Attachments = /*#__PURE__*/function () {
  function Attachments() {
    (0, _classCallCheck2["default"])(this, Attachments);
  }

  (0, _createClass2["default"])(Attachments, null, [{
    key: "bindDownload",
    value: function bindDownload() {
      document.querySelector('.tickets').addEventListener('click', function (e) {
        if (e.target.closest('.tickets__attachment-download')) {
          Attachments.startDownload(e.target.closest('.tickets__attachment').getAttribute('data-id'));
          e.preventDefault();
        }
      });
    }
  }, {
    key: "startDownload",
    value: function startDownload(attachment_id) {
      _Store["default"].data.api.fetch('_api/attachments/' + attachment_id, {
        method: 'GET',
        cache: 'no-cache',
        headers: {
          'content-type': 'application/json'
        }
      }).then(function (res) {
        return res.json();
      })["catch"](function (err) {
        console.error(err);
      }).then(function (response) {
        var base64 = response.data.data,
            filename = response.data.name,
            url = hlp.base64tourl(base64);
        var a = document.createElement('a');
        a.setAttribute('style', 'display:none');
        a.setAttribute('download', filename);
        a.setAttribute('href', url);
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        a.remove();
      });
    }
  }, {
    key: "bindUpload",
    value: function bindUpload() {
      document.querySelector('.tickets').addEventListener('change', function (e) {
        if (e.target.closest('.tickets__entry input[type="file"]')) {
          Attachments.startUploadsAndBuildHtml(e.target.closest('.tickets__entry').getAttribute('data-id'), e.target.files);
        }
      });
    }
  }, {
    key: "startUploadsAndBuildHtml",
    value: function startUploadsAndBuildHtml(ticket_id, files) {
      Attachments.startUploads(ticket_id, files).then(function (attachments) {
        var el = document.querySelector('.tickets .tickets__entry[data-id="' + ticket_id + '"] input[type="file"]');
        el.value = '';
        attachments.forEach(function (attachments__value) {
          el.closest('.tickets__entry').querySelector('.tickets__attachments').insertAdjacentHTML('beforeend', _Html["default"].createHtmlDownloadLine(attachments__value));
        });
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }, {
    key: "startUploads",
    value: function () {
      var _startUploads = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(ticket_id, files) {
        var attachments, _i, _Array$from, files__value, attachment;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                attachments = [];
                _i = 0, _Array$from = Array.from(files);

              case 2:
                if (!(_i < _Array$from.length)) {
                  _context.next = 13;
                  break;
                }

                files__value = _Array$from[_i];

                _Lock["default"].lockTicket(ticket_id);

                _context.next = 7;
                return Attachments.startUpload(ticket_id, files__value);

              case 7:
                attachment = _context.sent;

                _Lock["default"].unlockTicket(ticket_id, true);

                if (attachment !== null) {
                  attachments.push(attachment);
                }

              case 10:
                _i++;
                _context.next = 2;
                break;

              case 13:
                _context.next = 15;
                return _Tickets["default"].updateLocalTicket(ticket_id);

              case 15:
                return _context.abrupt("return", attachments);

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function startUploads(_x, _x2) {
        return _startUploads.apply(this, arguments);
      }

      return startUploads;
    }()
  }, {
    key: "startUpload",
    value: function startUpload(ticket_id, file) {
      return new Promise(function (resolve, reject) {
        if (file.size / 1024 / 1024 > 5) {
          _Footer["default"].updateStatus('size gt 5 mb!', 'error');

          resolve(null);
          return;
        }

        _Helper["default"].fileToBase64(file).then(function (base64) {
          _Store["default"].data.api.fetch('_api/attachments', {
            method: 'POST',
            body: JSON.stringify({
              name: file.name,
              data: base64,
              ticket_id: ticket_id
            }),
            cache: 'no-cache',
            headers: {
              'content-type': 'application/json'
            }
          }).then(function (res) {
            return res.json();
          })["catch"](function (err) {
            console.error(err);
          }).then(function (response) {
            resolve(response.data);
          });
        });
      });
    }
  }, {
    key: "bindDeleteAttachment",
    value: function bindDeleteAttachment() {
      document.querySelector('.tickets').addEventListener('click', function (e) {
        if (e.target.closest('.tickets__attachment-delete')) {
          if (_Lock["default"].ticketIsLocked(e.target.closest('.tickets__entry').getAttribute('data-id'))) {
            e.preventDefault();
          }

          var attachment_id = e.target.closest('.tickets__attachment').getAttribute('data-id');

          _Store["default"].data.api.fetch('_api/attachments/' + attachment_id, {
            method: 'DELETE',
            cache: 'no-cache',
            headers: {
              'content-type': 'application/json'
            }
          }).then(function (res) {
            return res.json();
          })["catch"](function (err) {
            console.error(err);
          }).then(function (response) {
            e.target.closest('.tickets__attachment').remove();
          });

          e.preventDefault();
        }
      });
    }
  }]);
  return Attachments;
}();

exports["default"] = Attachments;

},{"./Footer":6,"./Helper":7,"./Html":8,"./Lock":10,"./Store":14,"./Tickets":16,"@babel/runtime/helpers/asyncToGenerator":24,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/regenerator":37}],3:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Store = _interopRequireDefault(require("./Store"));

var _jwtbutler = _interopRequireDefault(require("jwtbutler"));

var Auth = /*#__PURE__*/function () {
  function Auth() {
    (0, _classCallCheck2["default"])(this, Auth);
  }

  (0, _createClass2["default"])(Auth, null, [{
    key: "login",
    value: function login() {
      _Store["default"].data.api = new _jwtbutler["default"]({
        auth_server: '_auth'
      });
      return _Store["default"].data.api.login();
    }
  }, {
    key: "logout",
    value: function logout() {
      return _Store["default"].data.api.logout();
    }
  }]);
  return Auth;
}();

exports["default"] = Auth;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"jwtbutler":326}],4:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Store = _interopRequireDefault(require("./Store"));

var Dates = /*#__PURE__*/function () {
  function Dates() {
    (0, _classCallCheck2["default"])(this, Dates);
  }

  (0, _createClass2["default"])(Dates, null, [{
    key: "getCurrentDate",
    value: function getCurrentDate() {
      return new Date();
    }
  }, {
    key: "getActiveDate",
    value: function getActiveDate() {
      return _Store["default"].data.session.activeDay;
    }
  }, {
    key: "getDayOfActiveWeek",
    value: function getDayOfActiveWeek(shift) {
      return Dates.getDayOfWeek(shift, _Store["default"].data.session.activeDay);
    }
  }, {
    key: "getDayOfCurrentWeek",
    value: function getDayOfCurrentWeek(shift) {
      return Dates.getDayOfWeek(shift, this.getCurrentDate());
    }
  }, {
    key: "getDayOfWeek",
    value: function getDayOfWeek(shift, date) {
      var d = new Date(date),
          day = d.getDay(),
          diff = d.getDate() - day + (day == 0 ? -6 : 1) + (shift - 1);
      return new Date(d.setDate(diff));
    }
  }, {
    key: "parseDateString",
    value: function parseDateString(string, view) {
      var _this = this;

      if (!['tickets', 'scheduler', 'today', 'all'].includes(view)) {
        return false;
      }

      if (string == '') {
        return [];
      }

      var ret = [],
          error = false,
          d;
      string.split('\n').forEach(function (string__value) {
        // 01.01.18
        // 01.01.18 09:00-10:00
        if (new RegExp('^[0-9][0-9].[0-9][0-9].[1-2][0-9]( [0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9])?$').test(string__value)) {
          d = new Date('20' + string__value.substring(6, 8) + '-' + string__value.substring(3, 5) + '-' + string__value.substring(0, 2));

          if (isNaN(d)) {
            error = true;
            return;
          }

          if (view === 'tickets' && Dates.dateIsActiveDay(d) || view === 'scheduler' && Dates.dateIsInActiveWeek(d) || view === 'today' && Dates.dateIsToday(d) || view === 'all') {
            var begin = string__value.length > 8 ? parseInt(string__value.substring(9, 11)) + parseInt(string__value.substring(12, 14)) / 60 : null,
                end = string__value.length > 8 ? parseInt(string__value.substring(15, 17)) + parseInt(string__value.substring(18, 20)) / 60 : null;

            if (end === 0) {
              end = 24;
            }

            d.setHours(Math.floor(begin === null ? 0 : begin));
            d.setMinutes((begin === null ? 0 : begin) % 1 * 60);
            d.setSeconds(0);
            d.setMilliseconds(0);
            ret.push({
              date: d,
              day: (d.getDay() + 6) % 7 + 1,
              begin: begin,
              end: end,
              time: end - begin
            });
          }
        } // MO [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO#1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO#12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO~1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        // MO~12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
        else if (new RegExp('^(MO|DI|MI|DO|FR|SA|SO)((#|~)[1-9][0-9]?)?( [0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9])?( (-|>|<)[0-9][0-9].[0-9][0-9].[1-2][0-9])*$').test(string__value)) {
            if (view === 'today') {
              d = Dates.getDayOfCurrentWeek(Dates.getDayFromString(string__value.substring(0, 2)));
            } else {
              d = Dates.getDayOfActiveWeek(Dates.getDayFromString(string__value.substring(0, 2)));
            }

            if (isNaN(d)) {
              error = true;
              return;
            }

            if (view !== 'all' && Dates.dateIsExcluded(d, string__value)) {
              return;
            }

            if (view !== 'all' && string__value.substring(2, 3) === '#') {
              var num = parseInt(string__value.substring(3, 5).trim()),
                  nthWeekdayOfMonth = _this.nthWeekdayOfMonth(d);

              if (num % 4 !== nthWeekdayOfMonth) {
                return;
              }

              if ((d.getMonth() + 1) % (Math.floor((num - 1) / 4) + 1) !== 0) {
                return;
              }
            }

            if (view !== 'all' && string__value.substring(2, 3) === '~') {
              var _num = parseInt(string__value.substring(3, 5).trim()),
                  weekNumber = _this.weekNumber(d);

              if (_num != weekNumber) {
                return;
              }
            }

            if (view === 'tickets' && Dates.dateIsActiveDay(d) || view === 'scheduler' && Dates.dateIsInActiveWeek(d) || view === 'today' && Dates.dateIsToday(d) || view === 'all') {
              var _begin = null,
                  _end = null;

              if (string__value.split(':').length === 3) {
                var shift = string__value.indexOf(':') - 2;
                _begin = parseInt(string__value.substring(shift, shift + 2)) + parseInt(string__value.substring(shift + 3, shift + 5)) / 60;
                _end = parseInt(string__value.substring(shift + 6, shift + 8)) + parseInt(string__value.substring(shift + 9, shift + 11)) / 60;
              }

              if (_end === 0) {
                _end = 24;
              }

              d.setHours(Math.floor(_begin));
              d.setMinutes(_begin % 1 * 60);
              d.setSeconds(0);
              d.setMilliseconds(0);
              ret.push({
                date: d,
                day: (d.getDay() + 6) % 7 + 1,
                begin: _begin,
                end: _end,
                time: _end - _begin
              });
            }
          } // 01.01. [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
          // 01.01. 09:00-10:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]
          else if (new RegExp('^[0-9][0-9].[0-9][0-9].( [0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9])?( (-|>|<)[0-9][0-9].[0-9][0-9].[1-2][0-9])*$').test(string__value)) {
              var year = null;

              if (view === 'today') {
                year = Dates.getCurrentDate().getFullYear();
              } else {
                year = Dates.getActiveDate().getFullYear();
              } // exception on year change


              if (Dates.weekNumber(Dates.getActiveDate()) === 1 && Dates.getActiveDate().getMonth() + 1 != string__value.substring(3, 5)) {
                year--;
              }

              d = new Date(year + '-' + string__value.substring(3, 5) + '-' + string__value.substring(0, 2));

              if (isNaN(d)) {
                error = true;
                return;
              }

              if (view !== 'all' && Dates.dateIsExcluded(d, string__value)) {
                return;
              }

              if (view === 'tickets' && Dates.dateIsActiveDay(d) || view === 'scheduler' && Dates.dateIsInActiveWeek(d) || view === 'today' && Dates.dateIsToday(d) || view === 'all') {
                var _begin2 = null,
                    _end2 = null;

                if (string__value.split(':').length === 3) {
                  var _shift = string__value.indexOf(':') - 2;

                  _begin2 = parseInt(string__value.substring(_shift, _shift + 2)) + parseInt(string__value.substring(_shift + 3, _shift + 5)) / 60;
                  _end2 = parseInt(string__value.substring(_shift + 6, _shift + 8)) + parseInt(string__value.substring(_shift + 9, _shift + 11)) / 60;
                }

                if (_end2 === 0) {
                  _end2 = 24;
                }

                d.setHours(Math.floor(_begin2));
                d.setMinutes(_begin2 % 1 * 60);
                d.setSeconds(0);
                d.setMilliseconds(0);
                ret.push({
                  date: d,
                  day: (d.getDay() + 6) % 7 + 1,
                  begin: _begin2,
                  end: _end2,
                  time: _end2 - _begin2
                });
              }
            } else {
              error = true;
              return;
            }
      });

      if (error === true) {
        return false;
      }

      return ret;
    }
  }, {
    key: "germanToEnglishString",
    value: function germanToEnglishString(str) {
      return '20' + str.substring(6, 8) + '-' + str.substring(3, 5) + '-' + str.substring(0, 2);
    }
  }, {
    key: "germanDateTimeToEnglishString",
    value: function germanDateTimeToEnglishString(str) {
      return '20' + str.substring(6, 8) + '-' + str.substring(3, 5) + '-' + str.substring(0, 2) + str.substring(9);
    }
  }, {
    key: "dateFormat",
    value: function dateFormat(d, format) {
      if (format === 'D d.m.') {
        return ['SO', 'MO', 'DI', 'MI', 'DO', 'FR', 'SA'][d.getDay()] + ' ' + ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.';
      }

      if (format === 'd. F Y') {
        return ('0' + d.getDate()).slice(-2) + '. ' + ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'][d.getMonth()] + ' ' + d.getFullYear();
      }

      if (format === 'Y-m-d') {
        return d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2);
      }

      if (format === 'd.m.Y') {
        return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear();
      }

      if (format === 'd.m.y') {
        return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear().toString().substring(2, 4);
      }

      if (format === 'd.m.') {
        return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.';
      }

      return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear() + ' ' + ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2) + ':' + ('0' + d.getSeconds()).slice(-2);
    }
  }, {
    key: "timeFormat",
    value: function timeFormat(_float) {
      var hours = Math.floor(_float),
          minutes = _float % 1 * 60;
      return ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2);
    }
  }, {
    key: "dateIsInActiveWeek",
    value: function dateIsInActiveWeek(d) {
      if (d === null || d === '') {
        return false;
      }

      d = new Date(d);
      return Dates.sameDay(Dates.getDayOfWeek(1, d), Dates.getDayOfActiveWeek(1));
    }
  }, {
    key: "dateIsActiveDay",
    value: function dateIsActiveDay(d) {
      if (d === null || d === '') {
        return false;
      }

      d = new Date(d);
      return Dates.sameDay(d, Dates.getActiveDate());
    }
  }, {
    key: "dateIsInFuture",
    value: function dateIsInFuture(d) {
      if (d === null || d === '') {
        return false;
      }

      var d1 = new Date(d),
          d2 = new Date();
      d1.setHours(0);
      d1.setMinutes(0);
      d1.setSeconds(0);
      d1.setMilliseconds(0);
      d2.setHours(0);
      d2.setMinutes(0);
      d2.setSeconds(0);
      d2.setMilliseconds(0);
      return d1 > d2;
    }
  }, {
    key: "dateIsToday",
    value: function dateIsToday(d) {
      if (d === null || d === '') {
        return false;
      }

      var d1 = new Date(d),
          d2 = new Date();
      return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();
    }
  }, {
    key: "dateIsInPast",
    value: function dateIsInPast(d) {
      if (d === null || d === '') {
        return false;
      }

      var d1 = new Date(d),
          d2 = new Date();
      d1.setHours(0);
      d1.setMinutes(0);
      d1.setSeconds(0);
      d1.setMilliseconds(0);
      d2.setHours(0);
      d2.setMinutes(0);
      d2.setSeconds(0);
      d2.setMilliseconds(0);
      return d1 < d2;
    }
  }, {
    key: "sameDay",
    value: function sameDay(d1, d2) {
      if (d1 === null || d1 === '') {
        return false;
      }

      d1 = new Date(d1);
      d2 = new Date(d2);
      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
    }
  }, {
    key: "compareDates",
    value: function compareDates(d1, d2) {
      if (d1.getFullYear() < d2.getFullYear()) {
        return -1;
      }

      if (d1.getFullYear() > d2.getFullYear()) {
        return 1;
      }

      if (d1.getMonth() < d2.getMonth()) {
        return -1;
      }

      if (d1.getMonth() > d2.getMonth()) {
        return 1;
      }

      if (d1.getDate() < d2.getDate()) {
        return -1;
      }

      if (d1.getDate() > d2.getDate()) {
        return 1;
      }

      return 0;
    }
  }, {
    key: "weekNumber",
    value: function weekNumber(d) {
      d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
      var dayNum = d.getUTCDay() || 7;
      d.setUTCDate(d.getUTCDate() + 4 - dayNum);
      var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
      return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
    }
  }, {
    key: "isDate",
    value: function isDate(string) {
      return new Date(string) !== 'Invalid Date' && !isNaN(new Date(string));
    }
  }, {
    key: "getDayFromString",
    value: function getDayFromString(string) {
      return {
        MO: 1,
        DI: 2,
        MI: 3,
        DO: 4,
        FR: 5,
        SA: 6,
        SO: 7
      }[string];
    }
  }, {
    key: "getStringFromDay",
    value: function getStringFromDay(day) {
      return {
        1: MO,
        2: DI,
        3: MI,
        4: DO,
        5: FR,
        6: SA,
        7: SO
      }[day];
    }
  }, {
    key: "dateIsExcluded",
    value: function dateIsExcluded(d, str) {
      var ret = false;
      str.split(' ').forEach(function (value) {
        var excludedDate = new Date(Dates.germanToEnglishString(value.substring(1)));

        if (value.indexOf('-') === 0) {
          if (Dates.sameDay(excludedDate, d)) {
            ret = true;
          }
        }

        if (value.indexOf('>') === 0) {
          if (Dates.compareDates(excludedDate, d) !== -1) {
            ret = true;
          }
        }

        if (value.indexOf('<') === 0) {
          if (Dates.compareDates(excludedDate, d) !== 1) {
            ret = true;
          }
        }
      });
      return ret;
    }
  }, {
    key: "extractTimeFromDate",
    value: function extractTimeFromDate(d) {
      var match = d.match(new RegExp('[0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9]'));

      if (match !== null) {
        return match[0];
      }

      return '';
    }
  }, {
    key: "dayOfYear",
    value: function dayOfYear(date) {
      return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;
    }
  }, {
    key: "nthWeekdayOfMonth",
    value: function nthWeekdayOfMonth(date) {
      var c = date.getDate();
      return Math.floor((c - 1) / 7) + 1;
    }
  }, {
    key: "includeNewLowerBoundInDate",
    value: function includeNewLowerBoundInDate(date, lowerBound) {
      date = date.split('\n');
      date.forEach(function (date__value, date__key) {
        var match = date__value.match(new RegExp('>[0-9][0-9].[0-9][0-9].[1-2][0-9]', 'g')),
            isObsolete = false;

        if (match !== null) {
          match.forEach(function (match__value) {
            var curBound = new Date(Dates.germanToEnglishString(match__value.substring(1)));

            if (Dates.compareDates(lowerBound, curBound) === 1) {
              date__value = date__value.split(match__value).join('');
            } else {
              isObsolete = true;
            }
          });
        }

        date__value = date__value.replace(/ +(?= )/g, ''); // remove double whitespaces

        date__value = date__value.trim();

        if (isObsolete === false) {
          date__value = date__value + ' >' + Dates.dateFormat(Dates.getActiveDate(), 'd.m.y');
        }

        date[date__key] = date__value;
      });
      date = date.join('\n');
      return date;
    }
  }]);
  return Dates;
}();
/* debug */


exports["default"] = Dates;
window.Dates = Dates;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28}],5:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Dates = _interopRequireDefault(require("./Dates"));

var _Tickets = _interopRequireDefault(require("./Tickets"));

var _Sort = _interopRequireDefault(require("./Sort"));

var _Store = _interopRequireDefault(require("./Store"));

var _Scheduler = _interopRequireDefault(require("./Scheduler"));

var _Textarea = _interopRequireDefault(require("./Textarea"));

var Filter = /*#__PURE__*/function () {
  function Filter() {
    (0, _classCallCheck2["default"])(this, Filter);
  }

  (0, _createClass2["default"])(Filter, null, [{
    key: "initFilter",
    value: function initFilter() {
      Filter.initUpdateFilter(false);
    }
  }, {
    key: "updateFilter",
    value: function updateFilter() {
      Filter.initUpdateFilter(true);
    }
  }, {
    key: "initUpdateFilter",
    value: function initUpdateFilter(update) {
      var selected = {};

      if (update === true) {
        document.querySelector('.metabar__filter').querySelectorAll('.metabar__select--filter').forEach(function (el) {
          selected[el.getAttribute('name')] = el.value;
        });
        document.querySelector('.metabar__filter').remove();
      }

      document.querySelector('.metabar').insertAdjacentHTML('beforeend', '<div class="metabar__filter"></div>');
      ['status', 'priority', 'date', 'project'].forEach(function (columns__value) {
        document.querySelector('.metabar__filter').insertAdjacentHTML('beforeend', "\n                <select class=\"metabar__select metabar__select--filter\" name=\"".concat(columns__value, "\">\n                    <option value=\"*\">").concat(columns__value, "</option>\n                </select>\n            "));

        if (columns__value === 'date') {
          document.querySelector('.metabar__select--filter[name="date"]').insertAdjacentHTML('beforeend', '<option value=""></option>');
          var firstDay = new Date('2018-01-01 00:00:00');
          var curDay = new Date();
          curDay.setHours(0);
          curDay.setMinutes(0);
          curDay.setSeconds(0);
          var lastDay = new Date(parseInt(new Date().getFullYear()) + 1 + '-12-31 00:00:00');

          while (firstDay < lastDay) {
            document.querySelector('.metabar__select--filter[name="date"]').insertAdjacentHTML('beforeend', '<option' + (_Dates["default"].sameDay(firstDay, curDay) ? ' selected="selected"' : '') + ' value="' + _Dates["default"].dateFormat(firstDay, 'Y-m-d') + '">' + _Dates["default"].dateFormat(firstDay, 'd.m.y') + '</option>');
            firstDay.setDate(firstDay.getDate() + 1);
          }
        } else {
          var options = [];
          var skip_old_dates = [],
              skip_year_end = parseInt(new Date().getFullYear().toString().slice(-2)) - 1;

          for (var skip_year = 17; skip_year <= skip_year_end; skip_year++) {
            skip_old_dates.push('.' + skip_year);
          }

          _Store["default"].data.tickets.forEach(function (tickets__value) {
            // skip old projects
            if (columns__value === 'project') {
              if (skip_old_dates.includes(tickets__value.date.substring(5, 8))) {
                return;
              }
            }

            var options_value = tickets__value[columns__value];

            if (!options.includes(options_value)) {
              options.push(options_value);
            }
          });

          options.sort(function (a, b) {
            if (a === null) {
              a = '';
            }

            if (b === null) {
              b = '';
            }

            return a.toLowerCase().localeCompare(b.toLowerCase());
          });
          options.forEach(function (options__value) {
            document.querySelector('.metabar__select--filter[name="' + columns__value + '"]').insertAdjacentHTML('beforeend', '<option value="' + options__value + '">' + options__value + '</option>');
          });
        }
      });

      if (update === true) {
        Object.entries(selected).forEach(function (_ref) {
          var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
              selected__key = _ref2[0],
              selected__value = _ref2[1];

          document.querySelector('.metabar__filter [name="' + selected__key + '"]').value = selected__value;
        });
      } else {
        Filter.doFilter();
        document.querySelector('.metabar').addEventListener('change', function (e) {
          if (e.target.closest('.metabar__select--filter')) {
            var date = e.target.closest('.metabar__select--filter[name="date"]');

            if (date && date.value !== '*' && date.value !== '') {
              _Store["default"].data.session.activeDay = new Date(date.value);

              _Scheduler["default"].initScheduler();
            }

            Filter.doFilter();
          }
        });
      }
    }
  }, {
    key: "doFilter",
    value: function doFilter() {
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        var visible = true;
        document.querySelector('.metabar__filter').querySelectorAll('select').forEach(function (el) {
          var val_search = el.value,
              val_target = tickets__value[el.getAttribute('name')],
              visible_this = false; // date

          if (el.getAttribute('name') === 'date' && val_search !== '*' && val_search !== '') {
            var parsed_values = _Dates["default"].parseDateString(val_target, 'tickets');

            if (parsed_values !== false && parsed_values.length > 0) {
              visible_this = true;
            }
          } // all others
          else if (val_search === '*' || val_target === val_search) {
              visible_this = true;
            }
          /* special behaviour: hide billed in overview */


          if (el.getAttribute('name') == 'status' && val_search === '*' && val_target === 'billed' && document.querySelector('.metabar__select--filter[name="date"]').value === '*') {
            visible_this = false;
          }

          if (visible_this === false) {
            visible = false;
          }
        });

        if (visible === false && tickets__value.visible === true) {
          tickets__value.visible = false;
          document.querySelector('.tickets .tickets__entry[data-id="' + tickets__value.id + '"]').classList.remove('tickets__entry--visible');
        } else if (visible === true && tickets__value.visible === false) {
          tickets__value.visible = true;
          document.querySelector('.tickets .tickets__entry[data-id="' + tickets__value.id + '"]').classList.add('tickets__entry--visible');
        }
      });

      _Sort["default"].doSort();

      _Scheduler["default"].updateColors();

      _Tickets["default"].updateSum();

      _Textarea["default"].textareaSetVisibleHeights();
    }
  }]);
  return Filter;
}();

exports["default"] = Filter;

},{"./Dates":4,"./Scheduler":12,"./Sort":13,"./Store":14,"./Textarea":15,"./Tickets":16,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/helpers/slicedToArray":33}],6:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Tickets = _interopRequireDefault(require("./Tickets"));

var _Auth = _interopRequireDefault(require("./Auth"));

var Footer = /*#__PURE__*/function () {
  function Footer() {
    (0, _classCallCheck2["default"])(this, Footer);
  }

  (0, _createClass2["default"])(Footer, null, [{
    key: "initStatus",
    value: function initStatus() {
      if (document.querySelector('.footer__status') === null) {
        return;
      }

      if (Footer.blockStatusUpdate === false) {
        var d = ('0' + new Date().getDate()).slice(-2) + '.' + ('0' + (new Date().getMonth() + 1)).slice(-2) + '.' + new Date().getFullYear().toString().substring(2, 4) + ' ' + ('0' + new Date().getHours()).slice(-2) + ':' + ('0' + new Date().getMinutes()).slice(-2) + ':' + ('0' + new Date().getSeconds()).slice(-2);
        document.querySelector('.footer__status').textContent = d;
      }

      setTimeout(Footer.initStatus, 1000);
    }
  }, {
    key: "updateStatus",
    value: function updateStatus(status, type) {
      document.querySelector('.footer__status').textContent = status;
      document.querySelector('.footer__status').classList.remove('footer__status--success');
      document.querySelector('.footer__status').classList.remove('footer__status--warning');
      document.querySelector('.footer__status').classList.remove('footer__status--error');
      document.querySelector('.footer__status').classList.add('footer__status--' + type);
      Footer.blockStatusUpdate = true;
      setTimeout(function () {
        Footer.blockStatusUpdate = false;
      }, Footer.showTime - 1000);
      setTimeout(function () {
        document.querySelector('.footer__status').classList.remove('footer__status--' + type);
      }, Footer.showTime);
    }
  }, {
    key: "bindSave",
    value: function bindSave() {
      document.querySelector('.footer').addEventListener('click', function (e) {
        if (e.target.closest('.footer__save')) {
          Footer.updateStatus('saving...', 'warning');

          _Tickets["default"].saveTickets().then(function () {
            Footer.updateStatus('saved!', 'success');
          })["catch"](function (error) {
            Footer.updateStatus(error, 'error');
          });

          e.preventDefault();
        }
      });
    }
  }, {
    key: "bindCreate",
    value: function bindCreate() {
      document.querySelector('.footer').addEventListener('click', function (e) {
        if (e.target.closest('.footer__create')) {
          _Tickets["default"].prepareCreateTicket();

          e.preventDefault();
        }
      });
    }
  }, {
    key: "bindLogout",
    value: function bindLogout() {
      document.querySelector('.footer').addEventListener('click', function (e) {
        if (e.target.closest('.footer__logout')) {
          _Auth["default"].logout().then(function () {
            // we simply overcome the issue of deleting event listeners on document by simply refreshing the app
            location.reload();
          })["catch"](function (error) {
            console.error(error);
          });

          e.preventDefault();
        }
      });
    }
  }, {
    key: "linkiCal",
    value: function linkiCal() {
      document.querySelector('.footer__ical').setAttribute('href', '_api/ical/' + Store.data.user.ical_key);
    }
  }]);
  return Footer;
}();

exports["default"] = Footer;
(0, _defineProperty2["default"])(Footer, "blockStatusUpdate", false);
(0, _defineProperty2["default"])(Footer, "showTime", 3500);

},{"./Auth":3,"./Tickets":16,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/defineProperty":27,"@babel/runtime/helpers/interopRequireDefault":28}],7:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Helper = /*#__PURE__*/function () {
  function Helper() {
    (0, _classCallCheck2["default"])(this, Helper);
  }

  (0, _createClass2["default"])(Helper, null, [{
    key: "prevAll",
    value: function prevAll(el) {
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var prev = true;
      return [].filter.call(el.parentNode.children, function (htmlElement) {
        if (htmlElement === el) {
          prev = false;
          return false;
        }

        if (selector !== null && !htmlElement.classList.contains(selector.replace('.', ''))) {
          return false;
        }

        return prev;
      }).reverse();
    }
  }, {
    key: "nextAll",
    value: function nextAll(el) {
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var next = false;
      return [].filter.call(el.parentNode.children, function (htmlElement) {
        if (htmlElement === el) {
          next = true;
          return false;
        }

        if (selector !== null && !htmlElement.classList.contains(selector.replace('.', ''))) {
          return false;
        }

        return next;
      });
    }
  }, {
    key: "isObject",
    value: function isObject(obj) {
      return obj !== null && (0, _typeof2["default"])(obj) === 'object';
    }
  }, {
    key: "isInteger",
    value: function isInteger(value) {
      return !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));
    }
  }, {
    key: "fileToBase64",
    value: function fileToBase64(file) {
      return new Promise(function (resolve, reject) {
        var reader = new FileReader();
        reader.readAsDataURL(file);

        reader.onload = function () {
          return resolve(reader.result.split(',')[1]);
        };

        reader.onerror = function (error) {
          return reject(error);
        };
      });
    }
  }, {
    key: "debounce",
    value: function debounce(func, wait, immediate) {
      var timeout;
      return function () {
        var context = this,
            args = arguments;

        var later = function later() {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };

        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    }
  }]);
  return Helper;
}();

exports["default"] = Helper;

},{"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/helpers/typeof":35}],8:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Store = _interopRequireDefault(require("./Store"));

var Html = /*#__PURE__*/function () {
  function Html() {
    (0, _classCallCheck2["default"])(this, Html);
  }

  (0, _createClass2["default"])(Html, null, [{
    key: "buildHtml",
    value: function buildHtml() {
      document.querySelector('#app').insertAdjacentHTML('beforeend', "\n            <div class=\"tickets\"></div>\n            <div class=\"scheduler\"></div>\n            <div class=\"quickbox\"></div>\n            <div class=\"footer\"></div>\n        ");
      document.querySelector('.footer').insertAdjacentHTML('beforeend', "\n            <a href=\"#\" class=\"footer__save\">_save</a>\n            <a href=\"#\" class=\"footer__create\">_create</a>\n            <span class=\"footer__status\"></span>\n            <a href=\"#\" class=\"footer__ical\" target=\"_blank\">_ical</a>\n            <a href=\"#\" class=\"footer__logout\">_logout</a>\n            ");
      document.querySelector('.tickets').insertAdjacentHTML('beforeend', "\n            <div class=\"metabar\"></div>\n            <div class=\"tickets__table-container\">\n                <table class=\"tickets__table\">\n                    <thead class=\"tickets__table-head\">\n                        <tr class=\"tickets__table-row\"></tr>\n                    </thead>\n                    <tbody class=\"tickets__table-body\">\n                    </tbody>\n                    <tfoot class=\"tickets__table-foot\">\n                        <tr class=\"tickets__table-row\"></tr>\n                    </tfoot>\n                </table>\n            </div>\n        ");

      _Store["default"].data.cols.forEach(function (cols__value) {
        document.querySelector('.tickets__table-head tr').insertAdjacentHTML('beforeend', '<td class="tickets__table-cell">' + cols__value + '</td>');

        if (cols__value === 'status') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"scheduled\nidle\nallday\nroaming\nfixed\ndone\nbilled\nrecurring\nworking\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }

        if (cols__value === 'priority') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"[A-D]\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }

        if (cols__value === 'time') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"[0-24]\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }

        if (cols__value === 'date') {
          document.querySelector('.tickets__table-head tr td:last-child').insertAdjacentHTML('beforeend', "\n                    <span title=\"01.01.18\n01.01.18 09:00-10:00\nMO [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO#1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO#12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO~1 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\nMO~12 10:00-11:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\n01.01. [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\n01.01. 09:00-10:00 [-05.10.18 -12.10.18 >01.01.18 <01.01.19]\n\nDD#N: (N%4)th weekday in every ((N-1)/4)th month\nDD~N: weekday in calendar week N\" class=\"tickets__table-tooltip\">(?)</span>\n                ");
        }

        document.querySelector('.tickets__table-foot tr').insertAdjacentHTML('beforeend', '<td class="tickets__table-cell">' + (cols__value == 'time' ? '<span class="tickets__sum"></span>' : '') + '</td>');
      });

      document.querySelector('.tickets__table-head tr').insertAdjacentHTML('beforeend', "\n                    <td class=\"tickets__table-cell\">attachments</td>\n                    <td class=\"tickets__table-cell\">delete</td>\n                ");
      document.querySelector('.tickets__table-foot tr').insertAdjacentHTML('beforeend', "\n                <td class=\"tickets__table-cell\"></td>\n                <td class=\"tickets__table-cell\"></td>\n            ");

      _Store["default"].data.tickets.forEach(function (tickets__value) {
        document.querySelector('.tickets__table-body').insertAdjacentHTML('beforeend', Html.createHtmlLine(tickets__value, false));
      });
    }
  }, {
    key: "createHtmlLine",
    value: function createHtmlLine(ticket, visible) {
      var html = '';
      html += '<tr class="tickets__table-row tickets__entry' + (visible === true ? ' tickets__entry--visible' : '') + '" data-id="' + ticket.id + '">';

      _Store["default"].data.cols.forEach(function (cols__value) {
        html += '<td class="tickets__table-cell">';
        html += '<textarea class="tickets__textarea tickets__textarea--' + cols__value + '" autocorrect="off" autocapitalize="off" spellcheck="false" ' + (['date', 'description'].includes(cols__value) ? ' class="autosize"' : '') + ' name="' + cols__value + '">' + (ticket[cols__value] || '') + '</textarea>';
        html += '</td>';
      });

      html += "\n            <td class=\"tickets__table-cell\">\n                <ul class=\"tickets__attachments\">";

      if (ticket.attachments !== undefined && ticket.attachments.length > 0) {
        ticket.attachments.forEach(function (attachments__value, attachments__key) {
          html += Html.createHtmlDownloadLine(attachments__value);
        });
      }

      html += "\n                </ul>\n\n                <label class=\"tickets__upload\" title=\"_upload\">\n                    <input class=\"tickets__upload-input\" type=\"file\" name=\"attachments\" multiple=\"multiple\" />\n                </label>\n   \n            </td>\n            <td class=\"tickets__table-cell\">\n                <a href=\"#\" class=\"tickets__entry__delete\">x</a>\n            </td>\n        </tr>\n        ";
      return html;
    }
  }, {
    key: "createHtmlDownloadLine",
    value: function createHtmlDownloadLine(attachment) {
      return "\n            <li class=\"tickets__attachment\" data-id=\"".concat(attachment.id, "\">\n                <a class=\"tickets__attachment-download\" href=\"#\" title=\"").concat(attachment.name, "\"></a>\n                <a class=\"tickets__attachment-delete\" href=\"#\" title=\"_delete\"></a>\n            </li>\n        ");
    }
  }]);
  return Html;
}();

exports["default"] = Html;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28}],9:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Filter = _interopRequireDefault(require("./Filter"));

var _Helper = _interopRequireDefault(require("./Helper"));

var Keyboard = /*#__PURE__*/function () {
  function Keyboard() {
    (0, _classCallCheck2["default"])(this, Keyboard);
  }

  (0, _createClass2["default"])(Keyboard, null, [{
    key: "initKeyboardNavigation",
    value: function initKeyboardNavigation() {
      // one more keyboard event is needed (so that jumps are not too early)
      // therefore we save the previous cursor pointer here
      var selectionEndBefore = 1;
      document.querySelector('.tickets').addEventListener('keyup', function (e) {
        if (!e.target || e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
          return;
        }

        var left = e.target.closest('td').previousElementSibling,
            right = e.target.closest('td').nextElementSibling,
            top = _Helper["default"].prevAll(e.target.closest('tr'), '.tickets__entry--visible')[0],
            down = _Helper["default"].nextAll(e.target.closest('tr'), '.tickets__entry--visible')[0],
            index = _Helper["default"].prevAll(e.target.closest('td')).length + 1; // arrow right (switch)


        if (e.keyCode === 39 && right !== null && e.target.selectionEnd >= e.target.value.length && selectionEndBefore >= e.target.value.length) {
          right.querySelector('input, textarea').select();
          selectionEndBefore = 1;
          e.preventDefault();
        } // arrow left (switch)
        else if (e.keyCode === 37 && left !== null && e.target.selectionEnd <= 0 && selectionEndBefore <= 0) {
            left.querySelector('input, textarea').select();
            selectionEndBefore = 1;
            e.preventDefault();
          } // arrow top (switch)
          else if (e.keyCode === 38 && top !== undefined && e.target.selectionEnd <= 0 && selectionEndBefore <= 0) {
              top.querySelector('td:nth-child(' + index + ')').querySelector('input, textarea').select();
              selectionEndBefore = 1;
              e.preventDefault();
            } // arrow down (switch)
            else if (e.keyCode === 40 && down !== undefined && e.target.selectionEnd >= e.target.value.length && selectionEndBefore >= e.target.value.length) {
                down.querySelector('td:nth-child(' + index + ')').querySelector('input, textarea').select();
                selectionEndBefore = 1;
                e.preventDefault();
              } else {
                selectionEndBefore = e.target.selectionEnd;
              }
      });
    }
  }, {
    key: "bindRefresh",
    value: function bindRefresh() {
      // f5
      document.addEventListener('keydown', function (event) {
        if (event.keyCode === 116) {
          _Filter["default"].doFilter();

          event.preventDefault();
        }
      });
    }
  }]);
  return Keyboard;
}();

exports["default"] = Keyboard;

},{"./Filter":5,"./Helper":7,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28}],10:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Lock = /*#__PURE__*/function () {
  function Lock() {
    (0, _classCallCheck2["default"])(this, Lock);
  }

  (0, _createClass2["default"])(Lock, null, [{
    key: "lockTicket",
    value: function lockTicket(ticket_id) {
      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').classList.add('tickets__entry--locked');
      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').querySelectorAll('input, textarea').forEach(function (el) {// renable this if https://stackoverflow.com/questions/52546266/textarea-white-space-nowrap-in-combination-with-readonly is solved
        //el.setAttribute('disabled', 'disabled');
        //el.setAttribute('readonly', 'readonly');
      });
    }
  }, {
    key: "unlockTicket",
    value: function unlockTicket(ticket_id) {
      var leave_changed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (leave_changed === false) {
        document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').classList.remove('tickets__entry--changed');
      }

      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').classList.remove('tickets__entry--locked');
      document.querySelector('.tickets__entry[data-id="' + ticket_id + '"]').querySelectorAll('input, textarea').forEach(function (el) {
        el.removeAttribute('disabled');
        el.removeAttribute('readonly');
      });
    }
  }, {
    key: "ticketIsLocked",
    value: function ticketIsLocked(ticket_id) {
      if (document.querySelector('.tickets__entry[data-id="' + ticket_id + '"] .tickets__entry--locked') !== null) {
        return true;
      }

      return false;
    }
  }]);
  return Lock;
}();

exports["default"] = Lock;

},{"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28}],11:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Tickets = _interopRequireDefault(require("./Tickets"));

var _Store = _interopRequireDefault(require("./Store"));

var _Scheduler = _interopRequireDefault(require("./Scheduler"));

var _Filter = _interopRequireDefault(require("./Filter"));

var _hlp = _interopRequireDefault(require("hlp"));

var _pulltorefreshjs = _interopRequireDefault(require("pulltorefreshjs"));

var Quickbox = /*#__PURE__*/function () {
  function Quickbox() {
    (0, _classCallCheck2["default"])(this, Quickbox);
  }

  (0, _createClass2["default"])(Quickbox, null, [{
    key: "initQuickbox",
    value: function initQuickbox() {
      Quickbox.buildHtml();
      Quickbox.initMails();
      Quickbox.initToday();
      Quickbox.initNew();
    }
  }, {
    key: "bindQuickbox",
    value: function bindQuickbox() {
      Quickbox.bindMails();
      Quickbox.allowUnselectRadio();
      Quickbox.bindToday();
      Quickbox.bindNav();
      Quickbox.bindNew();
    }
  }, {
    key: "buildHtml",
    value: function buildHtml() {
      document.querySelector('.quickbox').innerHTML = "\n            <div class=\"quickbox__content\">\n                <div class=\"quickbox__mails\"></div>\n                <div class=\"quickbox__today\"></div>\n                <div class=\"quickbox__new\"></div>\n            </div>\n            <div class=\"quickbox__nav\">\n                <a href=\"#mails\" class=\"quickbox__navitem\">_mails<span class=\"quickbox__navitem-count\"></span></a>\n                <a href=\"#today\" class=\"quickbox__navitem\">_today<span class=\"quickbox__navitem-count\"></span></a>\n                <a href=\"#new\" class=\"quickbox__navitem\">_new</a>\n            </div>\n        ";
    }
  }, {
    key: "initMails",
    value: function initMails() {
      Quickbox.fetchMails();

      if (_hlp["default"].isDesktop()) {
        setInterval(function () {
          Quickbox.fetchMails();
        }, 60000);
      }
    }
  }, {
    key: "fetchMails",
    value: function fetchMails() {
      if (document.querySelector('.quickbox__mails').classList.contains('quickbox__mails--loading')) {
        return;
      }

      document.querySelector('.quickbox__mails').classList.add('quickbox__mails--loading');
      document.querySelector('.quickbox__mails').classList.remove('quickbox__mails--finished');

      _Store["default"].data.api.fetch('_api/mails', {
        method: 'GET',
        cache: 'no-cache',
        headers: {
          'content-type': 'application/json'
        }
      }).then(function (res) {
        return res.json();
      })["catch"](function () {}).then(function (response) {
        _Store["default"].data.mails = [];
        response.data.forEach(function (mails__value) {
          _Store["default"].data.mails.push(mails__value);
        });
        Quickbox.renderMails();
        Quickbox.updateMailCount();
      });
    }
  }, {
    key: "updateMailCount",
    value: function updateMailCount() {
      document.querySelector('.quickbox__navitem-count').innerText = _Store["default"].data.mails.length;
    }
  }, {
    key: "renderMails",
    value: function renderMails() {
      // add new
      _Store["default"].data.mails.forEach(function (mails__value) {
        if (document.querySelector('.quickbox__mail[data-id="' + mails__value.id + '"]') === null) {
          var content = mails__value.content;
          document.querySelector('.quickbox__mails').insertAdjacentHTML('beforeend', "\n                    <div class=\"quickbox__mail quickbox__mail--unread\" data-id=\"".concat(mails__value.id, "\">\n                        <a href=\"#\" class=\"quickbox__mail-toggle\">\n                            <div class=\"quickbox__mail-meta quickbox__mail-meta--from\">\n                                ").concat(mails__value.from_name + ' (' + mails__value.from_email + ')', "\n                            </div>\n                            <div class=\"quickbox__mail-meta quickbox__mail-meta--subject\">\n                                ").concat(mails__value.subject, "\n                            </div>\n                        </a>\n                        <iframe src=\"about:blank\" class=\"quickbox__mail-content\">\n                            ").concat(content, "\n                        </iframe>\n                        <div class=\"quickbox__mail-actions\">\n                            <form class=\"quickbox__mail-form\">\n                                <input type=\"hidden\" name=\"id\" value=\"").concat(mails__value.id, "\" />\n                                <input type=\"hidden\" name=\"mailbox\" value=\"").concat(mails__value.mailbox, "\" />\n                                <ul class=\"quickbox__mail-inputrows\">\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/3\"><label class=\"quickbox__mail-label\"><input class=\"quickbox__mail-input quickbox__mail-input--radio\" type=\"radio\" name=\"action_ticket_time\" value=\"tonight\" uncheckable data-checked checked /><span class=\"quickbox__mail-label-text\">tonight</span></label></li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/3\"><label class=\"quickbox__mail-label\"><input class=\"quickbox__mail-input quickbox__mail-input--radio\" type=\"radio\" name=\"action_ticket_time\" value=\"weekend\" uncheckable /><span class=\"quickbox__mail-label-text\">weekend</span></label></li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/3\"><label class=\"quickbox__mail-label\"><input class=\"quickbox__mail-input quickbox__mail-input--radio\" type=\"radio\" name=\"action_ticket_time\" value=\"next\" uncheckable /><span class=\"quickbox__mail-label-text\">next</span></label></li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/").concat(mails__value.editors.length + 2, "\"><label class=\"quickbox__mail-label\"><input type=\"checkbox\" class=\"quickbox__mail-input quickbox__mail-input--checkbox\" name=\"action_send[]\" value=\"sender\" /><span class=\"quickbox__mail-label-text\">sender</span></label></li>\n                                ").concat(mails__value.editors.map(function (editors__value) {
            return "\n                                            <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/".concat(mails__value.editors.length + 2, "\"><label class=\"quickbox__mail-label\"><input type=\"checkbox\" class=\"quickbox__mail-input quickbox__mail-input--checkbox\" name=\"action_send[]\" value=\"").concat(editors__value, "\" /><span class=\"quickbox__mail-label-text\">").concat(editors__value, "</span></label></li>\n                                        ");
          }).join(''), "\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/").concat(mails__value.editors.length + 2, "\">\n                                        <input\n                                            class=\"quickbox__mail-input quickbox__mail-input--text\"\n                                            autocomplete=\"off\"\n                                            value=\"\"\n                                            maxlength=\"255\"\n                                            type=\"text\"\n                                            placeholder=\"mailtext\"\n                                            name=\"action_send_text\"\n                                        />\n                                    </li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/2\">\n                                        <input class=\"quickbox__new-submit quickbox__new-submit--discard\" type=\"submit\" name=\"discard\" value=\"_discard\" />\n                                    </li>\n                                    <li class=\"quickbox__mail-inputrow quickbox__mail-inputrow--1/2\">\n                                        <input class=\"quickbox__new-submit quickbox__new-submit--create\" type=\"submit\" name=\"create\" value=\"_create\" />\n                                    </li>\n                                </ul>\n        \t                </form>\n                        </div>\n                    </div>\n                "));
          var iframe = document.querySelector('.quickbox__mail[data-id="' + mails__value.id + '"] .quickbox__mail-content');

          iframe.onload = function () {
            var style = document.createElement('style');
            style.textContent = "\n                        body {\n                            font-family: Verdana, Geneva, sans-serif;\n                            zoom:0.75;\n                            background-color:#fff;\n                            color:#000;\n                        }\n                        body::-webkit-scrollbar {\n                            width: 16px;\n                        }\n                        body::-webkit-scrollbar-track {\n                            background-color: #000000;\n                        }\n                        body::-webkit-scrollbar-thumb {\n                            background-color: #ffffff;\n                            box-shadow: -1px 0 0 0 #ffffff;\n                        }\n                    ";
            iframe.contentDocument.head.appendChild(style);

            if (iframe.contentDocument.querySelector('a') !== null) {
              iframe.contentDocument.querySelectorAll('a').forEach(function (el) {
                el.setAttribute('target', '_blank');
              });
            }
          };

          iframe.setAttribute('srcdoc', content);
        }
      }); // remove existing


      if (document.querySelector('.quickbox__mail') !== null) {
        document.querySelectorAll('.quickbox__mail').forEach(function (el) {
          if (_Store["default"].data.mails.filter(function (mails__value) {
            return mails__value.id === el.getAttribute('data-id');
          }).length === 0) {
            el.remove();
          }
        });
      }

      if (document.querySelector('.quickbox__mails--loading') !== null) {
        document.querySelector('.quickbox__mails--loading').classList.remove('quickbox__mails--loading');
      }

      if (document.querySelector('.quickbox__mail') === null) {
        document.querySelector('.quickbox__mails').classList.add('quickbox__mails--finished');
      }
    }
  }, {
    key: "bindMails",
    value: function bindMails() {
      var lastScrollPos = 0;
      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__mail-toggle');

        if (el) {
          if (el.closest('.quickbox__mail').classList.contains('quickbox__mail--expanded')) {
            el.closest('.quickbox__mails').style.overflowY = 'auto';
            el.closest('.quickbox__mails').scrollTop = lastScrollPos;
            el.closest('.quickbox__mail').classList.remove('quickbox__mail--expanded');
          } else {
            if (el.closest('.quickbox__mail').classList.contains('quickbox__mail--unread')) {
              el.closest('.quickbox__mail').classList.remove('quickbox__mail--unread');
            }

            lastScrollPos = el.closest('.quickbox__mails').scrollTop;
            el.closest('.quickbox__mails').scrollTop = 0;
            el.closest('.quickbox__mails').style.overflowY = 'hidden';
            el.closest('.quickbox__mail').classList.add('quickbox__mail--expanded');
          }

          e.preventDefault();
        }
      });
      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__new-submit');

        if (el) {
          var form = el.closest('.quickbox__mail-form'),
              id = form.closest('.quickbox__mail').getAttribute('data-id'),
              mail = _Store["default"].data.mails.filter(function (mails__value) {
            return mails__value.id === id;
          })[0],
              action = el.classList.contains('quickbox__new-submit--create') ? 'create' : 'discard';

          form.closest('.quickbox__mail').classList.add('quickbox__mail--move-' + (action === 'discard' ? 'left' : 'right'));

          if (action === 'create' && form.querySelector('[name="action_ticket_time"]:checked') !== null) {
            var date = form.querySelector('[name="action_ticket_time"]:checked').value;

            _Tickets["default"].createAndAppendTicket({
              date: date,
              description: mail.subject,
              priority: 'A',
              project: 'mail',
              status: 'scheduled',
              time: '0,50',
              visible: true,
              attachments: [_hlp["default"].base64tofile(mail.eml, null, _hlp["default"].slugify(mail.subject + ' ' + mail.date) + '.eml')]
            }, null, 1, false, true);
          }

          _Store["default"].data.api.fetch('_api/mails', {
            method: 'PUT',
            body: new URLSearchParams(new FormData(form)),
            cache: 'no-cache',
            headers: {
              'content-type': 'application/json'
            }
          }).then(function (res) {
            return res.json();
          })["catch"](function () {}).then(function (response) {});

          e.preventDefault();
          setTimeout(function () {
            _Store["default"].data.mails = _Store["default"].data.mails.filter(function (mails__value) {
              return mails__value.id != form.closest('.quickbox__mail').getAttribute('data-id');
            });
            Quickbox.renderMails();
            Quickbox.updateMailCount();
          }, 500);
        }
      });

      if (!_hlp["default"].isDesktop()) {
        _pulltorefreshjs["default"].init({
          mainElement: '.quickbox__mails',
          triggerElement: '.quickbox__mails',
          classPrefix: 'quickbox__mails-pull-to-refresh--',
          distThreshold: 80,
          distMax: 140,
          distIgnore: 0,
          instructionsPullToRefresh: '_swipe down to refresh',
          instructionsReleaseToRefresh: '_release to refresh',
          instructionsRefreshing: '_refreshing',
          shouldPullToRefresh: function shouldPullToRefresh() {
            return !this.mainElement.scrollTop && document.querySelector('.quickbox__mails--loading') === null && document.querySelector('.quickbox__mail--expanded') === null;
          },
          onRefresh: function onRefresh() {
            if (document.querySelector('.quickbox__mail--expanded') !== null) {
              return;
            }

            Quickbox.fetchMails();
          }
        });
      }
    }
  }, {
    key: "allowUnselectRadio",
    value: function allowUnselectRadio() {
      document.addEventListener('click', function (e) {
        var el = e.target.closest('input[type="radio"][uncheckable]');

        if (el) {
          if (el.hasAttribute('data-checked')) {
            el.removeAttribute('data-checked');
            el.checked = false;
          } else {
            el.checked = true;

            if (document.querySelector('input[type="radio"][uncheckable][data-checked]') !== null) {
              document.querySelectorAll('input[type="radio"][uncheckable][data-checked]').forEach(function (el) {
                el.removeAttribute('data-checked');
              });
            }

            el.setAttribute('data-checked', '');
          }
        }
      });
    }
  }, {
    key: "bindNav",
    value: function bindNav() {
      if (document.querySelector('.quickbox__content') !== null) {
        document.querySelector('.quickbox__content').setAttribute('data-view', 'mails');
        document.querySelector('.quickbox__navitem[href="#mails"]').classList.add('quickbox__navitem--active');
      }

      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__navitem');

        if (el) {
          if (!el.classList.contains('quickbox__navitem--active')) {
            if (document.querySelector('.quickbox__navitem--active') !== null) {
              document.querySelectorAll('.quickbox__navitem--active').forEach(function (navitem__value) {
                navitem__value.classList.remove('quickbox__navitem--active');
              });
            }

            el.classList.add('quickbox__navitem--active');
            document.querySelector('.quickbox__content').setAttribute('data-view', el.getAttribute('href').replace('#', ''));
          }

          e.preventDefault();
        }
      });
    }
  }, {
    key: "initToday",
    value: function initToday() {
      document.querySelector('.quickbox__today').innerHTML = "\n            <div class=\"quickbox__today-nav\">\n                <a class=\"quickbox__today-navitem quickbox__today-navitem--prev-day\" href=\"#\">&lt;</a>\n                <a class=\"quickbox__today-navitem quickbox__today-navitem--next-day\" href=\"#\">&gt;</a>\n            </div>\n            <ul class=\"quickbox__today-tickets\"></ul>\n        ";

      var tickets = _hlp["default"].deepCopy(_Store["default"].data.tickets),
          count = 0;

      tickets.sort(function (a, b) {
        return _hlp["default"].spaceship(Dates.germanDateTimeToEnglishString(a.date), Dates.germanDateTimeToEnglishString(b.date));
      });
      tickets.forEach(function (tickets__value) {
        if (['done', 'billed'].includes(tickets__value.status)) {
          return;
        }

        var parsed_values = Dates.parseDateString(tickets__value.date, 'tickets');

        if (parsed_values !== false && parsed_values.length > 0) {
          parsed_values.forEach(function (parsed_values__value) {
            document.querySelector('.quickbox__today-tickets').insertAdjacentHTML('beforeend', "\n                            <li class=\"quickbox__today-ticket\">\n                                <div class=\"quickbox__today-ticket-project\">".concat(tickets__value.project, "</div>\n                                <div class=\"quickbox__today-ticket-date\">").concat(tickets__value.date, "</div>\n                                <div class=\"quickbox__today-ticket-description\">").concat(_hlp["default"].nl2br(tickets__value.description), "</div>\n                            </li>\n                        "));
          });
          count++;
        }
      });
      document.querySelector('.quickbox__navitem[href="#today"] .quickbox__navitem-count').innerText = count;
    }
  }, {
    key: "bindToday",
    value: function bindToday() {
      document.addEventListener('click', function (e) {
        var el = e.target.closest('.quickbox__today-nav');

        if (el) {
          if (e.target.closest('.quickbox__today-navitem--prev-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 1);
          }

          if (e.target.closest('.quickbox__today-navitem--next-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 1);
          }

          Quickbox.initToday();

          _Scheduler["default"].initScheduler();

          _Filter["default"].doFilter();

          e.preventDefault();
        }
      });
    }
  }, {
    key: "initNew",
    value: function initNew() {
      document.querySelector('.quickbox__new').innerHTML = "\n            <form class=\"quickbox__new-form\">\n                <ul class=\"quickbox__new-inputrows\">\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><label class=\"quickbox__new-label\"><input class=\"quickbox__new-input quickbox__new-input--radio\" type=\"radio\" name=\"date\" value=\"tonight\" checked /><span class=\"quickbox__new-label-text\">tonight</span></label></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><label class=\"quickbox__new-label\"><input class=\"quickbox__new-input quickbox__new-input--radio\" type=\"radio\" name=\"date\" value=\"weekend\" /><span class=\"quickbox__new-label-text\">weekend</span></label></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><label class=\"quickbox__new-label\"><input class=\"quickbox__new-input quickbox__new-input--radio\" type=\"radio\" name=\"date\" value=\"next\" /><span class=\"quickbox__new-label-text\">next</span></label></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--1/4\"><input class=\"quickbox__new-input quickbox__new-input--text\" type=\"text\" name=\"date\" placeholder=\"date\" value=\"\" /></li>\n                    <li class=\"quickbox__new-inputrow\"><input class=\"quickbox__new-input quickbox__new-input--text\" type=\"text\" required=\"required\" name=\"project\" placeholder=\"project\" value=\"\" /></li>\n                    <li class=\"quickbox__new-inputrow quickbox__new-inputrow--rheight\">\n                        <textarea\n                            class=\"quickbox__new-input quickbox__new-input--textarea\"\n                            autocorrect=\"off\"\n                            autocapitalize=\"off\"\n                            spellcheck=\"false\"\n                            required=\"required\"\n                            name=\"description\"\n                            placeholder=\"description\"></textarea>\n                    </li>\n                    <li class=\"quickbox__new-inputrow\"><input class=\"quickbox__new-submit\" type=\"submit\" value=\"_create\" /></li>\n                </ul>\n            </form>\n        ";
    }
  }, {
    key: "bindNew",
    value: function bindNew() {
      document.querySelector('.quickbox__new-form [name="date"][type="text"]').addEventListener('keyup', function (e) {
        if (e.target.value != '' && document.querySelector('.quickbox__new-form [name="date"][type="radio"]:checked') !== null) {
          document.querySelector('.quickbox__new-form [name="date"][type="radio"]:checked').checked = false;
        }
      });
      document.querySelectorAll('.quickbox__new-form [name="date"][type="radio"]').forEach(function (el) {
        el.addEventListener('change', function (e) {
          if (e.target.checked === true) {
            document.querySelector('.quickbox__new-form [name="date"][type="text"]').value = '';
          }
        });
      });
      document.querySelector('.quickbox__new-form').addEventListener('submit', function (e) {
        _Tickets["default"].createAndAppendTicket({
          date: document.querySelector('.quickbox__new-form [type="radio"][name="date"]:checked') !== null ? document.querySelector('.quickbox__new-form [type="radio"][name="date"]:checked').value : document.querySelector('.quickbox__new-form [type="text"][name="date"]').value,
          description: document.querySelector('.quickbox__new-form [name="description"]').value,
          priority: 'A',
          project: document.querySelector('.quickbox__new-form [name="project"]').value,
          status: 'scheduled',
          time: '0,50',
          visible: true
        }, null, 1, false, true);

        e.preventDefault();
      });
    }
  }]);
  return Quickbox;
}();

exports["default"] = Quickbox;

},{"./Filter":5,"./Scheduler":12,"./Store":14,"./Tickets":16,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"hlp":324,"pulltorefreshjs":439}],12:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Store = _interopRequireDefault(require("./Store"));

var _Dates = _interopRequireDefault(require("./Dates"));

var _Filter = _interopRequireDefault(require("./Filter"));

var _hlp = _interopRequireDefault(require("hlp"));

var _Quickbox = _interopRequireDefault(require("./Quickbox"));

var Scheduler = /*#__PURE__*/function () {
  function Scheduler() {
    (0, _classCallCheck2["default"])(this, Scheduler);
  }

  (0, _createClass2["default"])(Scheduler, null, [{
    key: "initScheduler",
    value: function initScheduler() {
      document.querySelector('.scheduler').innerHTML = "\n            <div class=\"scheduler__navigation\">\n                <span class=\"scheduler__navigation-week\"></span>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--next-month\" title=\"_next_month\">&gt;&gt;&gt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--next-week\" title=\"_next_week\">&gt;&gt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--next-day\" title=\"_next_day\">&gt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--today\" title=\"_next_today\">_</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--prev-day\" title=\"_prev_day\">&lt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--prev-week\" title=\"_prev_week\">&lt;&lt;</a>\n                <a href=\"#\" class=\"scheduler__navigation-button scheduler__navigation-button--prev-month\" title=\"_prev_month\">&lt;&lt;&lt;</a>\n            </div>\n\n            <table class=\"scheduler__table\">\n                <thead class=\"scheduler__table-head\">\n                    <tr class=\"scheduler__row\">\n                        <td class=\"scheduler__cell\"></td>   \n                        ".concat(Array(7).join(0).split(0).map(function (item, i) {
        return "\n                            <td class=\"\n                                scheduler__cell\n                                ".concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getCurrentDate()) ? ' scheduler__cell--curday' : '', "\n                                ").concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getActiveDate()) ? ' scheduler__cell--activeday' : '', "\n                            \">\n                                ").concat(_Dates["default"].dateFormat(_Dates["default"].getDayOfActiveWeek(i + 1), 'D d.m.'), "\n                            </td>\n                        ");
      }).join(''), "\n                    </tr>\n                </thead>\n                <tbody class=\"scheduler__table-body\">\n                    <tr class=\"scheduler__row\">\n                        <td class=\"scheduler__cell\"></td>   \n                        ").concat(Array(7).join(0).split(0).map(function (item, i) {
        return "\n                            <td class=\"\n                                scheduler__cell\n                                ".concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getCurrentDate()) ? ' scheduler__cell--curday' : '', "\n                                ").concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getActiveDate()) ? ' scheduler__cell--activeday' : '', "\n                            \"></td>\n                        ");
      }).join(''), "\n                    </tr>\n                    ").concat(Array(15).join(0).split(0).map(function (item, j) {
        j = j + 9;
        return "\n                            <tr class=\"scheduler__row\">\n                                <td class=\"scheduler__cell\">".concat(('0' + j).slice(-2), "&ndash;").concat(('0' + (j + 1)).slice(-2), "</td>\n                                ").concat(Array(7).join(0).split(0).map(function (item, i) {
          return "\n                                    <td class=\"\n                                        scheduler__cell\n                                        ".concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getCurrentDate()) ? ' scheduler__cell--curday' : '', "\n                                        ").concat(_Dates["default"].sameDay(_Dates["default"].getDayOfActiveWeek(i + 1), _Dates["default"].getActiveDate()) ? ' scheduler__cell--activeday' : '', "\n                                        ").concat(i < 5 && (j >= 9 && j < 13 || j >= 14 && j < 18) ? ' scheduler__cell--main' : '', "\n                                    \">\n                                    </td>\n                                ");
        }).join(''), "\n                            </tr>\n                        ");
      }).join(''), "\n                </tbody>\n            </table>\n\n            <div class=\"scheduler__appointments\">\n            </div>\n        ");
      var generatedDates = Scheduler.generateDates();
      var weeklySum = 0;
      generatedDates.forEach(function (date__value) {
        document.querySelector('.scheduler__appointments').insertAdjacentHTML('beforeend', "\n                    <div class=\"scheduler__appointment\" title=\"".concat(_hlp["default"].htmlEncode(date__value.title), "\" style=\"\n                        left:").concat(date__value.posLeft, "%;\n                        top:").concat(date__value.posTop, "%;\n                        bottom:").concat(date__value.posBottom, "%;\n                        background:").concat(date__value.background, ";\n                        opacity:").concat(date__value.opacity, ";\n                        width:").concat(date__value.width, ";\n                    \">\n                        ").concat(date__value.name, "\n                    </div>\n                "));

        if (date__value.time != '' && date__value.project !== 'Olga') {
          weeklySum += date__value.time;
        }
      });
      weeklySum = (Math.round(weeklySum * 100) / 100).toString().replace('.', ',');
      document.querySelector('.scheduler__navigation-week').innerHTML = "\n            ".concat(_Dates["default"].dateFormat(_Dates["default"].getDayOfActiveWeek(1), 'd.m.'), " &ndash; ").concat(_Dates["default"].dateFormat(_Dates["default"].getDayOfActiveWeek(7), 'd.m.Y'), " /// _kw ").concat(_Dates["default"].weekNumber(_Dates["default"].getDayOfActiveWeek(1)), " /// ").concat(weeklySum, " hours\n        ");
    }
  }, {
    key: "bindScheduler",
    value: function bindScheduler() {
      document.querySelector('.scheduler').addEventListener('click', function (e) {
        if (e.target.closest('.scheduler__navigation-button')) {
          if (e.target.closest('.scheduler__navigation-button--today')) {
            _Store["default"].data.session.activeDay = new Date();
          }

          if (e.target.closest('.scheduler__navigation-button--prev-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 1);
          }

          if (e.target.closest('.scheduler__navigation-button--next-day')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 1);
          }

          if (e.target.closest('.scheduler__navigation-button--prev-week')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 7);
          }

          if (e.target.closest('.scheduler__navigation-button--next-week')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 7);
          }

          if (e.target.closest('.scheduler__navigation-button--prev-month')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() - 28);
          }

          if (e.target.closest('.scheduler__navigation-button--next-month')) {
            _Store["default"].data.session.activeDay.setDate(_Store["default"].data.session.activeDay.getDate() + 28);
          }

          document.querySelector('.metabar__select--filter[name="date"]').value = _Dates["default"].dateFormat(_Store["default"].data.session.activeDay, 'Y-m-d');
          Scheduler.initScheduler();

          _Quickbox["default"].initToday();

          _Filter["default"].doFilter();

          e.preventDefault();
        }
      });
    }
  }, {
    key: "generateDates",
    value: function generateDates() {
      var generatedDates = [];

      _Store["default"].data.tickets.forEach(function (tickets__value) {
        var name = tickets__value.project,
            title = tickets__value.project + '\n' + (tickets__value.description || '').substring(0, 100),
            project = tickets__value.project,
            parsed_values = _Dates["default"].parseDateString(tickets__value.date, 'scheduler');

        var background = Scheduler.getStoreProperty('background', tickets__value.status, tickets__value.project, null) || Scheduler.getStoreProperty('border', tickets__value.status, tickets__value.project, '#9E9E9E');

        if (parsed_values !== false && parsed_values.length > 0) {
          parsed_values.forEach(function (parsed_values__value) {
            generatedDates.push({
              day: parsed_values__value.day,
              begin: parsed_values__value.begin,
              end: parsed_values__value.end,
              name: name,
              title: title,
              project: project,
              time: parsed_values__value.time,
              background: background,
              opacity: Scheduler.getStoreProperty('opacity', tickets__value.status, tickets__value.project, 1)
            });
          });
        }
      });
      /* visual compression of all day events */


      var generatedDatesUndefinedMax = [],
          generatedDatesUndefinedCur = [];
      generatedDates.forEach(function (generatedDates__value) {
        if (generatedDates__value.begin === null) {
          if (!(generatedDates__value.day in generatedDatesUndefinedMax)) {
            generatedDatesUndefinedMax[generatedDates__value.day] = 0;
          }

          if (!(generatedDates__value.day in generatedDatesUndefinedCur)) {
            generatedDatesUndefinedCur[generatedDates__value.day] = 0;
          }

          generatedDatesUndefinedMax[generatedDates__value.day]++;
        }
      });
      /* visual compression of conflicting events */

      var conflicts = {};
      generatedDates.forEach(function (gv1, gk1) {
        if (gv1.begin === null || gv1.end === null) {
          return;
        }

        generatedDates.forEach(function (gv2, gk2) {
          if (gk1 === gk2) {
            return;
          }

          if (gv2.day !== gv1.day) {
            return;
          }

          if (gv2.begin === null || gv2.end === null) {
            return;
          }

          if (gv2.begin < gv1.begin) {
            return;
          }

          if ('conflict' in gv2 && 'conflict' in gv1 && gv2.conflict === gv1.conflict) {
            return;
          }

          if (gv2.begin < gv1.end) {
            if ('conflict' in gv1) {
              var conflictId = gv1.conflict;
              gv2.conflict = conflictId;

              if (!(conflictId in conflicts)) {
                conflicts[conflictId] = {
                  count: 0,
                  painted: 0
                };
              }

              conflicts[conflictId].count += 1;
            } else if ('conflict' in gv2) {
              var _conflictId = gv2.conflict;
              gv1.conflict = _conflictId;

              if (!(_conflictId in conflicts)) {
                conflicts[_conflictId] = {
                  count: 0,
                  painted: 0
                };
              }

              conflicts[_conflictId].count += 1;
            } else {
              var _conflictId2 = _hlp["default"].pushId();

              gv1.conflict = _conflictId2;
              gv2.conflict = _conflictId2;

              if (!(_conflictId2 in conflicts)) {
                conflicts[_conflictId2] = {
                  count: 0,
                  painted: 0
                };
              }

              conflicts[_conflictId2].count += 2;
            }
          }
        });
      });
      /* finalize */

      generatedDates.forEach(function (date__value) {
        var posTop, posBottom;

        if (date__value.begin === null) {
          posTop = generatedDatesUndefinedCur[date__value.day] / generatedDatesUndefinedMax[date__value.day] * 6.25;
          posBottom = 100 - (generatedDatesUndefinedCur[date__value.day] + 1) / generatedDatesUndefinedMax[date__value.day] * 6.25;
          generatedDatesUndefinedCur[date__value.day]++;
        } else {
          posTop = 6.25 * (date__value.begin - 8);
          posBottom = 100 - 6.25 * (date__value.end - 8);
        }

        var width, posLeft;

        if (!('conflict' in date__value)) {
          width = 'calc(12.5% - 4rem)';
          posLeft = 12.5 * date__value.day;
        } else {
          width = 'calc(' + 12.5 / conflicts[date__value.conflict].count + '% - 4rem)';
          posLeft = 12.5 * date__value.day + 12.5 / conflicts[date__value.conflict].count * conflicts[date__value.conflict].painted;
          conflicts[date__value.conflict].painted++;
        }

        date__value.posLeft = posLeft;
        date__value.posTop = posTop;
        date__value.posBottom = posBottom;
        date__value.width = width;
      });
      return generatedDates;
    }
  }, {
    key: "determineNextFreeSlot",
    value: function determineNextFreeSlot(str) {
      var d = _Dates["default"].parseDateString(str, 'scheduler')[0],
          dates = [];

      _Store["default"].data.tickets.forEach(function (tickets__value) {
        var parsed_values = _Dates["default"].parseDateString(tickets__value.date, 'scheduler');

        if (parsed_values !== false && parsed_values.length > 0) {
          parsed_values.forEach(function (parsed_values__value) {
            dates.push({
              date: parsed_values__value.date,
              begin: parsed_values__value.begin,
              end: parsed_values__value.end
            });
          });
        }
      });

      var conflict = true;

      while (conflict === true) {
        conflict = false;
        dates.forEach(function (dates__value) {
          if (dates__value.begin === null || dates__value.end === null || d.begin === null || d.end === null) {
            return;
          }

          if (_Dates["default"].compareDates(d.date, dates__value.date) !== 0) {
            return;
          }

          if (d.end <= dates__value.begin || dates__value.end <= d.begin) {
            return;
          }

          d.begin += 0.5;
          d.end += 0.5;

          if (d.begin >= 21) {
            d.date.setDate(d.date.getDate() + 1);
            d.date.setHours(9);
            d.begin = 9;
            d.end = 9.5;
          }

          conflict = true;
        });
      }

      return _Dates["default"].dateFormat(d.date, 'd.m.y') + ' ' + _Dates["default"].timeFormat(d.begin) + '-' + _Dates["default"].timeFormat(d.end);
    }
  }, {
    key: "getStoreProperty",
    value: function getStoreProperty(property, status) {
      var project = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var defValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      if (project !== null && project !== '' && _Store["default"].data.colors.project.hasOwnProperty(project) && (0, _typeof2["default"])(_Store["default"].data.colors.project[project]) === 'object' && property in _Store["default"].data.colors.project[project]) {
        return _Store["default"].data.colors.project[project][property];
      }

      if (status !== null && status !== '' && _Store["default"].data.colors.status.hasOwnProperty(status) && (0, _typeof2["default"])(_Store["default"].data.colors.status[status]) === 'object' && property in _Store["default"].data.colors.status[status]) {
        return _Store["default"].data.colors.status[status][property];
      }

      return defValue;
    }
  }, {
    key: "updateColors",
    value: function updateColors() {
      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.visible === true) {
          var borderColor = Scheduler.getStoreProperty('border', tickets__value.status, tickets__value.project, '#9E9E9E'),
              backgroundColor = Scheduler.getStoreProperty('background', tickets__value.status, tickets__value.project, null),
              opacity = Scheduler.getStoreProperty('opacity', tickets__value.status, tickets__value.project, 1),
              el = document.querySelector('.tickets .tickets__entry[data-id="' + tickets__value.id + '"]');

          if (borderColor) {
            el.style.borderLeftColor = borderColor;
          } else {
            el.style.borderLeftColor = 'transparent';
          }

          if (backgroundColor) {
            el.style.background = backgroundColor;
          } else {
            el.style.background = 'none';
          }

          if (opacity) {
            el.style.opacity = opacity;
          } else {
            el.style.opacity = 1;
          }
        }
      });
    }
  }]);
  return Scheduler;
}();

exports["default"] = Scheduler;

},{"./Dates":4,"./Filter":5,"./Quickbox":11,"./Store":14,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/helpers/typeof":35,"hlp":324}],13:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Store = _interopRequireDefault(require("./Store"));

var Sort = /*#__PURE__*/function () {
  function Sort() {
    (0, _classCallCheck2["default"])(this, Sort);
  }

  (0, _createClass2["default"])(Sort, null, [{
    key: "initSort",
    value: function initSort() {
      document.querySelector('.metabar').insertAdjacentHTML('beforeend', '<div class="metabar__sort"></div>');
      [1, 2].forEach(function (step) {
        document.querySelector('.metabar__sort').insertAdjacentHTML('beforeend', '<select class="metabar__select metabar__select--sort" name="sort_' + step + '"><option value="">sort #' + step + '</option></select>');

        _Store["default"].data.cols.forEach(function (columns__value) {
          document.querySelector('.metabar__select--sort[name="sort_' + step + '"]').insertAdjacentHTML('beforeend', '<option value="' + columns__value + '">' + columns__value + '</option>');
        });
      });
      document.querySelector('.metabar').addEventListener('change', function (e) {
        if (e.target.closest('.metabar__select--sort')) {
          Sort.doSort();
        }
      });
    }
  }, {
    key: "doSort",
    value: function doSort() {
      var sort_1 = document.querySelector('.metabar__select--sort[name="sort_1"]').value,
          sort_2 = document.querySelector('.metabar__select--sort[name="sort_2"]').value,
          sorted = (0, _toConsumableArray2["default"])(document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--visible')).sort(function (a, b) {
        var val_a, val_b;

        if (sort_1 != '') {
          val_a = a.querySelector('[name="' + sort_1 + '"]').value.toLowerCase();
          val_b = b.querySelector('[name="' + sort_1 + '"]').value.toLowerCase();

          if (sort_1 === 'date') {
            val_a = Dates.germanDateTimeToEnglishString(val_a);
            val_b = Dates.germanDateTimeToEnglishString(val_b);
          }

          if (val_a < val_b) {
            return -1;
          }

          if (val_a > val_b) {
            return 1;
          }
        }

        if (sort_1 == '') {
          val_a = a.querySelector('[name="status"]').value;
          val_b = b.querySelector('[name="status"]').value;

          if (val_a != val_b) {
            for (var _i = 0, _arr = ['allday', 'billed', 'done', 'working', 'fixed', 'scheduled', 'idle', 'recurring', 'roaming']; _i < _arr.length; _i++) {
              var status__value = _arr[_i];

              if (val_a === status__value) {
                return -1;
              }

              if (val_b === status__value) {
                return 1;
              }
            }
          }
        }

        if (sort_2 != '') {
          val_a = a.querySelector('[name="' + sort_2 + '"]').value.toLowerCase();
          val_b = b.querySelector('[name="' + sort_2 + '"]').value.toLowerCase();

          if (val_a < val_b) {
            return -1;
          }

          if (val_a > val_b) {
            return 1;
          }
        }

        val_a = Dates.germanDateTimeToEnglishString(a.querySelector('[name="date"]').value);
        val_b = Dates.germanDateTimeToEnglishString(b.querySelector('[name="date"]').value);

        if (val_a < val_b) {
          return -1;
        }

        if (val_a > val_b) {
          return 1;
        }

        val_a = a.querySelector('[name="priority"]').value;
        val_b = b.querySelector('[name="priority"]').value;

        if (val_a < val_b) {
          return -1;
        }

        if (val_a > val_b) {
          return 1;
        }

        val_a = a.getAttribute('data-id');
        val_b = b.getAttribute('data-id');

        if (val_a < val_b) {
          return -1;
        }

        if (val_a > val_b) {
          return 1;
        }

        return 0;
      });

      for (var i = 0; i < sorted.length; i++) {
        sorted[i].parentNode.appendChild(sorted[i]);
      }
    }
  }]);
  return Sort;
}();

exports["default"] = Sort;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/helpers/toConsumableArray":34}],14:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var Store = /*#__PURE__*/function () {
  function Store() {
    (0, _classCallCheck2["default"])(this, Store);
  }

  (0, _createClass2["default"])(Store, null, [{
    key: "initStore",
    value: function initStore() {
      Store.data = {
        api: null,
        user: null,
        tickets: null,
        mails: null,
        cols: ['status', 'priority', 'date', 'time', 'project', 'description'],
        colors: {
          status: {
            idle: {
              border: '#4527a0'
            },
            allday: {
              border: '#868686',
              opacity: 0.75
            },
            roaming: {
              border: '#ba68c8'
            },
            fixed: {
              border: '#2196F3'
            },
            done: {
              border: '#FFB300'
            },
            billed: {
              border: '#4CAF50'
            },
            recurring: {
              border: '#E91E63'
            },
            working: {
              border: '#F44336'
            }
          },
          project: {
            Geburtstag: {
              border: '#ba68c8',
              background: 'linear-gradient(178deg, #cb60b3 0%, #c146a1 50%, #a80077 51%, #db36a4 100%)'
            },
            Olga: {
              opacity: 0.75
            },
            mail: {
              opacity: 0.75
            }
          }
        },
        session: {
          activeDay: new Date()
        }
      };
    }
  }]);
  return Store;
}();

exports["default"] = Store;
(0, _defineProperty2["default"])(Store, "data", {});
window.Store = Store;

},{"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/defineProperty":27,"@babel/runtime/helpers/interopRequireDefault":28}],15:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Helper = _interopRequireDefault(require("./Helper"));

var Textarea = /*#__PURE__*/function () {
  function Textarea() {
    (0, _classCallCheck2["default"])(this, Textarea);
  }

  (0, _createClass2["default"])(Textarea, null, [{
    key: "textareaAutoHeight",
    value: function textareaAutoHeight() {
      var debounce = _Helper["default"].debounce(function (e) {
        Textarea.textareaSetHeight(e.target);
      }, 100);

      document.querySelector('.tickets .tickets__table-body').addEventListener('input', function (e) {
        if (e.target && e.target.tagName === 'TEXTAREA' && e.target.classList.contains('tickets__textarea--description')) {
          /* immediately change height if enter is pressed */
          if (e.inputType === 'insertLineBreak') {
            Textarea.textareaSetHeight(e.target);
          } else {
            /* otherwise debounce */
            debounce(e);
          }
        }
      });
    }
  }, {
    key: "textareaSetVisibleHeights",
    value: function textareaSetVisibleHeights() {
      document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--visible .tickets__textarea--description').forEach(function (el, index) {
        Textarea.textareaSetHeight(el);
      });
    }
  }, {
    key: "textareaSetHeight",
    value: function textareaSetHeight(el) {
      var min = 3,
          max = 7,
          cur = (el.value.match(/\n/g) || []).length + 1;

      if (cur < min) {
        cur = min;
      } else if (cur > max) {
        cur = max;
      }

      var height = 15 * cur + 'rem';
      el.style.height = height;
      /* also set other textarea heights */

      var parent = el.parentNode;
      (0, _toConsumableArray2["default"])(parent.parentNode.children).filter(function (child) {
        return child !== parent;
      }).forEach(function (i) {
        if (i.querySelector('textarea') !== null) {
          i.querySelector('textarea').style.height = height;
        }
      });
    }
  }]);
  return Textarea;
}();

exports["default"] = Textarea;

},{"./Helper":7,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/helpers/toConsumableArray":34}],16:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Dates = _interopRequireDefault(require("./Dates"));

var _Filter = _interopRequireDefault(require("./Filter"));

var _Helper = _interopRequireDefault(require("./Helper"));

var _Html = _interopRequireDefault(require("./Html"));

var _Lock = _interopRequireDefault(require("./Lock"));

var _Scheduler = _interopRequireDefault(require("./Scheduler"));

var _Quickbox = _interopRequireDefault(require("./Quickbox"));

var _Store = _interopRequireDefault(require("./Store"));

var _Textarea = _interopRequireDefault(require("./Textarea"));

var _Footer = _interopRequireDefault(require("./Footer"));

var _Attachments = _interopRequireDefault(require("./Attachments"));

var _hlp = _interopRequireDefault(require("hlp"));

var Tickets = /*#__PURE__*/function () {
  function Tickets() {
    (0, _classCallCheck2["default"])(this, Tickets);
  }

  (0, _createClass2["default"])(Tickets, null, [{
    key: "updateLocalTicket",
    value: function updateLocalTicket(ticket_id) {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.api.fetch('_api/tickets/' + ticket_id, {
          method: 'GET',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          Tickets.setTicketData(ticket_id, response.data);
          resolve();
        });
      });
    }
  }, {
    key: "setTicketData",
    value: function setTicketData(ticket_id, property) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.id == ticket_id) {
          if (_Helper["default"].isObject(property)) {
            Object.entries(property).forEach(function (_ref) {
              var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                  property__key = _ref2[0],
                  property__value = _ref2[1];

              tickets__value[property__key] = property__value;
            });
          } else {
            tickets__value[property] = value;
          }
        }
      });
    }
  }, {
    key: "fetchTickets",
    value: function fetchTickets() {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.api.fetch('_api/tickets', {
          method: 'GET',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          _Store["default"].data.tickets = [];
          response.data.forEach(function (tickets__value) {
            tickets__value.visible = false;

            _Store["default"].data.tickets.push(tickets__value);
          });
          resolve();
        });
      });
    }
  }, {
    key: "getTicketData",
    value: function getTicketData(ticket_id) {
      var data = null;

      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.id == ticket_id) {
          data = tickets__value;
        }
      });

      return _hlp["default"].deepCopy(data);
    }
  }, {
    key: "deleteTicket",
    value: function deleteTicket(ticket_id) {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.api.fetch('_api/tickets/' + ticket_id, {
          method: 'DELETE',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          console.error(err);
        }).then(function (response) {
          _Store["default"].data.tickets.forEach(function (tickets__value, tickets__key) {
            if (tickets__value.id == ticket_id) {
              _Store["default"].data.tickets.splice(tickets__key, 1);
            }
          });

          resolve();
        });
      });
    }
  }, {
    key: "saveTickets",
    value: function saveTickets() {
      return new Promise(function (resolve, reject) {
        if (document.querySelector('.tickets .tickets__table-body').querySelector('.tickets__textarea:invalid') !== null) {
          reject('not saved - invalid fields!');
          return;
        }

        var changed = [];
        document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--changed').forEach(function (el) {
          var data = {};

          _Store["default"].data.cols.forEach(function (cols__value) {
            data[cols__value] = el.querySelector('[name="' + cols__value + '"]').value;
          });

          Tickets.setTicketData(el.getAttribute('data-id'), data);

          _Lock["default"].lockTicket(el.getAttribute('data-id'));

          changed.push(Tickets.getTicketData(el.getAttribute('data-id')));
        });

        _Store["default"].data.api.fetch('_api/tickets', {
          method: 'PUT',
          body: JSON.stringify({
            tickets: changed
          }),
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          console.error(err);
        }).then(function (response) {
          response.data.ids.forEach(function (value) {
            _Lock["default"].unlockTicket(value);
          });

          _Scheduler["default"].initScheduler();

          _Scheduler["default"].updateColors();

          _Quickbox["default"].initToday();

          Tickets.updateSum();

          _Filter["default"].updateFilter();

          resolve();
        });
      });
    }
  }, {
    key: "createTicket",
    value: function createTicket() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new Promise(function (resolve, reject) {
        var ticket = {};

        _Store["default"].data.cols.forEach(function (cols__value) {
          ticket[cols__value] = cols__value in data ? data[cols__value] : '';
        });

        _Store["default"].data.api.fetch('_api/tickets', {
          method: 'POST',
          body: JSON.stringify(ticket),
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          ticket.id = response.data.id;
          ticket.visible = true;

          _Store["default"].data.tickets.push(ticket);

          resolve(ticket);
        });
      });
    }
  }, {
    key: "bindSave",
    value: function bindSave() {
      // ctrl+s
      document.addEventListener('keydown', function (event) {
        var focus = document.activeElement;

        if (event.ctrlKey || event.metaKey) {
          if (String.fromCharCode(event.which).toLowerCase() === 's') {
            _Footer["default"].updateStatus('saving...', 'warning');

            Tickets.saveTickets().then(function () {
              _Footer["default"].updateStatus('saved!', 'success');

              if (focus !== null) {
                focus.focus();
              }
            })["catch"](function (error) {
              _Footer["default"].updateStatus(error, 'error');
            });
            event.preventDefault();
          }
        }
      });
    }
  }, {
    key: "bindCreate",
    value: function bindCreate() {
      // ctrl+d
      document.addEventListener('keydown', function (event) {
        if (event.ctrlKey || event.metaKey) {
          if (String.fromCharCode(event.which).toLowerCase() === 'd') {
            Tickets.prepareCreateTicket();
            event.preventDefault();
          }
        }
      });
    }
  }, {
    key: "prepareCreateTicket",
    value: function prepareCreateTicket() {
      var visibleAll = document.querySelector('.tickets .tickets__table-body').querySelectorAll('.tickets__entry--visible'),
          current = null,
          currentCol = 1,
          duplicateData = {};

      if (visibleAll.length > 0) {
        if (document.activeElement.closest('.tickets__entry') !== null) {
          current = document.activeElement.closest('.tickets__entry');
          currentCol = _Helper["default"].prevAll(document.activeElement.closest('td')).length + 1;
        } else {
          current = visibleAll[visibleAll.length - 1];
          currentCol = 1;
        }

        duplicateData = Tickets.getTicketData(current.getAttribute('data-id'));
        delete duplicateData['attachments'];
      }
      /* if source is a recurring ticket, do some magic */


      if (current !== null && duplicateData.status === 'recurring' && confirm('should the copy be a scheduled ticket and the recurring ticket automatically be postponed?')) {
        var newDates = [];
        duplicateData.date.split('\n').forEach(function (duplicateData__value) {
          var newDate = _Dates["default"].dateFormat(_Dates["default"].getActiveDate(), 'd.m.y'),
              extractedTime = _Dates["default"].extractTimeFromDate(duplicateData__value);

          if (extractedTime) {
            newDate += ' ' + extractedTime;
          }

          newDates.push(newDate);
        });
        current.querySelector('.tickets__textarea--date').value = _Dates["default"].includeNewLowerBoundInDate(duplicateData.date, _Dates["default"].getActiveDate());
        current.querySelector('.tickets__textarea--date').dispatchEvent(new Event('input', {
          bubbles: true
        }));
        duplicateData.date = newDates.join('\n');
        duplicateData.status = 'scheduled';
      }

      Tickets.createAndAppendTicket(duplicateData, current, currentCol, true, false);
    }
  }, {
    key: "createAndAppendTicket",
    value: function createAndAppendTicket(data) {
      var current = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var currentCol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var withSelect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var doFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      if (['tonight', 'weekend', 'next'].includes(data.date)) {
        var d = new Date();

        if (d.getHours() >= 21) {
          d.setDate(d.getDate() + 1);
          d.setHours(9);
        }

        if (data.date === 'weekend') {
          while (d.getDay() % 6 !== 0) {
            d.setDate(d.getDate() + 1);
          }
        }

        if (data.date === 'next') {
          data.date = _Scheduler["default"].determineNextFreeSlot(('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear().toString().substr(-2) + ' ' + _Dates["default"].timeFormat(d.getHours() + 1) + '-' + _Dates["default"].timeFormat(d.getHours() + 1.5));
        } else {
          data.date = ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear().toString().substr(-2) + ' 21:00-21:30';
        }
      }

      Tickets.createTicket(data).then(function (ticket) {
        var next;

        if (current !== null) {
          current.insertAdjacentHTML('afterend', _Html["default"].createHtmlLine(ticket, true));
          next = current.nextElementSibling;
        } else {
          document.querySelector('.tickets .tickets__table-body').insertAdjacentHTML('beforeend', _Html["default"].createHtmlLine(ticket, true));
          next = document.querySelector('.tickets .tickets__table-body').querySelector('.tickets__entry--visible[data-id="' + ticket.id + '"]');
        }

        if (withSelect === true) {
          var input = next.querySelector('td:nth-child(' + currentCol + ')').querySelector('input, textarea');
          input.select();
          input.dispatchEvent(new Event('input', {
            bubbles: true
          }));
        }

        _Scheduler["default"].initScheduler();

        _Scheduler["default"].updateColors();

        _Quickbox["default"].initToday();

        Tickets.updateSum();

        _Filter["default"].updateFilter();

        _Textarea["default"].textareaSetVisibleHeights();

        if (doFilter === true) {
          _Filter["default"].doFilter();
        }

        if ('attachments' in data && data.attachments.length > 0) {
          _Attachments["default"].startUploadsAndBuildHtml(ticket.id, data.attachments);
        }
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }, {
    key: "bindChangeTracking",
    value: function bindChangeTracking() {
      document.querySelector('.tickets').addEventListener('input', function (e) {
        if (e.target.closest('.tickets__entry input, .tickets__entry textarea')) {
          if (e.target.hasAttribute('type') && e.target.getAttribute('type') === 'file') {
            return;
          }

          e.target.closest('.tickets__entry').classList.add('tickets__entry--changed');
        }
      });
    }
  }, {
    key: "bindValidation",
    value: function bindValidation() {
      document.querySelector('.tickets').addEventListener('input', function (e) {
        if (e.target.value !== '') {
          if (e.target.closest('.tickets__textarea--date')) {
            if (_Dates["default"].parseDateString(e.target.value, 'tickets') === false) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }

          if (e.target.closest('.tickets__textarea--time')) {
            if (!new RegExp('^[0-9]$|^[0-9],[0-9]$|^[0-9],[0-9][0-9]$').test(e.target.value) || e.target.value < 0 || e.target.value > 24) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }

          if (e.target.closest('.tickets__textarea--project')) {
            if (new RegExp('[^a-zA-Z0-9äÄöÖüÜß .]').test(e.target.value)) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }

          if (e.target.closest('.tickets__textarea--priority')) {
            if (!['A', 'B', 'C', 'D'].includes(e.target.value)) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }

          if (e.target.closest('.tickets__textarea--status')) {
            if (!['scheduled', 'idle', 'allday', 'roaming', 'fixed', 'done', 'billed', 'recurring', 'working'].includes(e.target.value)) {
              e.target.setCustomValidity('wrong format');
            } else {
              e.target.setCustomValidity('');
            }
          }
        } else {
          e.target.setCustomValidity('');
        }
      });
    }
  }, {
    key: "bindAutoTime",
    value: function bindAutoTime() {
      document.querySelector('.tickets').addEventListener('input', function (e) {
        if (e.target.closest('.tickets__entry [name="date"]')) {
          if (e.target.value != '') {
            var parsed_values = _Dates["default"].parseDateString(e.target.value, 'all');

            if (parsed_values !== false) {
              var time = 0;
              parsed_values.forEach(function (parses_values__value) {
                if (parses_values__value.begin !== undefined && parses_values__value.end !== undefined) {
                  time += Math.abs(parses_values__value.end - parses_values__value.begin);
                }
              });

              if (!Number.isInteger(time)) {
                time = time.toFixed(2);
              }

              time = time.toString().replace('.', ',');
              e.target.closest('.tickets__entry').querySelector('[name="time"]').value = time;
            }
          }
        }
      });
    }
  }, {
    key: "bindDelete",
    value: function bindDelete() {
      document.querySelector('.tickets').addEventListener('click', function (e) {
        if (e.target.closest('.tickets__entry__delete')) {
          var ticket_id = e.target.closest('.tickets__entry').getAttribute('data-id');

          if (_Lock["default"].ticketIsLocked(ticket_id)) {
            e.preventDefault();
          }

          var result = confirm('Sind Sie sicher?');

          if (result) {
            Tickets.deleteTicket(ticket_id).then(function (result) {
              e.target.closest('.tickets__entry').remove();

              _Scheduler["default"].initScheduler();

              _Quickbox["default"].initToday();

              Tickets.updateSum();

              _Filter["default"].updateFilter();
            })["catch"](function (error) {});
            e.preventDefault();
          }

          e.preventDefault();
        }
      });
    }
  }, {
    key: "updateSum",
    value: function updateSum() {
      var sum = 0;

      _Store["default"].data.tickets.forEach(function (tickets__value) {
        if (tickets__value.visible !== false && tickets__value.time !== null && tickets__value.time != '' && !['idle', 'allday', 'done', 'billed'].includes(tickets__value.status)) {
          sum += parseFloat(tickets__value.time.replace(',', '.'));
        }
      });

      sum = Math.round(sum * 100) / 100;
      sum = sum.toString().replace('.', ',');
      document.querySelector('.tickets__table-foot').querySelector('.tickets__sum').textContent = sum;
    }
  }]);
  return Tickets;
}();

exports["default"] = Tickets;

},{"./Attachments":2,"./Dates":4,"./Filter":5,"./Footer":6,"./Helper":7,"./Html":8,"./Lock":10,"./Quickbox":11,"./Scheduler":12,"./Store":14,"./Textarea":15,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/helpers/slicedToArray":33,"hlp":324}],17:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Store = _interopRequireDefault(require("./Store"));

var User = /*#__PURE__*/function () {
  function User() {
    (0, _classCallCheck2["default"])(this, User);
  }

  (0, _createClass2["default"])(User, null, [{
    key: "fetchUser",
    value: function fetchUser() {
      return new Promise(function (resolve, reject) {
        _Store["default"].data.api.fetch('_api/users', {
          method: 'GET',
          cache: 'no-cache',
          headers: {
            'content-type': 'application/json'
          }
        }).then(function (res) {
          return res.json();
        })["catch"](function (err) {
          reject(err);
        }).then(function (response) {
          _Store["default"].data.user = response.data;
          resolve();
        });
      });
    }
  }]);
  return User;
}();

exports["default"] = User;

},{"./Store":14,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28}],18:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _App = _interopRequireDefault(require("./App"));

document.addEventListener('DOMContentLoaded', function () {
  _App["default"].init();
});

},{"./App":1,"@babel/runtime/helpers/interopRequireDefault":28}],19:[function(require,module,exports){
"use strict";

require("core-js/es6");

require("core-js/fn/array/includes");

require("core-js/fn/array/flat-map");

require("core-js/fn/string/pad-start");

require("core-js/fn/string/pad-end");

require("core-js/fn/string/trim-start");

require("core-js/fn/string/trim-end");

require("core-js/fn/symbol/async-iterator");

require("core-js/fn/object/get-own-property-descriptors");

require("core-js/fn/object/values");

require("core-js/fn/object/entries");

require("core-js/fn/promise/finally");

require("core-js/web");

require("regenerator-runtime/runtime");
},{"core-js/es6":38,"core-js/fn/array/flat-map":39,"core-js/fn/array/includes":40,"core-js/fn/object/entries":41,"core-js/fn/object/get-own-property-descriptors":42,"core-js/fn/object/values":43,"core-js/fn/promise/finally":44,"core-js/fn/string/pad-end":45,"core-js/fn/string/pad-start":46,"core-js/fn/string/trim-end":47,"core-js/fn/string/trim-start":48,"core-js/fn/symbol/async-iterator":49,"core-js/web":323,"regenerator-runtime/runtime":440}],20:[function(require,module,exports){
require("./lib/noConflict");

},{"./lib/noConflict":19}],21:[function(require,module,exports){
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],22:[function(require,module,exports){
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],23:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayLikeToArray.js":21}],24:[function(require,module,exports){
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],25:[function(require,module,exports){
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],26:[function(require,module,exports){
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],27:[function(require,module,exports){
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],28:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],29:[function(require,module,exports){
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],30:[function(require,module,exports){
function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],31:[function(require,module,exports){
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],32:[function(require,module,exports){
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],33:[function(require,module,exports){
var arrayWithHoles = require("./arrayWithHoles.js");

var iterableToArrayLimit = require("./iterableToArrayLimit.js");

var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

var nonIterableRest = require("./nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayWithHoles.js":22,"./iterableToArrayLimit.js":30,"./nonIterableRest.js":31,"./unsupportedIterableToArray.js":36}],34:[function(require,module,exports){
var arrayWithoutHoles = require("./arrayWithoutHoles.js");

var iterableToArray = require("./iterableToArray.js");

var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

var nonIterableSpread = require("./nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayWithoutHoles.js":23,"./iterableToArray.js":29,"./nonIterableSpread.js":32,"./unsupportedIterableToArray.js":36}],35:[function(require,module,exports){
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],36:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayLikeToArray.js":21}],37:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":440}],38:[function(require,module,exports){
require('../modules/es6.symbol');
require('../modules/es6.object.create');
require('../modules/es6.object.define-property');
require('../modules/es6.object.define-properties');
require('../modules/es6.object.get-own-property-descriptor');
require('../modules/es6.object.get-prototype-of');
require('../modules/es6.object.keys');
require('../modules/es6.object.get-own-property-names');
require('../modules/es6.object.freeze');
require('../modules/es6.object.seal');
require('../modules/es6.object.prevent-extensions');
require('../modules/es6.object.is-frozen');
require('../modules/es6.object.is-sealed');
require('../modules/es6.object.is-extensible');
require('../modules/es6.object.assign');
require('../modules/es6.object.is');
require('../modules/es6.object.set-prototype-of');
require('../modules/es6.object.to-string');
require('../modules/es6.function.bind');
require('../modules/es6.function.name');
require('../modules/es6.function.has-instance');
require('../modules/es6.parse-int');
require('../modules/es6.parse-float');
require('../modules/es6.number.constructor');
require('../modules/es6.number.to-fixed');
require('../modules/es6.number.to-precision');
require('../modules/es6.number.epsilon');
require('../modules/es6.number.is-finite');
require('../modules/es6.number.is-integer');
require('../modules/es6.number.is-nan');
require('../modules/es6.number.is-safe-integer');
require('../modules/es6.number.max-safe-integer');
require('../modules/es6.number.min-safe-integer');
require('../modules/es6.number.parse-float');
require('../modules/es6.number.parse-int');
require('../modules/es6.math.acosh');
require('../modules/es6.math.asinh');
require('../modules/es6.math.atanh');
require('../modules/es6.math.cbrt');
require('../modules/es6.math.clz32');
require('../modules/es6.math.cosh');
require('../modules/es6.math.expm1');
require('../modules/es6.math.fround');
require('../modules/es6.math.hypot');
require('../modules/es6.math.imul');
require('../modules/es6.math.log10');
require('../modules/es6.math.log1p');
require('../modules/es6.math.log2');
require('../modules/es6.math.sign');
require('../modules/es6.math.sinh');
require('../modules/es6.math.tanh');
require('../modules/es6.math.trunc');
require('../modules/es6.string.from-code-point');
require('../modules/es6.string.raw');
require('../modules/es6.string.trim');
require('../modules/es6.string.iterator');
require('../modules/es6.string.code-point-at');
require('../modules/es6.string.ends-with');
require('../modules/es6.string.includes');
require('../modules/es6.string.repeat');
require('../modules/es6.string.starts-with');
require('../modules/es6.string.anchor');
require('../modules/es6.string.big');
require('../modules/es6.string.blink');
require('../modules/es6.string.bold');
require('../modules/es6.string.fixed');
require('../modules/es6.string.fontcolor');
require('../modules/es6.string.fontsize');
require('../modules/es6.string.italics');
require('../modules/es6.string.link');
require('../modules/es6.string.small');
require('../modules/es6.string.strike');
require('../modules/es6.string.sub');
require('../modules/es6.string.sup');
require('../modules/es6.date.now');
require('../modules/es6.date.to-json');
require('../modules/es6.date.to-iso-string');
require('../modules/es6.date.to-string');
require('../modules/es6.date.to-primitive');
require('../modules/es6.array.is-array');
require('../modules/es6.array.from');
require('../modules/es6.array.of');
require('../modules/es6.array.join');
require('../modules/es6.array.slice');
require('../modules/es6.array.sort');
require('../modules/es6.array.for-each');
require('../modules/es6.array.map');
require('../modules/es6.array.filter');
require('../modules/es6.array.some');
require('../modules/es6.array.every');
require('../modules/es6.array.reduce');
require('../modules/es6.array.reduce-right');
require('../modules/es6.array.index-of');
require('../modules/es6.array.last-index-of');
require('../modules/es6.array.copy-within');
require('../modules/es6.array.fill');
require('../modules/es6.array.find');
require('../modules/es6.array.find-index');
require('../modules/es6.array.species');
require('../modules/es6.array.iterator');
require('../modules/es6.regexp.constructor');
require('../modules/es6.regexp.exec');
require('../modules/es6.regexp.to-string');
require('../modules/es6.regexp.flags');
require('../modules/es6.regexp.match');
require('../modules/es6.regexp.replace');
require('../modules/es6.regexp.search');
require('../modules/es6.regexp.split');
require('../modules/es6.promise');
require('../modules/es6.map');
require('../modules/es6.set');
require('../modules/es6.weak-map');
require('../modules/es6.weak-set');
require('../modules/es6.typed.array-buffer');
require('../modules/es6.typed.data-view');
require('../modules/es6.typed.int8-array');
require('../modules/es6.typed.uint8-array');
require('../modules/es6.typed.uint8-clamped-array');
require('../modules/es6.typed.int16-array');
require('../modules/es6.typed.uint16-array');
require('../modules/es6.typed.int32-array');
require('../modules/es6.typed.uint32-array');
require('../modules/es6.typed.float32-array');
require('../modules/es6.typed.float64-array');
require('../modules/es6.reflect.apply');
require('../modules/es6.reflect.construct');
require('../modules/es6.reflect.define-property');
require('../modules/es6.reflect.delete-property');
require('../modules/es6.reflect.enumerate');
require('../modules/es6.reflect.get');
require('../modules/es6.reflect.get-own-property-descriptor');
require('../modules/es6.reflect.get-prototype-of');
require('../modules/es6.reflect.has');
require('../modules/es6.reflect.is-extensible');
require('../modules/es6.reflect.own-keys');
require('../modules/es6.reflect.prevent-extensions');
require('../modules/es6.reflect.set');
require('../modules/es6.reflect.set-prototype-of');
module.exports = require('../modules/_core');

},{"../modules/_core":69,"../modules/es6.array.copy-within":171,"../modules/es6.array.every":172,"../modules/es6.array.fill":173,"../modules/es6.array.filter":174,"../modules/es6.array.find":176,"../modules/es6.array.find-index":175,"../modules/es6.array.for-each":177,"../modules/es6.array.from":178,"../modules/es6.array.index-of":179,"../modules/es6.array.is-array":180,"../modules/es6.array.iterator":181,"../modules/es6.array.join":182,"../modules/es6.array.last-index-of":183,"../modules/es6.array.map":184,"../modules/es6.array.of":185,"../modules/es6.array.reduce":187,"../modules/es6.array.reduce-right":186,"../modules/es6.array.slice":188,"../modules/es6.array.some":189,"../modules/es6.array.sort":190,"../modules/es6.array.species":191,"../modules/es6.date.now":192,"../modules/es6.date.to-iso-string":193,"../modules/es6.date.to-json":194,"../modules/es6.date.to-primitive":195,"../modules/es6.date.to-string":196,"../modules/es6.function.bind":197,"../modules/es6.function.has-instance":198,"../modules/es6.function.name":199,"../modules/es6.map":200,"../modules/es6.math.acosh":201,"../modules/es6.math.asinh":202,"../modules/es6.math.atanh":203,"../modules/es6.math.cbrt":204,"../modules/es6.math.clz32":205,"../modules/es6.math.cosh":206,"../modules/es6.math.expm1":207,"../modules/es6.math.fround":208,"../modules/es6.math.hypot":209,"../modules/es6.math.imul":210,"../modules/es6.math.log10":211,"../modules/es6.math.log1p":212,"../modules/es6.math.log2":213,"../modules/es6.math.sign":214,"../modules/es6.math.sinh":215,"../modules/es6.math.tanh":216,"../modules/es6.math.trunc":217,"../modules/es6.number.constructor":218,"../modules/es6.number.epsilon":219,"../modules/es6.number.is-finite":220,"../modules/es6.number.is-integer":221,"../modules/es6.number.is-nan":222,"../modules/es6.number.is-safe-integer":223,"../modules/es6.number.max-safe-integer":224,"../modules/es6.number.min-safe-integer":225,"../modules/es6.number.parse-float":226,"../modules/es6.number.parse-int":227,"../modules/es6.number.to-fixed":228,"../modules/es6.number.to-precision":229,"../modules/es6.object.assign":230,"../modules/es6.object.create":231,"../modules/es6.object.define-properties":232,"../modules/es6.object.define-property":233,"../modules/es6.object.freeze":234,"../modules/es6.object.get-own-property-descriptor":235,"../modules/es6.object.get-own-property-names":236,"../modules/es6.object.get-prototype-of":237,"../modules/es6.object.is":241,"../modules/es6.object.is-extensible":238,"../modules/es6.object.is-frozen":239,"../modules/es6.object.is-sealed":240,"../modules/es6.object.keys":242,"../modules/es6.object.prevent-extensions":243,"../modules/es6.object.seal":244,"../modules/es6.object.set-prototype-of":245,"../modules/es6.object.to-string":246,"../modules/es6.parse-float":247,"../modules/es6.parse-int":248,"../modules/es6.promise":249,"../modules/es6.reflect.apply":250,"../modules/es6.reflect.construct":251,"../modules/es6.reflect.define-property":252,"../modules/es6.reflect.delete-property":253,"../modules/es6.reflect.enumerate":254,"../modules/es6.reflect.get":257,"../modules/es6.reflect.get-own-property-descriptor":255,"../modules/es6.reflect.get-prototype-of":256,"../modules/es6.reflect.has":258,"../modules/es6.reflect.is-extensible":259,"../modules/es6.reflect.own-keys":260,"../modules/es6.reflect.prevent-extensions":261,"../modules/es6.reflect.set":263,"../modules/es6.reflect.set-prototype-of":262,"../modules/es6.regexp.constructor":264,"../modules/es6.regexp.exec":265,"../modules/es6.regexp.flags":266,"../modules/es6.regexp.match":267,"../modules/es6.regexp.replace":268,"../modules/es6.regexp.search":269,"../modules/es6.regexp.split":270,"../modules/es6.regexp.to-string":271,"../modules/es6.set":272,"../modules/es6.string.anchor":273,"../modules/es6.string.big":274,"../modules/es6.string.blink":275,"../modules/es6.string.bold":276,"../modules/es6.string.code-point-at":277,"../modules/es6.string.ends-with":278,"../modules/es6.string.fixed":279,"../modules/es6.string.fontcolor":280,"../modules/es6.string.fontsize":281,"../modules/es6.string.from-code-point":282,"../modules/es6.string.includes":283,"../modules/es6.string.italics":284,"../modules/es6.string.iterator":285,"../modules/es6.string.link":286,"../modules/es6.string.raw":287,"../modules/es6.string.repeat":288,"../modules/es6.string.small":289,"../modules/es6.string.starts-with":290,"../modules/es6.string.strike":291,"../modules/es6.string.sub":292,"../modules/es6.string.sup":293,"../modules/es6.string.trim":294,"../modules/es6.symbol":295,"../modules/es6.typed.array-buffer":296,"../modules/es6.typed.data-view":297,"../modules/es6.typed.float32-array":298,"../modules/es6.typed.float64-array":299,"../modules/es6.typed.int16-array":300,"../modules/es6.typed.int32-array":301,"../modules/es6.typed.int8-array":302,"../modules/es6.typed.uint16-array":303,"../modules/es6.typed.uint32-array":304,"../modules/es6.typed.uint8-array":305,"../modules/es6.typed.uint8-clamped-array":306,"../modules/es6.weak-map":307,"../modules/es6.weak-set":308}],39:[function(require,module,exports){
require('../../modules/es7.array.flat-map');
module.exports = require('../../modules/_core').Array.flatMap;

},{"../../modules/_core":69,"../../modules/es7.array.flat-map":309}],40:[function(require,module,exports){
require('../../modules/es7.array.includes');
module.exports = require('../../modules/_core').Array.includes;

},{"../../modules/_core":69,"../../modules/es7.array.includes":310}],41:[function(require,module,exports){
require('../../modules/es7.object.entries');
module.exports = require('../../modules/_core').Object.entries;

},{"../../modules/_core":69,"../../modules/es7.object.entries":311}],42:[function(require,module,exports){
require('../../modules/es7.object.get-own-property-descriptors');
module.exports = require('../../modules/_core').Object.getOwnPropertyDescriptors;

},{"../../modules/_core":69,"../../modules/es7.object.get-own-property-descriptors":312}],43:[function(require,module,exports){
require('../../modules/es7.object.values');
module.exports = require('../../modules/_core').Object.values;

},{"../../modules/_core":69,"../../modules/es7.object.values":313}],44:[function(require,module,exports){
'use strict';
require('../../modules/es6.promise');
require('../../modules/es7.promise.finally');
module.exports = require('../../modules/_core').Promise['finally'];

},{"../../modules/_core":69,"../../modules/es6.promise":249,"../../modules/es7.promise.finally":314}],45:[function(require,module,exports){
require('../../modules/es7.string.pad-end');
module.exports = require('../../modules/_core').String.padEnd;

},{"../../modules/_core":69,"../../modules/es7.string.pad-end":315}],46:[function(require,module,exports){
require('../../modules/es7.string.pad-start');
module.exports = require('../../modules/_core').String.padStart;

},{"../../modules/_core":69,"../../modules/es7.string.pad-start":316}],47:[function(require,module,exports){
require('../../modules/es7.string.trim-right');
module.exports = require('../../modules/_core').String.trimRight;

},{"../../modules/_core":69,"../../modules/es7.string.trim-right":318}],48:[function(require,module,exports){
require('../../modules/es7.string.trim-left');
module.exports = require('../../modules/_core').String.trimLeft;

},{"../../modules/_core":69,"../../modules/es7.string.trim-left":317}],49:[function(require,module,exports){
require('../../modules/es7.symbol.async-iterator');
module.exports = require('../../modules/_wks-ext').f('asyncIterator');

},{"../../modules/_wks-ext":168,"../../modules/es7.symbol.async-iterator":319}],50:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],51:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":65}],52:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":89,"./_wks":169}],53:[function(require,module,exports){
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":146}],54:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],55:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":98}],56:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":154,"./_to-length":158,"./_to-object":159}],57:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":154,"./_to-length":158,"./_to-object":159}],58:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":154,"./_to-iobject":157,"./_to-length":158}],59:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":62,"./_ctx":71,"./_iobject":94,"./_to-length":158,"./_to-object":159}],60:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":50,"./_iobject":94,"./_to-length":158,"./_to-object":159}],61:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":96,"./_is-object":98,"./_wks":169}],62:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":61}],63:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":50,"./_invoke":93,"./_is-object":98}],64:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":65,"./_wks":169}],65:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],66:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":54,"./_ctx":71,"./_descriptors":75,"./_for-of":85,"./_iter-define":102,"./_iter-step":104,"./_meta":111,"./_object-create":115,"./_object-dp":116,"./_redefine-all":134,"./_set-species":140,"./_validate-collection":166}],67:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":54,"./_an-object":55,"./_array-methods":59,"./_for-of":85,"./_has":88,"./_is-object":98,"./_meta":111,"./_redefine-all":134,"./_validate-collection":166}],68:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":54,"./_export":79,"./_fails":81,"./_for-of":85,"./_global":87,"./_inherit-if-required":92,"./_is-object":98,"./_iter-detect":103,"./_meta":111,"./_redefine":135,"./_redefine-all":134,"./_set-to-string-tag":141}],69:[function(require,module,exports){
var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],70:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":116,"./_property-desc":133}],71:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":50}],72:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":81}],73:[function(require,module,exports){
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":55,"./_to-primitive":160}],74:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],75:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":81}],76:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":87,"./_is-object":98}],77:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],78:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":121,"./_object-keys":124,"./_object-pie":125}],79:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":69,"./_ctx":71,"./_global":87,"./_hide":89,"./_redefine":135}],80:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":169}],81:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],82:[function(require,module,exports){
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":74,"./_fails":81,"./_hide":89,"./_redefine":135,"./_regexp-exec":137,"./_wks":169,"./es6.regexp.exec":265}],83:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":55}],84:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":71,"./_is-array":96,"./_is-object":98,"./_to-length":158,"./_wks":169}],85:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":55,"./_ctx":71,"./_is-array-iter":95,"./_iter-call":100,"./_to-length":158,"./core.get-iterator-method":170}],86:[function(require,module,exports){
module.exports = require('./_shared')('native-function-to-string', Function.toString);

},{"./_shared":143}],87:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],88:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],89:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":75,"./_object-dp":116,"./_property-desc":133}],90:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":87}],91:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":75,"./_dom-create":76,"./_fails":81}],92:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":98,"./_set-proto":139}],93:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],94:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":65}],95:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":105,"./_wks":169}],96:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":65}],97:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":98}],98:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],99:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":65,"./_is-object":98,"./_wks":169}],100:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":55}],101:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":89,"./_object-create":115,"./_property-desc":133,"./_set-to-string-tag":141,"./_wks":169}],102:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":79,"./_hide":89,"./_iter-create":101,"./_iterators":105,"./_library":106,"./_object-gpo":122,"./_redefine":135,"./_set-to-string-tag":141,"./_wks":169}],103:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":169}],104:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],105:[function(require,module,exports){
module.exports = {};

},{}],106:[function(require,module,exports){
module.exports = false;

},{}],107:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],108:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":110}],109:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],110:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],111:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":81,"./_has":88,"./_is-object":98,"./_object-dp":116,"./_uid":164}],112:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":65,"./_global":87,"./_task":153}],113:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":50}],114:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;

},{"./_descriptors":75,"./_fails":81,"./_iobject":94,"./_object-gops":121,"./_object-keys":124,"./_object-pie":125,"./_to-object":159}],115:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":55,"./_dom-create":76,"./_enum-bug-keys":77,"./_html":90,"./_object-dps":117,"./_shared-key":142}],116:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":55,"./_descriptors":75,"./_ie8-dom-define":91,"./_to-primitive":160}],117:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":55,"./_descriptors":75,"./_object-dp":116,"./_object-keys":124}],118:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":75,"./_has":88,"./_ie8-dom-define":91,"./_object-pie":125,"./_property-desc":133,"./_to-iobject":157,"./_to-primitive":160}],119:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":120,"./_to-iobject":157}],120:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":77,"./_object-keys-internal":123}],121:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],122:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":88,"./_shared-key":142,"./_to-object":159}],123:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":58,"./_has":88,"./_shared-key":142,"./_to-iobject":157}],124:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":77,"./_object-keys-internal":123}],125:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],126:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":69,"./_export":79,"./_fails":81}],127:[function(require,module,exports){
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

},{"./_descriptors":75,"./_object-keys":124,"./_object-pie":125,"./_to-iobject":157}],128:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":55,"./_global":87,"./_object-gopn":120,"./_object-gops":121}],129:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":87,"./_string-trim":151,"./_string-ws":152}],130:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":87,"./_string-trim":151,"./_string-ws":152}],131:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],132:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":55,"./_is-object":98,"./_new-promise-capability":113}],133:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],134:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":135}],135:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var $toString = require('./_function-to-string');
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":69,"./_function-to-string":86,"./_global":87,"./_has":88,"./_hide":89,"./_uid":164}],136:[function(require,module,exports){
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":64}],137:[function(require,module,exports){
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":83}],138:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],139:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":55,"./_ctx":71,"./_is-object":98,"./_object-gopd":118}],140:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":75,"./_global":87,"./_object-dp":116,"./_wks":169}],141:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":88,"./_object-dp":116,"./_wks":169}],142:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":143,"./_uid":164}],143:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":69,"./_global":87,"./_library":106}],144:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":50,"./_an-object":55,"./_wks":169}],145:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":81}],146:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":74,"./_to-integer":156}],147:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":74,"./_is-regexp":99}],148:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":74,"./_export":79,"./_fails":81}],149:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":74,"./_string-repeat":150,"./_to-length":158}],150:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":74,"./_to-integer":156}],151:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":74,"./_export":79,"./_fails":81,"./_string-ws":152}],152:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],153:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":65,"./_ctx":71,"./_dom-create":76,"./_global":87,"./_html":90,"./_invoke":93}],154:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":156}],155:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":156,"./_to-length":158}],156:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],157:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":74,"./_iobject":94}],158:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":156}],159:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":74}],160:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":98}],161:[function(require,module,exports){
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_an-instance":54,"./_array-copy-within":56,"./_array-fill":57,"./_array-includes":58,"./_array-methods":59,"./_classof":64,"./_ctx":71,"./_descriptors":75,"./_export":79,"./_fails":81,"./_global":87,"./_has":88,"./_hide":89,"./_is-array-iter":95,"./_is-object":98,"./_iter-detect":103,"./_iterators":105,"./_library":106,"./_object-create":115,"./_object-dp":116,"./_object-gopd":118,"./_object-gopn":120,"./_object-gpo":122,"./_property-desc":133,"./_redefine-all":134,"./_set-species":140,"./_species-constructor":144,"./_to-absolute-index":154,"./_to-index":155,"./_to-integer":156,"./_to-length":158,"./_to-object":159,"./_to-primitive":160,"./_typed":163,"./_typed-buffer":162,"./_uid":164,"./_wks":169,"./core.get-iterator-method":170,"./es6.array.iterator":181}],162:[function(require,module,exports){
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":54,"./_array-fill":57,"./_descriptors":75,"./_fails":81,"./_global":87,"./_hide":89,"./_library":106,"./_object-dp":116,"./_object-gopn":120,"./_redefine-all":134,"./_set-to-string-tag":141,"./_to-index":155,"./_to-integer":156,"./_to-length":158,"./_typed":163}],163:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":87,"./_hide":89,"./_uid":164}],164:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],165:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":87}],166:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":98}],167:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":69,"./_global":87,"./_library":106,"./_object-dp":116,"./_wks-ext":168}],168:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":169}],169:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":87,"./_shared":143,"./_uid":164}],170:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":64,"./_core":69,"./_iterators":105,"./_wks":169}],171:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":52,"./_array-copy-within":56,"./_export":79}],172:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":59,"./_export":79,"./_strict-method":145}],173:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":52,"./_array-fill":57,"./_export":79}],174:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":59,"./_export":79,"./_strict-method":145}],175:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":52,"./_array-methods":59,"./_export":79}],176:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":52,"./_array-methods":59,"./_export":79}],177:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":59,"./_export":79,"./_strict-method":145}],178:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":70,"./_ctx":71,"./_export":79,"./_is-array-iter":95,"./_iter-call":100,"./_iter-detect":103,"./_to-length":158,"./_to-object":159,"./core.get-iterator-method":170}],179:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":58,"./_export":79,"./_strict-method":145}],180:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":79,"./_is-array":96}],181:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":52,"./_iter-define":102,"./_iter-step":104,"./_iterators":105,"./_to-iobject":157}],182:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":79,"./_iobject":94,"./_strict-method":145,"./_to-iobject":157}],183:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":79,"./_strict-method":145,"./_to-integer":156,"./_to-iobject":157,"./_to-length":158}],184:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":59,"./_export":79,"./_strict-method":145}],185:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":70,"./_export":79,"./_fails":81}],186:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":60,"./_export":79,"./_strict-method":145}],187:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":60,"./_export":79,"./_strict-method":145}],188:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_cof":65,"./_export":79,"./_fails":81,"./_html":90,"./_to-absolute-index":154,"./_to-length":158}],189:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":59,"./_export":79,"./_strict-method":145}],190:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":50,"./_export":79,"./_fails":81,"./_strict-method":145,"./_to-object":159}],191:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":140}],192:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":79}],193:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":72,"./_export":79}],194:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":79,"./_fails":81,"./_to-object":159,"./_to-primitive":160}],195:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":73,"./_hide":89,"./_wks":169}],196:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":135}],197:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":63,"./_export":79}],198:[function(require,module,exports){
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":98,"./_object-dp":116,"./_object-gpo":122,"./_wks":169}],199:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":75,"./_object-dp":116}],200:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":68,"./_collection-strong":66,"./_validate-collection":166}],201:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":79,"./_math-log1p":109}],202:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":79}],203:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":79}],204:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":79,"./_math-sign":110}],205:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":79}],206:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":79}],207:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":79,"./_math-expm1":107}],208:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":79,"./_math-fround":108}],209:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":79}],210:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":79,"./_fails":81}],211:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":79}],212:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":79,"./_math-log1p":109}],213:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":79}],214:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":79,"./_math-sign":110}],215:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":79,"./_fails":81,"./_math-expm1":107}],216:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":79,"./_math-expm1":107}],217:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":79}],218:[function(require,module,exports){
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":65,"./_descriptors":75,"./_fails":81,"./_global":87,"./_has":88,"./_inherit-if-required":92,"./_object-create":115,"./_object-dp":116,"./_object-gopd":118,"./_object-gopn":120,"./_redefine":135,"./_string-trim":151,"./_to-primitive":160}],219:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":79}],220:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":79,"./_global":87}],221:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":79,"./_is-integer":97}],222:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":79}],223:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":79,"./_is-integer":97}],224:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":79}],225:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":79}],226:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":79,"./_parse-float":129}],227:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":79,"./_parse-int":130}],228:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"./_a-number-value":51,"./_export":79,"./_fails":81,"./_string-repeat":150,"./_to-integer":156}],229:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":51,"./_export":79,"./_fails":81}],230:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":79,"./_object-assign":114}],231:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":79,"./_object-create":115}],232:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":75,"./_export":79,"./_object-dps":117}],233:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":75,"./_export":79,"./_object-dp":116}],234:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":98,"./_meta":111,"./_object-sap":126}],235:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":118,"./_object-sap":126,"./_to-iobject":157}],236:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":119,"./_object-sap":126}],237:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":122,"./_object-sap":126,"./_to-object":159}],238:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":98,"./_object-sap":126}],239:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":98,"./_object-sap":126}],240:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":98,"./_object-sap":126}],241:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":79,"./_same-value":138}],242:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":124,"./_object-sap":126,"./_to-object":159}],243:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":98,"./_meta":111,"./_object-sap":126}],244:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":98,"./_meta":111,"./_object-sap":126}],245:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":79,"./_set-proto":139}],246:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":64,"./_redefine":135,"./_wks":169}],247:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":79,"./_parse-float":129}],248:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":79,"./_parse-int":130}],249:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":50,"./_an-instance":54,"./_classof":64,"./_core":69,"./_ctx":71,"./_export":79,"./_for-of":85,"./_global":87,"./_is-object":98,"./_iter-detect":103,"./_library":106,"./_microtask":112,"./_new-promise-capability":113,"./_perform":131,"./_promise-resolve":132,"./_redefine-all":134,"./_set-species":140,"./_set-to-string-tag":141,"./_species-constructor":144,"./_task":153,"./_user-agent":165,"./_wks":169}],250:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":50,"./_an-object":55,"./_export":79,"./_fails":81,"./_global":87}],251:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":50,"./_an-object":55,"./_bind":63,"./_export":79,"./_fails":81,"./_global":87,"./_is-object":98,"./_object-create":115}],252:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":55,"./_export":79,"./_fails":81,"./_object-dp":116,"./_to-primitive":160}],253:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":55,"./_export":79,"./_object-gopd":118}],254:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":55,"./_export":79,"./_iter-create":101}],255:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":55,"./_export":79,"./_object-gopd":118}],256:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":55,"./_export":79,"./_object-gpo":122}],257:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":55,"./_export":79,"./_has":88,"./_is-object":98,"./_object-gopd":118,"./_object-gpo":122}],258:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":79}],259:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":55,"./_export":79}],260:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":79,"./_own-keys":128}],261:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":55,"./_export":79}],262:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":79,"./_set-proto":139}],263:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":55,"./_export":79,"./_has":88,"./_is-object":98,"./_object-dp":116,"./_object-gopd":118,"./_object-gpo":122,"./_property-desc":133}],264:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":75,"./_fails":81,"./_flags":83,"./_global":87,"./_inherit-if-required":92,"./_is-regexp":99,"./_object-dp":116,"./_object-gopn":120,"./_redefine":135,"./_set-species":140,"./_wks":169}],265:[function(require,module,exports){
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_export":79,"./_regexp-exec":137}],266:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":75,"./_flags":83,"./_object-dp":116}],267:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_advance-string-index":53,"./_an-object":55,"./_fix-re-wks":82,"./_regexp-exec-abstract":136,"./_to-length":158}],268:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"./_advance-string-index":53,"./_an-object":55,"./_fix-re-wks":82,"./_regexp-exec-abstract":136,"./_to-integer":156,"./_to-length":158,"./_to-object":159}],269:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');

// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"./_an-object":55,"./_fix-re-wks":82,"./_regexp-exec-abstract":136,"./_same-value":138}],270:[function(require,module,exports){
'use strict';

var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var fails = require('./_fails');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"./_advance-string-index":53,"./_an-object":55,"./_fails":81,"./_fix-re-wks":82,"./_is-regexp":99,"./_regexp-exec":137,"./_regexp-exec-abstract":136,"./_species-constructor":144,"./_to-length":158}],271:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":55,"./_descriptors":75,"./_fails":81,"./_flags":83,"./_redefine":135,"./es6.regexp.flags":266}],272:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":68,"./_collection-strong":66,"./_validate-collection":166}],273:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":148}],274:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":148}],275:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":148}],276:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":148}],277:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":79,"./_string-at":146}],278:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":79,"./_fails-is-regexp":80,"./_string-context":147,"./_to-length":158}],279:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":148}],280:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":148}],281:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":148}],282:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":79,"./_to-absolute-index":154}],283:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":79,"./_fails-is-regexp":80,"./_string-context":147}],284:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":148}],285:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":102,"./_string-at":146}],286:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":148}],287:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":79,"./_to-iobject":157,"./_to-length":158}],288:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":79,"./_string-repeat":150}],289:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":148}],290:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":79,"./_fails-is-regexp":80,"./_string-context":147,"./_to-length":158}],291:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":148}],292:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":148}],293:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":148}],294:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":151}],295:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":55,"./_descriptors":75,"./_enum-keys":78,"./_export":79,"./_fails":81,"./_global":87,"./_has":88,"./_hide":89,"./_is-array":96,"./_is-object":98,"./_library":106,"./_meta":111,"./_object-create":115,"./_object-dp":116,"./_object-gopd":118,"./_object-gopn":120,"./_object-gopn-ext":119,"./_object-gops":121,"./_object-keys":124,"./_object-pie":125,"./_property-desc":133,"./_redefine":135,"./_set-to-string-tag":141,"./_shared":143,"./_to-iobject":157,"./_to-object":159,"./_to-primitive":160,"./_uid":164,"./_wks":169,"./_wks-define":167,"./_wks-ext":168}],296:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":55,"./_export":79,"./_fails":81,"./_global":87,"./_is-object":98,"./_set-species":140,"./_species-constructor":144,"./_to-absolute-index":154,"./_to-length":158,"./_typed":163,"./_typed-buffer":162}],297:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":79,"./_typed":163,"./_typed-buffer":162}],298:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],299:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],300:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],301:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],302:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],303:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],304:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],305:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":161}],306:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":161}],307:[function(require,module,exports){
'use strict';
var global = require('./_global');
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var validate = require('./_validate-collection');
var NATIVE_WEAK_MAP = require('./_validate-collection');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":59,"./_collection":68,"./_collection-weak":67,"./_global":87,"./_is-object":98,"./_meta":111,"./_object-assign":114,"./_redefine":135,"./_validate-collection":166}],308:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":68,"./_collection-weak":67,"./_validate-collection":166}],309:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":50,"./_add-to-unscopables":52,"./_array-species-create":62,"./_export":79,"./_flatten-into-array":84,"./_to-length":158,"./_to-object":159}],310:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":52,"./_array-includes":58,"./_export":79}],311:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":79,"./_object-to-array":127}],312:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":70,"./_export":79,"./_object-gopd":118,"./_own-keys":128,"./_to-iobject":157}],313:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":79,"./_object-to-array":127}],314:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":69,"./_export":79,"./_global":87,"./_promise-resolve":132,"./_species-constructor":144}],315:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":79,"./_string-pad":149,"./_user-agent":165}],316:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":79,"./_string-pad":149,"./_user-agent":165}],317:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":151}],318:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":151}],319:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":167}],320:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":87,"./_hide":89,"./_iterators":105,"./_object-keys":124,"./_redefine":135,"./_wks":169,"./es6.array.iterator":181}],321:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":79,"./_task":153}],322:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":79,"./_global":87,"./_user-agent":165}],323:[function(require,module,exports){
require('../modules/web.timers');
require('../modules/web.immediate');
require('../modules/web.dom.iterable');
module.exports = require('../modules/_core');

},{"../modules/_core":69,"../modules/web.dom.iterable":320,"../modules/web.immediate":321,"../modules/web.timers":322}],324:[function(require,module,exports){
(function (global){(function (){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

require("@babel/polyfill/noConflict");

require("mdn-polyfills/NodeList.prototype.forEach");

require("mdn-polyfills/Node.prototype.remove");

require("mdn-polyfills/Node.prototype.before");

require("mdn-polyfills/Element.prototype.closest");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var hlp = /*#__PURE__*/function () {
  function hlp() {
    (0, _classCallCheck2.default)(this, hlp);
  }

  (0, _createClass2.default)(hlp, null, [{
    key: "x",
    value: function x(input) {
      if (typeof input === 'function') {
        try {
          input = input();
          return this.x(input);
        } catch (e) {
          return false;
        }
      }

      if (input === null || input === false || typeof input === 'string' && input.trim() == '' || (0, _typeof2.default)(input) === 'object' && Object.keys(input).length === 0 && input.constructor === Object || typeof input === 'undefined' || Array.isArray(input) && input.length === 0 || Array.isArray(input) && input.length === 1 && input[0] === '') {
        return false;
      }

      return true;
    }
  }, {
    key: "nx",
    value: function nx(input) {
      return !this.x(input);
    }
  }, {
    key: "true",
    value: function _true(input) {
      if (typeof input === 'function') {
        try {
          input = input();
          return this.true(input);
        } catch (e) {
          return false;
        }
      }

      if (input === undefined) {
        return false;
      }

      if (input === null) {
        return false;
      }

      if (input === false) {
        return false;
      }

      if (Array.isArray(input) && input.length === 0) {
        return false;
      }

      if (Array.isArray(input) && hlp.first(input) === '') {
        return false;
      }

      if ((0, _typeof2.default)(input) === 'object' && Object.keys(input).length === 0 && input.constructor === Object) {
        return false;
      }

      if (input === 0) {
        return false;
      }

      if (input === '0') {
        return false;
      }

      if (input === '') {
        return false;
      }

      if (input === ' ') {
        return false;
      }

      if (input === 'null') {
        return false;
      }

      if (input === 'false') {
        return false;
      }

      return true;
    }
  }, {
    key: "false",
    value: function _false(input) {
      if (typeof input === 'function') {
        try {
          input = input();
          return this.false(input);
        } catch (e) {
          return false;
        }
      }

      if (input === undefined) {
        return false;
      }

      if (input === null) {
        return false;
      }

      if (input === false) {
        return true;
      }

      if (Array.isArray(input) && input.length === 0) {
        return false;
      }

      if (Array.isArray(input) && hlp.first(input) === '') {
        return false;
      }

      if ((0, _typeof2.default)(input) === 'object' && Object.keys(input).length === 0 && input.constructor === Object) {
        return false;
      }

      if (input === 0) {
        return true;
      }

      if (input === '0') {
        return true;
      }

      if (input === '') {
        return false;
      }

      if (input === ' ') {
        return false;
      }

      if (input === 'null') {
        return false;
      }

      if (input === 'false') {
        return true;
      }

      return false;
    }
  }, {
    key: "v",
    value: function v() {
      if (this.nx(arguments)) {
        return '';
      }

      for (var i = 0; i < arguments.length; i++) {
        if (this.x(arguments[i])) {
          return arguments[i];
        }
      }

      return '';
    }
  }, {
    key: "loop",
    value: function loop(input, fun) {
      if (this.nx(input)) {
        return null;
      }

      if (Array.isArray(input)) {
        input.forEach(function (input__value, input__key) {
          fun(input__value, input__key);
        });
      } else if ((0, _typeof2.default)(input) === 'object') {
        Object.entries(input).forEach(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              input__key = _ref2[0],
              input__value = _ref2[1];

          fun(input__value, input__key);
        });
      }
    }
  }, {
    key: "map",
    value: function map(obj, fn, ctx) {
      return Object.keys(obj).reduce(function (a, b) {
        a[b] = fn.call(ctx || null, b, obj[b]);
        return a;
      }, {});
    }
  }, {
    key: "first",
    value: function first(input) {
      if (Array.isArray(input)) {
        var ret = null;
        input.forEach(function (input__value, input__key) {
          if (ret === null) {
            ret = input__value;
          }
        });
        return ret;
      }

      if ((0, _typeof2.default)(input) === 'object') {
        var ret = null;
        Object.entries(input).forEach(function (_ref3) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
              input__key = _ref4[0],
              input__value = _ref4[1];

          if (ret === null) {
            ret = input__value;
          }
        });
        return ret;
      }

      return null;
    }
  }, {
    key: "last",
    value: function last(input) {
      if (Array.isArray(input)) {
        var ret = null;
        input.forEach(function (input__value, input__key) {
          ret = input__value;
        });
        return ret;
      }

      if ((0, _typeof2.default)(input) === 'object') {
        var _ret = null;
        Object.entries(input).forEach(function (_ref5) {
          var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
              input__key = _ref6[0],
              input__value = _ref6[1];

          _ret = input__value;
        });
        return _ret;
      }

      return null;
    }
  }, {
    key: "rand",
    value: function rand(input) {
      if (Array.isArray(input)) {
        return input[Math.floor(Math.random() * input.length)];
      }

      if ((0, _typeof2.default)(input) === 'object') {
        var input = Object.values(input);
        return input[Math.floor(Math.random() * input.length)];
      }

      return null;
    }
  }, {
    key: "random_string",
    value: function random_string() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
      var chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (chars === null) {
        chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
      }

      var chars_length = chars.length,
          random_string = '';

      for (var i = 0; i < length; i++) {
        random_string += chars[~~(Math.random() * (chars_length - 1 - 0 + 1)) + 0];
      }

      return random_string;
    }
  }, {
    key: "isInteger",
    value: function isInteger(value) {
      return !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));
    }
  }, {
    key: "random_int",
    value: function random_int() {
      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99999;

      if (!this.isInteger(min) || !this.isInteger(max)) {
        return false;
      }

      if (min > max) {
        var _ref7 = [max, min];
        min = _ref7[0];
        max = _ref7[1];
      }

      return ~~(Math.random() * (max - min + 1)) + min;
    }
  }, {
    key: "capitalize",
    value: function capitalize() {
      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (string === null) {
        return string;
      }

      if (string === '') {
        return string;
      }

      return string.charAt(0).toUpperCase() + string.slice(1);
    }
  }, {
    key: "cookieExists",
    value: function cookieExists(cookie_name) {
      if (document.cookie !== undefined && this.cookieGet(cookie_name) !== null) {
        return true;
      }

      return false;
    }
  }, {
    key: "cookieGet",
    value: function cookieGet(cookie_name) {
      var cookie_match = document.cookie.match(new RegExp(cookie_name + '=([^;]+)'));

      if (cookie_match) {
        return decodeURIComponent(cookie_match[1]);
      }

      return null;
    }
  }, {
    key: "cookieSet",
    value: function cookieSet(cookie_name, cookie_value, days) {
      var samesite = '';

      if (window.location.protocol.indexOf('https') > -1) {
        samesite = '; SameSite=None; Secure';
      }

      document.cookie = cookie_name + '=' + encodeURIComponent(cookie_value) + '; ' + 'expires=' + new Date(new Date().getTime() + days * 24 * 60 * 60 * 1000).toUTCString() + '; path=/' + samesite + '; domain=' + this.urlHostTopLevel();
    }
  }, {
    key: "cookieDelete",
    value: function cookieDelete(cookie_name) {
      var samesite = '';

      if (window.location.protocol.indexOf('https') > -1) {
        samesite = '; SameSite=None; Secure';
      }

      document.cookie = cookie_name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/' + samesite + '; domain=' + this.urlHostTopLevel();
    }
  }, {
    key: "getParam",
    value: function getParam(variable) {
      var url = window.location.search;

      if (this.nx(url)) {
        return null;
      }

      var query = url.substring(1),
          vars = query.split('&');

      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split('=');

        if (pair[0] == variable && this.x(pair[1])) {
          return pair[1];
        }
      }

      return null;
    }
  }, {
    key: "getDevice",
    value: function getDevice() {
      if (this.isPhone()) {
        return 'phone';
      }

      if (this.isTablet()) {
        return 'tablet';
      }

      return 'desktop';
    }
  }, {
    key: "isPhone",
    value: function isPhone() {
      // based on detectmobilebrowsers.com
      var a = navigator.userAgent || navigator.vendor || window.opera;
      return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
    }
  }, {
    key: "isTablet",
    value: function isTablet() {
      // based on detectmobilebrowsers.com
      var a = navigator.userAgent || navigator.vendor || window.opera;
      return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
    }
  }, {
    key: "isDesktop",
    value: function isDesktop() {
      return !this.isPhone() && !this.isTablet();
    }
  }, {
    key: "isMobile",
    value: function isMobile() {
      // viewport width based OR phone based
      if (window.innerWidth < 750 || this.isPhone()) {
        return true;
      }

      return false;
    }
  }, {
    key: "isTouch",
    value: function isTouch() {
      return 'ontouchstart' in window || navigator.maxTouchPoints || false;
    }
  }, {
    key: "isMac",
    value: function isMac() {
      return hlp.getOs() === 'mac';
    }
  }, {
    key: "isLinux",
    value: function isLinux() {
      return hlp.getOs() === 'linux';
    }
  }, {
    key: "isWindows",
    value: function isWindows() {
      return hlp.getOs() === 'windows';
    }
  }, {
    key: "getOs",
    value: function getOs() {
      var userAgent = window.navigator.userAgent,
          platform = window.navigator.platform,
          macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
          windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
          iosPlatforms = ['iPhone', 'iPad', 'iPod'],
          os = 'unknown';

      if (macosPlatforms.indexOf(platform) !== -1) {
        os = 'mac';
      } else if (iosPlatforms.indexOf(platform) !== -1) {
        os = 'mac';
      } else if (windowsPlatforms.indexOf(platform) !== -1) {
        os = 'windows';
      } else if (/Android/.test(userAgent)) {
        os = 'linux';
      } else if (/Linux/.test(platform)) {
        os = 'linux';
      }

      return os;
    }
  }, {
    key: "getBrowser",
    value: function getBrowser() {
      var browser_name = '',
          isIE =
      /*@cc_on!@*/
      false || !!document.documentMode,
          isEdge = !isIE && !!window.StyleMedia;

      if (navigator.userAgent.indexOf('Opera') != -1 || navigator.userAgent.indexOf('OPR') != -1) {
        browser_name = 'opera';
      } else if (navigator.userAgent.indexOf('Chrome') != -1 && !isEdge) {
        browser_name = 'chrome';
      } else if (navigator.userAgent.indexOf('Safari') != -1 && !isEdge) {
        browser_name = 'safari';
      } else if (navigator.userAgent.indexOf('Firefox') != -1) {
        browser_name = 'firefox';
      } else if (navigator.userAgent.indexOf('MSIE') != -1 || !!document.documentMode == true) {
        //IF IE > 10
        browser_name = 'ie';
      } else if (isEdge) {
        browser_name = 'edge';
      } else {
        browser_name = 'unknown';
      }

      return browser_name;
    }
  }, {
    key: "isObject",
    value: function isObject(a) {
      return !!a && a.constructor === Object;
    }
  }, {
    key: "isArray",
    value: function isArray(a) {
      return !!a && a.constructor === Array;
    }
  }, {
    key: "isString",
    value: function isString(string) {
      return typeof string === 'string' || string instanceof String;
    }
  }, {
    key: "isDate",
    value: function isDate(string) {
      if (this.nx(string)) {
        return false;
      } // if string is of object date


      if (Object.prototype.toString.call(string) === '[object Date]') {
        return true;
      } // if this is not a string


      if (!this.isString(string)) {
        return false;
      } // strong check


      if (string.split('-').length !== 3) {
        return false;
      }

      var day = parseInt(string.split('-')[2]),
          month = parseInt(string.split('-')[1]),
          year = parseInt(string.split('-')[0]),
          date = new Date();
      date.setFullYear(year, month - 1, day);

      if (date.getFullYear() == year && date.getMonth() + 1 == month && date.getDate() == day) {
        return true;
      }

      return false;
    }
  }, {
    key: "formatDate",
    value: function formatDate(format) {
      var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (date === false || date === true || date === null || date === '') {
        date = new Date();
      } else if ((0, _typeof2.default)(date) !== 'object') {
        date = new Date(date.replace(/-/g, '/'));
      }

      var string = '',
          mo = date.getMonth(),
          m1 = mo + 1,
          dow = date.getDay(),
          d = date.getDate(),
          y = date.getFullYear(),
          h = date.getHours(),
          mi = date.getMinutes(),
          s = date.getSeconds();

      for (var i = 0, len = format.length; i < len; i++) {
        switch (format[i]) {
          case 'j':
            string += d;
            break;

          case 'd':
            string += d < 10 ? '0' + d : d;
            break;

          case 'l':
            var days = Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
            string += days[dow];
            break;

          case 'w':
            string += dow;
            break;

          case 'D':
            days = Array('Sun', 'Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat');
            string += days[dow];
            break;

          case 'm':
            string += m1 < 10 ? '0' + m1 : m1;
            break;

          case 'n':
            string += m1;
            break;

          case 'F':
            var months = Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
            string += months[mo];
            break;

          case 'M':
            months = Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
            string += months[mo];
            break;

          case 'Y':
            string += y;
            break;

          case 'y':
            string += y.toString().slice(-2);
            break;

          case 'H':
            string += h < 10 ? '0' + h : h;
            break;

          case 'g':
            var hour = h === 0 ? 12 : h;
            string += hour > 12 ? hour - 12 : hour;
            break;

          case 'h':
            hour = h === 0 ? 12 : h;
            hour = hour > 12 ? hour - 12 : hour;
            string += hour < 10 ? '0' + hour : hour;
            break;

          case 'a':
            string += h < 12 ? 'am' : 'pm';
            break;

          case 'i':
            string += mi < 10 ? '0' + mi : mi;
            break;

          case 's':
            string += s < 10 ? '0' + s : s;
            break;

          case 'c':
            string += date.toISOString();
            break;

          default:
            string += format[i];
        }
      }

      return string;
    }
  }, {
    key: "deepCopy",
    value: function deepCopy(obj) {
      var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new WeakMap();
      if (Object(obj) !== obj) return obj; // primitives

      if (hash.has(obj)) return hash.get(obj); // cyclic reference

      var result = obj instanceof Date ? new Date(obj) : obj instanceof RegExp ? new RegExp(obj.source, obj.flags) : obj.constructor ? new obj.constructor() : Object.create(null);
      hash.set(obj, result);
      if (obj instanceof Map) Array.from(obj, function (_ref8) {
        var _ref9 = (0, _slicedToArray2.default)(_ref8, 2),
            key = _ref9[0],
            val = _ref9[1];

        return result.set(key, hlp.deepCopy(val, hash));
      });
      return Object.assign.apply(Object, [result].concat((0, _toConsumableArray2.default)(Object.keys(obj).map(function (key) {
        return (0, _defineProperty2.default)({}, key, hlp.deepCopy(obj[key], hash));
      }))));
    }
  }, {
    key: "jsonStringToObject",
    value: function jsonStringToObject(string) {
      if (this.nx(string) || !this.isString(string)) {
        return null;
      }

      try {
        return JSON.parse(string);
      } catch (error) {
        return null;
      }
    }
  }, {
    key: "isJsonString",
    value: function isJsonString(string) {
      if (this.nx(string) || !this.isString(string)) {
        return false;
      }

      try {
        var json = JSON.parse(string);
        return true;
      } catch (error) {
        return false;
      }
    }
  }, {
    key: "jsonObjectToString",
    value: function jsonObjectToString(object) {
      try {
        return JSON.stringify(object);
      } catch (error) {
        return null;
      }
    }
  }, {
    key: "uuid",
    value: function uuid() {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }

      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }
  }, {
    key: "guid",
    value: function guid() {
      return this.uuid();
    }
  }, {
    key: "replaceAll",
    value: function replaceAll(string, search, replace) {
      return string.split(search).join(replace);
    }
  }, {
    key: "replaceLast",
    value: function replaceLast(string, search, replace) {
      var n = string.lastIndexOf(search);
      string = string.slice(0, n) + string.slice(n).replace(search, replace);
      return string;
    }
  }, {
    key: "replaceFirst",
    value: function replaceFirst(string, search, replace) {
      return string.replace(search, replace);
    }
  }, {
    key: "findAllPositions",
    value: function findAllPositions(searchStr, str) {
      var searchStrLen = searchStr.length,
          startIndex = 0,
          index,
          indices = [];

      if (searchStrLen == 0) {
        return [];
      }

      while ((index = str.indexOf(searchStr, startIndex)) > -1) {
        indices.push(index);
        startIndex = index + searchStrLen;
      }

      return indices;
    }
  }, {
    key: "findAllPositionsCaseInsensitive",
    value: function findAllPositionsCaseInsensitive(searchStr, str) {
      var searchStrLen = searchStr.length,
          startIndex = 0,
          index,
          indices = [];

      if (searchStrLen == 0) {
        return [];
      }

      while ((index = this.indexOfCaseInsensitive(searchStr, str, startIndex)) > -1) {
        indices.push(index);
        startIndex = index + searchStrLen;
      }

      return indices;
    }
  }, {
    key: "countAllOccurences",
    value: function countAllOccurences(value, str) {
      var regExp = new RegExp(value, 'g');
      return (str.match(regExp) || []).length;
    }
  }, {
    key: "countAllOccurencesCaseInsensitive",
    value: function countAllOccurencesCaseInsensitive(value, str) {
      var regExp = new RegExp(value, 'gi');
      return (str.match(regExp) || []).length;
    }
  }, {
    key: "indexOfCaseInsensitive",
    value: function indexOfCaseInsensitive(searchStr, str, offset) {
      return str.toLowerCase().indexOf(searchStr.toLowerCase(), offset);
    }
  }, {
    key: "highlight",
    value: function highlight(string, query) {
      var strip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var strip_length = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 500;

      if (this.nx(string) || this.nx(query)) {
        return string;
      }

      if (strip === true) {
        var dots = '...'; // get all query begin positions in spot

        var _positions = this.findAllPositionsCaseInsensitive(query, string); // strip away parts


        var words = string.split(' ');
        var i = 0;
        words.forEach(function (words__value, words__key) {
          var strip_now = true;

          _positions.forEach(function (positions__value) {
            if (i >= positions__value - strip_length && i <= positions__value + query.length + strip_length - 1) {
              strip_now = false;
            }
          });

          if (strip_now === true) {
            words[words__key] = dots;
          }

          i += words__value.length + 1;
        });
        string = words.join(' ');

        while (string.indexOf(dots + ' ' + dots) > -1) {
          string = this.replaceAll(string, dots + ' ' + dots, dots);
        }

        string = string.trim();
      } // again: get all query begin positions in spot


      var positions = this.findAllPositionsCaseInsensitive(query, string); // wrap span element around them

      var wrap_begin = '<strong class="highlight">';
      var wrap_end = '</strong>';

      for (var x = 0; x < positions.length; x++) {
        string = string.substring(0, positions[x]) + wrap_begin + string.substring(positions[x], positions[x] + query.length) + wrap_end + string.substring(positions[x] + query.length); // shift other positions

        for (var y = x + 1; y < positions.length; y++) {
          positions[y] = positions[y] + wrap_begin.length + wrap_end.length;
        }
      }

      return string;
    }
  }, {
    key: "get",
    value: function get(url) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.call('GET', url, args);
    }
  }, {
    key: "post",
    value: function post(url) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.call('POST', url, args);
    }
  }, {
    key: "call",
    value: function call(method, url) {
      var _this2 = this;

      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (args === null) {
        args = {};
      }

      if (!('data' in args)) {
        args.data = {};
      }

      if (!('headers' in args)) {
        args.headers = null;
      }

      if (!('throttle' in args)) {
        args.throttle = 0;
      }

      if (!('allow_errors' in args)) {
        args.allow_errors = true;
      }

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          if (url.indexOf('http') !== 0) {
            url = hlp.baseUrl() + '/' + url;
          }

          var xhr = new XMLHttpRequest();
          xhr.open(method, url, true);

          if (method === 'POST') {
            if ('data' in args && args.data !== null && (0, _typeof2.default)(args.data) === 'object' && !(args.data instanceof FormData)) {
              xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
              args.data = JSON.stringify(args.data);
            }

            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          }

          if (_this2.x(args.headers)) {
            Object.entries(args.headers).forEach(function (_ref11) {
              var _ref12 = (0, _slicedToArray2.default)(_ref11, 2),
                  headers__key = _ref12[0],
                  headers__value = _ref12[1];

              xhr.setRequestHeader(headers__key, headers__value);
            });
          }

          xhr.onload = function () {
            if (xhr.readyState != 4 || args.allow_errors !== true && xhr.status != 200 && xhr.status != 304) {
              if (_this2.isJsonString(xhr.responseText)) {
                reject(_this2.jsonStringToObject(xhr.responseText));
              } else {
                reject(xhr.responseText);
              }
            }

            if (_this2.isJsonString(xhr.responseText)) {
              resolve(_this2.jsonStringToObject(xhr.responseText));
            } else {
              resolve(xhr.responseText);
            }
          };

          xhr.onerror = function () {
            reject([xhr.readyState, xhr.status, xhr.statusText]);
          };

          if (method === 'GET') {
            xhr.send(null);
          }

          if (method === 'POST') {
            xhr.send(args.data);
          }
        }, args.throttle);
      });
    }
  }, {
    key: "onResizeHorizontal",
    value: function onResizeHorizontal(fun) {
      var windowWidth = window.innerWidth,
          windowWidthNew,
          timeout;
      window.addEventListener('resize', function () {
        windowWidthNew = window.innerWidth;

        if (windowWidthNew != windowWidth) {
          windowWidth = windowWidthNew;

          if (timeout) {
            clearTimeout(timeout);
          }

          timeout = window.setTimeout(function () {
            fun();
          }, 250);
        }
      });
      fun();
    }
  }, {
    key: "onResizeVertical",
    value: function onResizeVertical(fun) {
      var windowHeight = window.innerHeight,
          windowHeightNew,
          timeout;
      window.addEventListener('resize', function () {
        windowHeightNew = window.innerHeight;

        if (windowHeightNew != windowHeight) {
          windowHeight = windowHeightNew;

          if (timeout) {
            clearTimeout(timeout);
          }

          timeout = window.setTimeout(function () {
            fun();
          }, 250);
        }
      });
      fun();
    }
  }, {
    key: "uniqueArray",
    value: function uniqueArray(array) {
      var seen = {},
          ret_arr = [];

      for (var i = 0; i < array.length; i++) {
        if (!(array[i] in seen)) {
          ret_arr.push(array[i]);
          seen[array[i]] = true;
        }
      }

      return ret_arr;
    }
  }, {
    key: "charToInt",
    value: function charToInt(val) {
      val = val.toUpperCase();
      var base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
          i,
          j,
          result = 0;

      for (i = 0, j = val.length - 1; i < val.length; i += 1, j -= 1) {
        result += Math.pow(base.length, j) * (base.indexOf(val[i]) + 1);
      }

      return result;
    }
  }, {
    key: "intToChar",
    value: function intToChar(num) {
      for (var ret = '', a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {
        ret = String.fromCharCode(parseInt(num % b / a) + 65) + ret;
      }

      return ret;
    }
  }, {
    key: "slugify",
    value: function slugify(text) {
      return text.toString().toLowerCase().trim().split('ä').join('ae').split('ö').join('oe').split('ü').join('ue').split('ß').join('ss').replace(/[^\w\s-]/g, '') // remove non-word [a-z0-9_], non-whitespace, non-hyphen characters
      .replace(/[\s_-]+/g, '-') // swap any length of whitespace, underscore, hyphen characters with a single -
      .replace(/^-+|-+$/g, ''); // remove leading, trailing -
    }
  }, {
    key: "incChar",
    value: function incChar(char) {
      var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return this.intToChar(this.charToInt(char) + shift);
    }
  }, {
    key: "decChar",
    value: function decChar(char) {
      var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return this.intToChar(this.charToInt(char) - shift);
    }
  }, {
    key: "range",
    value: function range(start, end) {
      var range = [],
          typeofStart = (0, _typeof2.default)(start),
          typeofEnd = (0, _typeof2.default)(end),
          step = 1;

      if (typeofStart == 'undefined' || typeofEnd == 'undefined' || typeofStart != typeofEnd) {
        return null;
      }

      if (end < start) {
        step = -step;
      }

      if (typeofStart == 'number') {
        while (step > 0 ? end >= start : end <= start) {
          range.push(start);
          start += step;
        }
      } else if (typeofStart == 'string') {
        if (start.length != 1 || end.length != 1) {
          return null;
        }

        start = start.charCodeAt(0);
        end = end.charCodeAt(0);

        while (step > 0 ? end >= start : end <= start) {
          range.push(String.fromCharCode(start));
          start += step;
        }
      } else {
        return null;
      }

      return range;
    }
  }, {
    key: "dateToWeek",
    value: function dateToWeek() {
      var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (d === null) {
        d = new Date();
      }

      d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
      d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
      var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)),
          weekNo = Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
      return weekNo;
    }
  }, {
    key: "weekToDate",
    value: function weekToDate(w, y) {
      var simple = new Date(y, 0, 1 + (w - 1) * 7),
          dow = simple.getDay(),
          ISOweekStart = simple;

      if (dow <= 4) {
        ISOweekStart.setDate(simple.getDate() - simple.getDay() + 1);
      } else {
        ISOweekStart.setDate(simple.getDate() + 8 - simple.getDay());
      }

      ISOweekStart.setUTCHours(0, 0, 0, 0);
      return ISOweekStart;
    }
  }, {
    key: "addDays",
    value: function addDays(date, days) {
      var result = new Date(date);
      result.setDate(result.getDate() + days);
      return result;
    }
  }, {
    key: "objectsAreEqual",
    value: function objectsAreEqual(x, y) {
      var _this = this;

      if (x === null || x === undefined || y === null || y === undefined) {
        return x === y;
      }

      if (x.constructor !== y.constructor) {
        return false;
      }

      if (x instanceof Function) {
        return x === y;
      }

      if (x instanceof RegExp) {
        return x === y;
      }

      if (x === y || x.valueOf() === y.valueOf()) {
        return true;
      }

      if (Array.isArray(x) && x.length !== y.length) {
        return false;
      }

      if (x instanceof Date) {
        return false;
      }

      if (!(x instanceof Object)) {
        return false;
      }

      if (!(y instanceof Object)) {
        return false;
      }

      var p = Object.keys(x);
      return Object.keys(y).every(function (i) {
        return p.indexOf(i) !== -1;
      }) && p.every(function (i) {
        return _this.objectsAreEqual(x[i], y[i]);
      });
    }
  }, {
    key: "containsObject",
    value: function containsObject(obj, list) {
      var x;

      for (x in list) {
        if (list.hasOwnProperty(x) && this.objectsAreEqual(list[x], obj)) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "fadeOut",
    value: function fadeOut(el) {
      var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

      if (speed <= 25) {
        speed = 25;
      }

      return new Promise(function (resolve) {
        el.style.opacity = 1;

        (function fade() {
          if ((el.style.opacity -= 25 / speed) < 0) {
            el.style.display = 'none';
            resolve();
          } else {
            requestAnimationFrame(fade);
          }
        })();
      });
    }
  }, {
    key: "fadeIn",
    value: function fadeIn(el) {
      var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

      if (speed <= 25) {
        speed = 25;
      }

      return new Promise(function (resolve) {
        el.style.opacity = 0;
        el.style.display = 'block';

        (function fade() {
          var val = parseFloat(el.style.opacity);

          if (!((val += 25 / speed) > 1)) {
            el.style.opacity = val;
            requestAnimationFrame(fade);
          } else {
            resolve();
          }
        })();
      });
    }
  }, {
    key: "scrollTop",
    value: function scrollTop() {
      var doc = document.documentElement;
      return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    }
  }, {
    key: "scrollLeft",
    value: function scrollLeft() {
      var doc = document.documentElement;
      return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    }
  }, {
    key: "offsetTop",
    value: function offsetTop(el) {
      return el.getBoundingClientRect().top + window.pageYOffset - document.documentElement.clientTop;
    }
  }, {
    key: "offsetLeft",
    value: function offsetLeft(el) {
      return el.getBoundingClientRect().left + window.pageXOffset - document.documentElement.clientLeft;
    }
  }, {
    key: "offsetRight",
    value: function offsetRight(el) {
      return el.getBoundingClientRect().left + window.pageXOffset - document.documentElement.clientLeft + el.offsetWidth;
    }
  }, {
    key: "offsetBottom",
    value: function offsetBottom(el) {
      return el.getBoundingClientRect().top + window.pageYOffset - document.documentElement.clientTop + el.offsetHeight;
    }
  }, {
    key: "documentHeight",
    value: function documentHeight() {
      return Math.max(document.body.offsetHeight, document.body.scrollHeight, document.documentElement.clientHeight, document.documentElement.offsetHeight, document.documentElement.scrollHeight);
    }
  }, {
    key: "documentWidth",
    value: function documentWidth() {
      return document.documentElement.clientWidth || document.body.clientWidth;
    }
  }, {
    key: "windowWidth",
    value: function windowWidth() {
      return window.innerWidth;
    }
  }, {
    key: "windowHeight",
    value: function windowHeight() {
      return window.innerHeight;
    }
  }, {
    key: "windowWidthWithoutScrollbar",
    value: function windowWidthWithoutScrollbar() {
      return document.documentElement.clientWidth || document.body.clientWidth;
    }
  }, {
    key: "windowHeightWithoutScrollbar",
    value: function windowHeightWithoutScrollbar() {
      return document.documentElement.clientHeight || document.body.clientHeight;
    }
  }, {
    key: "outerWidthWithMargin",
    value: function outerWidthWithMargin(el) {
      return el.offsetWidth + parseInt(getComputedStyle(el).marginLeft) + parseInt(getComputedStyle(el).marginRight);
    }
  }, {
    key: "outerHeightWithMargin",
    value: function outerHeightWithMargin(el) {
      return el.offsetHeight + parseInt(getComputedStyle(el).marginTop) + parseInt(getComputedStyle(el).marginBottom);
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(to) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
      return new Promise(function (resolve) {
        if (!hlp.isNumeric(to)) {
          to = to.getBoundingClientRect().top + window.pageYOffset - document.documentElement.clientTop;
        }

        var element = document.scrollingElement || document.documentElement,
            start = element.scrollTop,
            change = to - start,
            startDate = +new Date(),
            // t = current time
        // b = start value
        // c = change in value
        // d = duration
        easeInOutQuad = function easeInOutQuad(t, b, c, d) {
          t /= d / 2;
          if (t < 1) return c / 2 * t * t + b;
          t--;
          return -c / 2 * (t * (t - 2) - 1) + b;
        },
            easeInOutCirc = function easeInOutCirc(t, b, c, d) {
          t /= d / 2;
          if (t < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
          t -= 2;
          return c / 2 * (Math.sqrt(1 - t * t) + 1) + b;
        },
            animateScroll = function animateScroll() {
          var currentDate = +new Date();
          var currentTime = currentDate - startDate;
          element.scrollTop = parseInt(easeInOutCirc(currentTime, start, change, duration));

          if (currentTime < duration) {
            requestAnimationFrame(animateScroll);
          } else {
            element.scrollTop = to;
            resolve();
          }
        };

        animateScroll();
      });
    }
  }, {
    key: "loadJs",
    value: function loadJs(urls) {
      if (!hlp.isArray(urls)) {
        urls = [urls];
      }

      var promises = [];
      hlp.loop(urls, function (urls__value, urls__key) {
        promises.push(new Promise(function (resolve, reject) {
          var script = document.createElement('script');
          script.src = urls__value;

          script.onload = function () {
            resolve();
          };

          document.head.appendChild(script);
        }));
      });
      return Promise.all(promises);
    }
  }, {
    key: "loadJsSequentially",
    value: function () {
      var _loadJsSequentially = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(urls) {
        var _iterator, _step, urls__value;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!hlp.isArray(urls)) {
                  urls = [urls];
                }

                _iterator = _createForOfIteratorHelper(urls);
                _context.prev = 2;

                _iterator.s();

              case 4:
                if ((_step = _iterator.n()).done) {
                  _context.next = 10;
                  break;
                }

                urls__value = _step.value;
                _context.next = 8;
                return hlp.loadJs(urls__value);

              case 8:
                _context.next = 4;
                break;

              case 10:
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](2);

                _iterator.e(_context.t0);

              case 15:
                _context.prev = 15;

                _iterator.f();

                return _context.finish(15);

              case 18:
                return _context.abrupt("return");

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 12, 15, 18]]);
      }));

      function loadJsSequentially(_x) {
        return _loadJsSequentially.apply(this, arguments);
      }

      return loadJsSequentially;
    }()
  }, {
    key: "triggerAfterAllImagesLoaded",
    value: function triggerAfterAllImagesLoaded(selectorContainer, selectorImage, fn) {
      var _this3 = this;

      window.addEventListener('load', function (e) {
        if (document.querySelector(selectorContainer + ' ' + selectorImage) !== null) {
          document.querySelectorAll(selectorContainer + ' ' + selectorImage).forEach(function (el) {
            _this3.triggerAfterAllImagesLoadedBindLoadEvent(el, selectorContainer, selectorImage, fn);
          });
        }
      });
      document.addEventListener('DOMContentLoaded', function () {
        if (document.querySelector(selectorContainer) !== null) {
          new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
              if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach(function (el) {
                  _this3.triggerAfterAllImagesLoadedHandleEl(el, selectorContainer, selectorImage, fn);
                });
              } else if (mutation.type === 'attributes' && mutation.attributeName === 'src' && mutation.target.classList.contains(selectorImage.replace('.', '')) && mutation.oldValue !== mutation.target.getAttribute('src')) {
                _this3.triggerAfterAllImagesLoadedHandleEl(mutation.target, selectorContainer, selectorImage, fn);
              }
            });
          }).observe(document.querySelector(selectorContainer), {
            attributes: true,
            childList: true,
            characterData: false,
            subtree: true,
            attributeOldValue: true,
            characterDataOldValue: false
          });
        }
      });
    }
  }, {
    key: "triggerAfterAllImagesLoadedHandleEl",
    value: function triggerAfterAllImagesLoadedHandleEl(el, selectorContainer, selectorImage, fn) {
      var _this4 = this;

      if (el.nodeType === Node.ELEMENT_NODE) {
        el.classList.remove('loaded-img');
        el.closest(selectorContainer).classList.remove('loaded-all'); // only bind if not yet binded

        if (!el.classList.contains('binded-trigger')) {
          el.classList.add('binded-trigger');
          el.addEventListener('load', function () {
            _this4.triggerAfterAllImagesLoadedBindLoadEvent(el, selectorContainer, selectorImage, fn);
          });
        }
      }
    }
  }, {
    key: "triggerAfterAllImagesLoadedBindLoadEvent",
    value: function triggerAfterAllImagesLoadedBindLoadEvent(el, selectorContainer, selectorImage, fn) {
      el.classList.add('loaded-img');

      if (el.closest(selectorContainer).querySelectorAll('.loaded-img').length === el.closest(selectorContainer).querySelectorAll(selectorImage).length) {
        el.closest(selectorContainer).classList.add('loaded-all');
        fn();
      }
    }
  }, {
    key: "isVisible",
    value: function isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
    }
  }, {
    key: "isVisibleInViewport",
    value: function isVisibleInViewport(el) {
      if (!this.isVisible(el)) {
        return false;
      }

      var rect = el.getBoundingClientRect();
      return !(rect.bottom < 0 || rect.right < 0 || rect.left > window.innerWidth || rect.top > window.innerHeight);
    }
  }, {
    key: "textareaAutoHeight",
    value: function textareaAutoHeight() {
      var _this5 = this;

      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'textarea';
      this.textareaSetHeights(selector);
      this.onResizeHorizontal(function () {
        _this5.textareaSetHeights(selector);
      });
      [].forEach.call(document.querySelectorAll(selector), function (el) {
        el.addEventListener('keyup', function (e) {
          _this5.textareaSetHeight(e.target);
        });
      });
    }
  }, {
    key: "textareaSetHeights",
    value: function textareaSetHeights() {
      var _this6 = this;

      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'textarea';
      [].forEach.call(document.querySelectorAll(selector), function (el) {
        if (_this6.isVisible(el)) {
          _this6.textareaSetHeight(el);
        }
      });
    }
  }, {
    key: "textareaSetHeight",
    value: function textareaSetHeight(el) {
      el.style.height = '5px';
      el.style.height = el.scrollHeight + 'px';
    }
  }, {
    key: "real100vh",
    value: function real100vh(selector) {
      document.querySelector(selector).style.height = window.innerHeight + 'px'; // onResizeHorizontal does not work, we really have to trigger on every resize

      window.addEventListener('resize', function () {
        document.querySelector(selector).style.height = window.innerHeight + 'px';
      });
    }
  }, {
    key: "iOsRemoveHover",
    value: function iOsRemoveHover() {
      if (hlp.getBrowser() === 'safari' && hlp.getDevice() !== 'desktop') {
        hlp.on('touchend', 'a', function (e, el) {
          el.click();
        });
      }
    }
  }, {
    key: "isNumeric",
    value: function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
  }, {
    key: "animate",
    value: function animate(el, from, to, easing, duration) {
      var _this7 = this;

      return new Promise(function (resolve) {
        // on durations smaller than 50, the end event does not trigger!
        if (duration <= 50) {
          duration = 50;
        }

        var properties = [];
        from.split(';').forEach(function (from__value) {
          properties.push(from__value.split(':')[0].trim());
        });
        var transition = [];
        properties.forEach(function (properties__value) {
          transition.push(properties__value + ' ' + Math.round(duration / 1000 * 10) / 10 + 's ' + easing);
        });
        transition = 'transition: ' + transition.join(', ') + ' !important;';
        var els = null;

        if (NodeList.prototype.isPrototypeOf(el)) {
          els = Array.from(el);
        } else if (el === null) {
          console.log('cannot animate element from ' + from + ' to ' + to + ' because it does not exist');
          resolve();
        } else {
          els = [el];
        }

        var toFinish = els.length;
        els.forEach(function (els__value, els__key) {
          // add random class
          var random_class = hlp.random_string(10, 'abcdefghijklmnopqrstuvwxyz');
          els__value.classList.add(random_class);
          window.requestAnimationFrame(function () {
            // set from style inline (don't fully remove previous style)
            var new_style = [];
            var prev_style = els__value.getAttribute('style');

            if (prev_style !== null) {
              prev_style.split(';').forEach(function (prev_style__value) {
                if (!properties.includes(prev_style__value.split(':')[0].trim())) {
                  new_style.push(prev_style__value);
                }
              });
            }

            new_style = new_style.join(';') + from + ';';
            els__value.setAttribute('style', new_style);
            window.requestAnimationFrame(function () {
              // add transition property
              var style = document.createElement('style');
              style.innerHTML = '.' + random_class + ' { ' + transition + ' }';
              document.head.appendChild(style);
              window.requestAnimationFrame(function () {
                // set last style inline
                els__value.setAttribute('style', els__value.getAttribute('style').replace(from + ';', '') + to + ';');

                if (_this7.isVisible(els__value)) {
                  hlp.addEventListenerOnce(els__value, 'transitionend', function (event) {
                    // transitionend fires also, when animating child elements
                    // the following line ensures, that those events do not bubble up
                    // in that case, we return false and ensure, the event listener is still alive
                    if (event.target !== event.currentTarget) {
                      return false;
                    } // remove previous styles property


                    document.head.removeChild(style); // remove random class

                    els__value.classList.remove(random_class); // resolve promise when last is finished

                    toFinish--;

                    if (toFinish <= 0) {
                      window.requestAnimationFrame(function () {
                        resolve();
                      });
                    }
                  });
                } else {
                  document.head.removeChild(style);
                  els__value.classList.remove(random_class);
                  toFinish--;

                  if (toFinish <= 0) {
                    resolve();
                  }
                }
              });
            });
          });
        });
      });
    }
  }, {
    key: "addEventListenerOnce",
    value: function addEventListenerOnce(target, type, listener, addOptions, removeOptions) {
      target.addEventListener(type, function fn(event) {
        var result = listener.apply(this, arguments, addOptions);

        if (result !== false) {
          target.removeEventListener(type, fn, removeOptions);
        }
      });
    }
  }, {
    key: "htmlDecode",
    value: function htmlDecode(value) {
      var tmp = document.createElement('textarea');
      tmp.innerHTML = value;
      return tmp.value;
    }
  }, {
    key: "htmlEncode",
    value: function htmlEncode(value) {
      return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/`/g, '&#96;');
    }
  }, {
    key: "nl2br",
    value: function nl2br(str) {
      if (typeof str === 'undefined' || str === null) {
        return '';
      }

      var breakTag = '<br/>',
          replaceStr = '$1' + breakTag;
      return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, replaceStr);
    }
  }, {
    key: "br2nl",
    value: function br2nl(str) {
      if (typeof str === 'undefined' || str === null) {
        return '';
      }

      var replaceStr = '\n';
      return str.replace(/<\s*\/?br\s*[\/]?>/gi, replaceStr);
    }
  }, {
    key: "closest",
    value: function closest(el, selector) {
      if (!document.documentElement.contains(el)) {
        return null;
      }

      do {
        if (this.matches(el, selector)) {
          return el;
        }

        el = el.parentElement || el.parentNode;
      } while (el !== null && el.nodeType === 1);

      return null;
    }
  }, {
    key: "matches",
    value: function matches(el, selector) {
      var node = el,
          nodes = (node.parentNode || node.document).querySelectorAll(selector),
          i = -1;

      while (nodes[++i] && nodes[i] != node) {
        ;
      }

      return !!nodes[i];
    }
  }, {
    key: "wrapTextNodes",
    value: function wrapTextNodes(el, tag) {
      if (el === null) {
        return;
      }

      Array.from(el.childNodes).filter(function (node) {
        return node.nodeType === 3 && node.textContent.trim().length > 1;
      }).forEach(function (node) {
        var wrapper = document.createElement(tag);
        node.after(wrapper);
        wrapper.appendChild(node);
      });
    }
  }, {
    key: "html2dom",
    value: function html2dom(html) {
      var template = document.createElement('template');
      html = html.trim();
      template.innerHTML = html;

      if (template.content === undefined) {
        return this.html2domLegacy(html);
      }

      return template.content.firstChild;
    }
  }, {
    key: "html2domLegacy",
    value: function html2domLegacy(html) {
      /* source: https://gist.github.com/Munawwar/6e6362dbdf77c7865a99 */
      var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
          rtagName = /<([\w:]+)/,
          rhtml = /<|&#?\w+;/,
          wrapMap = {
        option: [1, "<select multiple='multiple'>", '</select>'],
        thead: [1, '<table>', '</table>'],
        col: [2, '<table><colgroup>', '</colgroup></table>'],
        tr: [2, '<table><tbody>', '</tbody></table>'],
        td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
        _default: [0, '', '']
      },
          context = document;
      var tmp,
          tag,
          wrap,
          j,
          fragment = context.createDocumentFragment();

      if (!rhtml.test(html)) {
        fragment.appendChild(context.createTextNode(html));
      } else {
        tmp = fragment.appendChild(context.createElement('div'));
        tag = (rtagName.exec(html) || ['', ''])[1].toLowerCase();
        wrap = wrapMap[tag] || wrapMap._default;
        tmp.innerHTML = wrap[1] + html.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
        j = wrap[0];

        while (j--) {
          tmp = tmp.lastChild;
        }

        fragment.removeChild(fragment.firstChild);

        while (tmp.firstChild) {
          fragment.appendChild(tmp.firstChild);
        }
      }

      return fragment.querySelector('*');
    }
  }, {
    key: "prevAll",
    value: function prevAll(elem, filter) {
      var sibs = [];

      while (elem = elem.previousElementSibling) {
        if (filter === undefined || this.matches(elem, filter)) {
          sibs.push(elem);
        }
      }

      return sibs;
    }
  }, {
    key: "nextAll",
    value: function nextAll(elem, filter) {
      var sibs = [];

      while (elem = elem.nextElementSibling) {
        if (filter === undefined || this.matches(elem, filter)) {
          sibs.push(elem);
        }
      }

      return sibs;
    }
  }, {
    key: "siblings",
    value: function siblings(elem, filter) {
      var sibs = [];
      var self = elem;
      elem = elem.parentNode.firstChild;

      while (elem = elem.nextElementSibling) {
        if (filter === undefined || this.matches(elem, filter)) {
          if (self !== elem) {
            sibs.push(elem);
          }
        }
      }

      return sibs;
    }
  }, {
    key: "parents",
    value: function parents(elem, selector) {
      var elements = [];
      var ishaveselector = selector !== undefined;

      while ((elem = elem.parentElement) !== null) {
        if (elem.nodeType !== Node.ELEMENT_NODE) {
          continue;
        }

        if (!ishaveselector || this.matches(elem, selector)) {
          elements.push(elem);
        }
      }

      return elements;
    }
  }, {
    key: "css",
    value: function css(el) {
      var sheets = document.styleSheets,
          o = {};

      for (var sheets__key in sheets) {
        try {
          var rules = sheets[sheets__key].rules || sheets[sheets__key].cssRules;

          for (var rules__key in rules) {
            if (this.matches(el, rules[rules__key].selectorText)) {
              o = Object.assign(o, this.css2json(rules[rules__key].style), this.css2json(el.getAttribute('style')));
            }
          }
        } catch (e) {}
      }

      return o;
    }
  }, {
    key: "css2json",
    value: function css2json(css) {
      var obj = {};

      if (!css) {
        return obj;
      }

      if (css instanceof CSSStyleDeclaration) {
        for (var css__key in css) {
          if (css[css__key].toLowerCase && css[css[css__key]] !== undefined) {
            obj[css[css__key].toLowerCase()] = css[css[css__key]];
          }
        }
      } else if (typeof css == 'string') {
        css = css.split(';');

        for (var _css__key in css) {
          if (css[_css__key].indexOf(':') > -1) {
            var val = css[_css__key].split(':');

            obj[val[0].toLowerCase().trim()] = val[1].trim();
          }
        }
      }

      return obj;
    }
  }, {
    key: "compareDates",
    value: function compareDates(d1, d2) {
      // safari has problems in parsing "2019-01-01 00:00:00"
      if (typeof d1 === 'string') {
        d1 = d1.split(' ').join('T');
      }

      if (typeof d2 === 'string') {
        d2 = d2.split(' ').join('T');
      }

      d1 = new Date(d1);
      d2 = new Date(d2);
      d1.setHours(0);
      d1.setMinutes(0);
      d1.setSeconds(0);
      d1.setMilliseconds(0);
      d2.setHours(0);
      d2.setMinutes(0);
      d2.setSeconds(0);
      d2.setMilliseconds(0);

      if (d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate()) {
        return 0;
      }

      if (d1 < d2) {
        return -1;
      }

      return 1;
    }
  }, {
    key: "spaceship",
    value: function spaceship(val1, val2) {
      if (val1 === null || val2 === null || (0, _typeof2.default)(val1) != (0, _typeof2.default)(val2)) {
        return null;
      }

      if (typeof val1 === 'string') {
        return val1.localeCompare(val2);
      } else {
        if (val1 > val2) {
          return 1;
        } else if (val1 < val2) {
          return -1;
        }

        return 0;
      }
    }
  }, {
    key: "focus",
    value: function focus(selector) {
      hlp.unfocus();
      var el = document.querySelector(selector);

      if (el !== null) {
        var mask = document.createElement('div');
        mask.classList.add('hlp-focus-mask');
        mask.style.position = 'fixed';
        mask.style.top = 0;
        mask.style.bottom = 0;
        mask.style.left = 0;
        mask.style.right = 0;
        mask.style.backgroundColor = 'rgba(0,0,0,0.8)';
        mask.style.zIndex = 2147483646;
        el.before(mask);
        el.setAttribute('data-focussed', 1);
        el.setAttribute('data-focussed-orig-z-index', el.style.zIndex);
        el.setAttribute('data-focussed-orig-position', el.style.position);
        el.setAttribute('data-focussed-orig-background-color', el.style.backgroundColor);
        el.setAttribute('data-focussed-orig-box-shadow', el.style.boxShadow);
        el.style.zIndex = 2147483647;
        el.style.position = 'relative';
        el.style.backgroundColor = '#ffffff';
        el.style.boxShadow = '0px 0px 0px 20px #fff';
      }
    }
  }, {
    key: "unfocus",
    value: function unfocus() {
      if (document.querySelector('.hlp-focus-mask') !== null) {
        document.querySelectorAll('.hlp-focus-mask').forEach(function (el) {
          hlp.remove(el);
        });
      }

      if (document.querySelector('[data-focussed]') !== null) {
        document.querySelectorAll('[data-focussed]').forEach(function (el) {
          el.style.zIndex = el.getAttribute('data-focussed-orig-z-index');
          el.style.position = el.getAttribute('data-focussed-orig-position');
          el.style.backgroundColor = el.getAttribute('data-focussed-orig-background-color');
          el.style.boxShadow = el.getAttribute('data-focussed-orig-box-shadow');
          el.removeAttribute('data-focussed');
          el.removeAttribute('data-focussed-orig-z-index');
          el.removeAttribute('data-focussed-orig-position');
          el.removeAttribute('data-focussed-orig-background-color');
          el.removeAttribute('data-focussed-orig-box-shadow');
        });
      }
    }
  }, {
    key: "remove",
    value: function remove(el) {
      if (el !== null) {
        el.parentNode.removeChild(el);
      }
    }
  }, {
    key: "on",
    value: function on(event, selector, scope) {
      var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      if (callback === null) {
        callback = scope;
        scope = document;
      } else {
        scope = document.querySelector(scope);
      }

      scope.addEventListener(event, function (e) {
        var el = hlp.closest(e.target, selector);

        if (el) {
          callback(e, el);
        }
      }, false);
    }
  }, {
    key: "url",
    value: function url() {
      return window.location.protocol + '//' + window.location.host + window.location.pathname;
    }
  }, {
    key: "urlWithHash",
    value: function urlWithHash() {
      return window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.hash;
    }
  }, {
    key: "fullUrl",
    value: function fullUrl() {
      return window.location.href;
    }
  }, {
    key: "urlWithArgs",
    value: function urlWithArgs() {
      return window.location.href.split('#')[0];
    }
  }, {
    key: "baseUrl",
    value: function baseUrl() {
      return window.location.protocol + '//' + window.location.host;
    }
  }, {
    key: "urlProtocol",
    value: function urlProtocol() {
      return window.location.protocol + '//';
    }
  }, {
    key: "urlHost",
    value: function urlHost() {
      return window.location.host;
    }
  }, {
    key: "urlHostTopLevel",
    value: function urlHostTopLevel() {
      var host = window.location.host;
      host = host.split('.');

      while (host.length > 2) {
        host.shift();
      }

      host = host.join('.');
      return host;
    }
  }, {
    key: "urlPath",
    value: function urlPath() {
      return window.location.pathname;
    }
  }, {
    key: "urlHash",
    value: function urlHash() {
      return window.location.hash;
    }
  }, {
    key: "urlArgs",
    value: function urlArgs() {
      return window.location.search;
    }
  }, {
    key: "urlOfScript",
    value: function urlOfScript() {
      if (document.currentScript) {
        return document.currentScript.src;
      } else {
        var scripts = document.getElementsByTagName('script');
        return scripts[scripts.length - 1].src;
      }
    }
  }, {
    key: "pathOfScript",
    value: function pathOfScript() {
      var script = this.urlOfScript(),
          path = script.substring(0, script.lastIndexOf('/'));
      return path;
    }
  }, {
    key: "waitUntil",
    value: function waitUntil(selector) {
      var css_option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var css_value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return new Promise(function (resolve, reject) {
        var timeout = setInterval(function () {
          if (document.querySelector(selector) !== null && (css_option === null || css_value === null && window.getComputedStyle(document.querySelector(selector))[css_option] !== undefined && window.getComputedStyle(document.querySelector(selector))[css_option] != '' || css_value !== null && window.getComputedStyle(document.querySelector(selector))[css_option] === css_value)) {
            window.clearInterval(timeout);
            resolve();
          }
        }, 30);
      });
    }
  }, {
    key: "fmath",
    value: function fmath(op, x, y) {
      var precision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
      var n = {
        '*': x * y,
        '-': x - y,
        '+': x + y,
        '/': x / y
      }[op];
      return Math.round(n * 10 * Math.pow(10, precision)) / (10 * Math.pow(10, precision));
    }
  }, {
    key: "pushId",
    value: function pushId() {
      /* source https://gist.github.com/mikelehen/3596a30bd69384624c11 */
      var pushIdData = null; // browser

      if (window !== undefined) {
        if (window.pushIdDataGlobal === undefined) {
          window.pushIdDataGlobal = {};
        }

        pushIdData = window.pushIdDataGlobal;
      } // node.js


      if (global !== undefined) {
        if (global.pushIdDataGlobal === undefined) {
          global.pushIdDataGlobal = {};
        }

        pushIdData = global.pushIdDataGlobal;
      } // first run


      if (hlp.objectsAreEqual(pushIdData, {})) {
        pushIdData.lastPushTime = 0;
        pushIdData.lastRandChars = [];
        pushIdData.PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
      }

      var now = new Date().getTime(),
          duplicateTime = now === pushIdData.lastPushTime;
      pushIdData.lastPushTime = now;
      var timeStampChars = new Array(8);

      for (var i = 7; i >= 0; i--) {
        timeStampChars[i] = pushIdData.PUSH_CHARS.charAt(now % 64);
        now = Math.floor(now / 64);
      }

      if (now !== 0) {
        throw new Error();
      }

      var id = timeStampChars.join('');

      if (!duplicateTime) {
        for (i = 0; i < 12; i++) {
          pushIdData.lastRandChars[i] = Math.floor(Math.random() * 64);
        }
      } else {
        for (i = 11; i >= 0 && pushIdData.lastRandChars[i] === 63; i--) {
          pushIdData.lastRandChars[i] = 0;
        }

        pushIdData.lastRandChars[i]++;
      }

      for (i = 0; i < 12; i++) {
        id += pushIdData.PUSH_CHARS.charAt(pushIdData.lastRandChars[i]);
      }

      if (id.length != 20) {
        throw new Error();
      }

      return id;
    }
  }, {
    key: "getProp",
    value: function getProp(obj, desc) {
      var arr = desc.split('.');

      while (arr.length && (obj = obj[arr.shift()])) {
        ;
      }

      return obj;
    }
  }, {
    key: "base64toblob",
    value: function base64toblob(base64) {
      var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var sliceSize = 512,
          byteCharacters = atob(base64),
          byteArrays = [];

      for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        var slice = byteCharacters.slice(offset, offset + sliceSize),
            byteNumbers = new Array(slice.length);

        for (var i = 0; i < slice.length; i++) {
          byteNumbers[i] = slice.charCodeAt(i);
        }

        var byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
      }

      var blob = new Blob(byteArrays, {
        type: contentType
      });
      return blob;
    }
  }, {
    key: "blobtobase64",
    value: function blobtobase64(blob) {
      return new Promise(function (resolve) {
        var reader = new FileReader();

        reader.onload = function () {
          var dataUrl = reader.result;
          var base64 = dataUrl.split(',')[1];
          resolve(base64);
        };

        reader.readAsDataURL(blob);
      });
    }
  }, {
    key: "stringtoblob",
    value: function stringtoblob(string) {
      var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var blob = new Blob([string], {
        type: contentType
      });
      return blob;
    }
  }, {
    key: "blobtostring",
    value: function blobtostring(blob) {
      return new Promise(function (resolve) {
        var reader = new FileReader();

        reader.onload = function () {
          resolve(reader.result);
        };

        reader.readAsText(blob);
      });
    }
  }, {
    key: "filetobase64",
    value: function filetobase64(file) {
      return new Promise(function (resolve, reject) {
        var reader = new FileReader();
        reader.readAsDataURL(file);

        reader.onload = function () {
          return resolve(reader.result.split(',')[1]);
        };

        reader.onerror = function (error) {
          return reject(error);
        };
      });
    }
  }, {
    key: "blobtofile",
    value: function blobtofile(blob) {
      var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'file.txt';
      var file = null;

      try {
        file = new File([blob], filename);
      } catch (_unused) {
        // ie 11
        file = new Blob([blob], filename);
      }

      return file;
    }
  }, {
    key: "filetoblob",
    value: function filetoblob(file) {
      return new Blob([file]);
    }
  }, {
    key: "base64tofile",
    value: function base64tofile(base64) {
      var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var filename = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'file.txt';
      return this.blobtofile(this.base64toblob(base64, contentType), filename);
    }
  }, {
    key: "blobtourl",
    value: function blobtourl(blob) {
      return URL.createObjectURL(blob, {
        type: 'text/plain'
      });
    }
  }, {
    key: "stringtourl",
    value: function stringtourl(string) {
      return this.blobtourl(this.stringtoblob(string));
    }
  }, {
    key: "base64tostring",
    value: function base64tostring(base64) {
      return atob(base64);
    }
  }, {
    key: "stringtobase64",
    value: function stringtobase64(string) {
      return btoa(string);
    }
  }, {
    key: "base64tourl",
    value: function base64tourl(base64) {
      return this.blobtourl(this.base64toblob(base64));
    }
  }, {
    key: "filetourl",
    value: function filetourl(file) {
      return this.blobtourl(this.filetoblob(file));
    }
  }, {
    key: "getImageOrientation",
    value: function getImageOrientation(base64) {
      var _this8 = this;

      return new Promise(function (resolve, reject) {
        base64 = base64.replace('data:image/jpeg;base64,', '');

        var file = _this8.base64tofile(base64),
            reader = new FileReader();

        reader.onload = function (e) {
          var view = new DataView(e.target.result);

          if (view.getUint16(0, false) != 0xffd8) {
            resolve(-2);
            return;
          }

          var length = view.byteLength,
              offset = 2;

          while (offset < length) {
            if (view.getUint16(offset + 2, false) <= 8) {
              resolve(-1);
              return;
            }

            var marker = view.getUint16(offset, false);
            offset += 2;

            if (marker == 0xffe1) {
              if (view.getUint32(offset += 2, false) != 0x45786966) {
                resolve(-1);
                return;
              }

              var little = view.getUint16(offset += 6, false) == 0x4949;
              offset += view.getUint32(offset + 4, little);
              var tags = view.getUint16(offset, little);
              offset += 2;

              for (var i = 0; i < tags; i++) {
                if (view.getUint16(offset + i * 12, little) == 0x0112) {
                  resolve(view.getUint16(offset + i * 12 + 8, little));
                  return;
                }
              }
            } else if ((marker & 0xff00) != 0xff00) {
              break;
            } else {
              offset += view.getUint16(offset, false);
            }
          }

          resolve(-1);
          return;
        };

        reader.readAsArrayBuffer(file);
      });
    }
  }, {
    key: "resetImageOrientation",
    value: function resetImageOrientation(srcBase64, srcOrientation) {
      return new Promise(function (resolve, reject) {
        var img = new Image();

        img.onload = function () {
          var width = img.width,
              height = img.height,
              canvas = document.createElement('canvas'),
              ctx = canvas.getContext('2d');

          if (4 < srcOrientation && srcOrientation < 9) {
            canvas.width = height;
            canvas.height = width;
          } else {
            canvas.width = width;
            canvas.height = height;
          }

          switch (srcOrientation) {
            case 2:
              ctx.transform(-1, 0, 0, 1, width, 0);
              break;

            case 3:
              ctx.transform(-1, 0, 0, -1, width, height);
              break;

            case 4:
              ctx.transform(1, 0, 0, -1, 0, height);
              break;

            case 5:
              ctx.transform(0, 1, 1, 0, 0, 0);
              break;

            case 6:
              ctx.transform(0, 1, -1, 0, height, 0);
              break;

            case 7:
              ctx.transform(0, -1, -1, 0, height, width);
              break;

            case 8:
              ctx.transform(0, -1, 1, 0, 0, width);
              break;

            default:
              break;
          }

          ctx.drawImage(img, 0, 0);
          var base64 = canvas.toDataURL();
          base64 = 'data:image/jpeg;base64,' + base64.split(',')[1];
          resolve(base64);
          return;
        };

        img.src = srcBase64;
      });
    }
  }, {
    key: "fixImageOrientation",
    value: function fixImageOrientation(base64) {
      var _this9 = this;

      return new Promise(function (resolve, reject) {
        if (base64.indexOf('data:') === -1) {
          resolve(base64);
          return;
        }

        if (base64.indexOf('data:image/jpeg;base64,') === 0) {
          base64 = base64.replace('data:image/jpeg;base64,', '');
        }

        _this9.getImageOrientation(base64).then(function (orientation) {
          base64 = 'data:image/jpeg;base64,' + base64;

          if (orientation <= 1) {
            resolve(base64);
            return;
          } else {
            _this9.resetImageOrientation(base64, orientation).then(function (base64_new) {
              resolve(base64_new);
              return;
            });
          }
        });
      });
    }
  }, {
    key: "debounce",
    value: function debounce(func, wait, immediate) {
      var timeout;
      return function () {
        var context = this,
            args = arguments;

        var later = function later() {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };

        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    }
  }, {
    key: "throttle",
    value: function throttle(func, wait, options) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      if (!options) options = {};

      var later = function later() {
        previous = options.leading === false ? 0 : Date.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      };

      return function () {
        var now = Date.now();
        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;

        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }

          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }

        return result;
      };
    }
  }, {
    key: "shuffle",
    value: function shuffle(array) {
      var currentIndex = array.length,
          temporaryValue,
          randomIndex;

      while (0 !== currentIndex) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
      }

      return array;
    }
  }, {
    key: "findRecursiveInObject",
    value: function findRecursiveInObject(object) {
      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
      var paths = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

      if (object !== null && (0, _typeof2.default)(object) === 'object') {
        for (var _i = 0, _Object$entries = Object.entries(object); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
              object__key = _Object$entries$_i[0],
              object__value = _Object$entries$_i[1];

          if (object__value !== null && (0, _typeof2.default)(object__value) === 'object') {
            this.findRecursiveInObject(object__value, key, value, (path === '' ? '' : path + '.') + object__key, paths);
          } else if ((key === null || object__key === key) && (value === null || object__value === value)) {
            paths.push(path);
            break; // only take first
          }
        }
      }

      return paths;
    }
  }]);
  return hlp;
}();
/* expose all functions to window */


exports.default = hlp;

if (typeof window !== 'undefined') {
  window.hlp = {};
  Object.getOwnPropertyNames(hlp).forEach(function (value, key) {
    if (value === 'length' || value === 'name' || value === 'prototype' || value === 'caller' || value === 'arguments') {
      return;
    }

    window.hlp[value] = hlp[value];
  });
}
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"@babel/polyfill/noConflict":20,"@babel/runtime/helpers/asyncToGenerator":24,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/defineProperty":27,"@babel/runtime/helpers/interopRequireDefault":28,"@babel/runtime/helpers/slicedToArray":33,"@babel/runtime/helpers/toConsumableArray":34,"@babel/runtime/helpers/typeof":35,"@babel/runtime/regenerator":37,"mdn-polyfills/Element.prototype.closest":435,"mdn-polyfills/Node.prototype.before":436,"mdn-polyfills/Node.prototype.remove":437,"mdn-polyfills/NodeList.prototype.forEach":438}],325:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.match.js");

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.regexp.to-string.js");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var helpers = /*#__PURE__*/function () {
  function helpers() {
    (0, _classCallCheck2.default)(this, helpers);
  }

  (0, _createClass2.default)(helpers, null, [{
    key: "cookieExists",
    value: function cookieExists(cookie_name) {
      if (document.cookie !== undefined && this.cookieGet(cookie_name) !== null) {
        return true;
      }

      return false;
    }
  }, {
    key: "cookieGet",
    value: function cookieGet(cookie_name) {
      var cookie_match = document.cookie.match(new RegExp(cookie_name + '=([^;]+)'));

      if (cookie_match) {
        return decodeURIComponent(cookie_match[1]);
      }

      return null;
    }
  }, {
    key: "cookieSet",
    value: function cookieSet(cookie_name, cookie_value, days) {
      var samesite = '';

      if (window.location.protocol.indexOf('https') > -1) {
        samesite = '; SameSite=None; Secure';
      }

      document.cookie = cookie_name + '=' + encodeURIComponent(cookie_value) + '; ' + 'expires=' + new Date(new Date().getTime() + days * 24 * 60 * 60 * 1000).toUTCString() + '; path=/' + samesite;
    }
  }, {
    key: "cookieDelete",
    value: function cookieDelete(cookie_name) {
      var samesite = '';

      if (window.location.protocol.indexOf('https') > -1) {
        samesite = '; SameSite=None; Secure';
      }

      document.cookie = cookie_name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/' + samesite;
    }
  }, {
    key: "remove",
    value: function remove(el) {
      if (el !== null) {
        el.parentNode.removeChild(el);
      }
    }
  }]);
  return helpers;
}();

exports.default = helpers;
},{"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/interopRequireDefault":28,"core-js/modules/es.regexp.constructor.js":428,"core-js/modules/es.regexp.exec.js":429,"core-js/modules/es.regexp.to-string.js":430,"core-js/modules/es.string.match.js":431}],326:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.string.sub.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.array.concat.js");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

require("whatwg-fetch");

var _helpers = _interopRequireDefault(require("./_helpers"));

// use fetch
var jwtbutler = /*#__PURE__*/function () {
  function jwtbutler(config) {
    (0, _classCallCheck2.default)(this, jwtbutler);

    if (!('auth_login' in config)) {
      config.auth_login = 'email';
    }

    this.config = config;
  }

  (0, _createClass2.default)(jwtbutler, [{
    key: "isLoggedIn",
    value: function isLoggedIn() {
      if (this.getPayload() === null) {
        return false;
      }

      return true;
    }
  }, {
    key: "getUserId",
    value: function getUserId() {
      var payload = this.getPayload();

      if (payload === null) {
        return null;
      }

      return payload.sub;
    }
  }, {
    key: "getPayload",
    value: function getPayload() {
      if (_helpers.default.cookieGet('access_token') === null) {
        return null;
      }

      try {
        return JSON.parse(atob(_helpers.default.cookieGet('access_token').split('.')[1]));
      } catch (e) {
        return null;
      }
    }
  }, {
    key: "logout",
    value: function logout() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.addLoadingState('logging-out');

        fetch(_this2.config.auth_server + '/logout', {
          method: 'POST',
          headers: {
            'content-type': 'application/json',
            Authorization: 'Bearer ' + _helpers.default.cookieGet('access_token')
          },
          cache: 'no-cache'
        }).then(function (res) {
          return res.json();
        }).catch(function (err) {
          return err;
        }).then(function (response) {
          _this2.setCookies(null).then(function () {
            _this2.removeLoadingStates();

            resolve();
          }).catch(function (error) {
            reject(error);
          });
        });
      });
    }
  }, {
    key: "login",
    value: function login() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (_helpers.default.cookieGet('access_token') !== null) {
          _this3.addLoadingState('logging-in');

          fetch(_this3.config.auth_server + '/check', {
            method: 'POST',
            body: JSON.stringify({
              access_token: _helpers.default.cookieGet('access_token')
            }),
            headers: {
              'content-type': 'application/json'
            },
            cache: 'no-cache'
          }).then(function (res) {
            return res.json();
          }).catch(function (err) {
            return err;
          }).then(function (response) {
            if (response.success === true) {
              _this3.setCookies(_helpers.default.cookieGet('access_token')).then(function () {
                _this3.removeLoadingStates();

                resolve();
              }).catch(function (error) {
                reject(error);
              });
            } else {
              fetch(_this3.config.auth_server + '/refresh', {
                method: 'POST',
                headers: {
                  'content-type': 'application/json',
                  Authorization: 'Bearer ' + _helpers.default.cookieGet('access_token')
                },
                cache: 'no-cache'
              }).then(function (res) {
                return res.json();
              }).catch(function (err) {
                return err;
              }).then(function (response) {
                if (response.success === true) {
                  _this3.setCookies(response.data.access_token).then(function () {
                    _this3.removeLoadingStates();

                    resolve();
                  }).catch(function (error) {
                    reject(error);
                  });
                } else {
                  _this3.renderLoginFormWithPromise().then(function () {
                    resolve();
                  });
                }
              });
            }
          });
        } else {
          _this3.renderLoginFormWithPromise().then(function () {
            resolve();
          }).catch(function () {
            reject();
          });
        }
      });
    }
  }, {
    key: "fetch",
    value: function (_fetch) {
      function fetch(_x) {
        return _fetch.apply(this, arguments);
      }

      fetch.toString = function () {
        return _fetch.toString();
      };

      return fetch;
    }(function (url) {
      var _this4 = this;

      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return new Promise(function (resolve, reject) {
        if (!('headers' in args)) {
          args.headers = {};
        }

        if (!('tries' in args)) {
          args.tries = 0;
        }

        args.tries++;

        if (args.tries > 3) {
          reject(null);
          return;
        } else if (_this4.isLoggedIn() === false) {
          _this4.login().then(function () {
            _this4.fetch(url, args).then(function (response) {
              resolve(response);
            }).catch(function (error) {
              reject(error);
            });
          }).catch(function (error) {
            reject(error);
          });
        } else {
          _this4.addLoadingState('fetching');

          args.headers.Authorization = 'Bearer ' + _helpers.default.cookieGet('access_token');
          fetch(url, args).then(function (v) {
            return v;
          }).catch(function (v) {
            return v;
          }).then(function (response) {
            _this4.removeLoadingStates();

            if (response.status === 401) {
              _this4.addLoadingState('logging-in');

              fetch(_this4.config.auth_server + '/refresh', {
                method: 'POST',
                headers: {
                  'content-type': 'application/json',
                  Authorization: 'Bearer ' + _helpers.default.cookieGet('access_token')
                },
                cache: 'no-cache'
              }).then(function (res) {
                return res.json();
              }).catch(function (error) {
                return error;
              }).then(function (response) {
                if (response.success === true) {
                  _this4.setCookies(response.data.access_token).then(function () {
                    _this4.removeLoadingStates();

                    _this4.fetch(url, args).then(function (response) {
                      resolve(response);
                    }).catch(function (error) {
                      reject(error);
                    });
                  }).catch(function (error) {
                    _this4.removeLoadingStates();

                    reject(error);
                  });
                } else {
                  _this4.removeLoadingStates();

                  _this4.renderLoginFormWithPromise().then(function () {
                    _this4.fetch(url, args).then(function (response) {
                      resolve(response);
                    }).catch(function (error) {
                      reject(error);
                    });
                  }).catch(function (error) {
                    reject(error);
                  });
                }
              });
            } else {
              resolve(response);
            }
          });
        }
      });
    })
  }, {
    key: "setCookies",
    value: function setCookies() {
      var _this5 = this;

      var access_token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return new Promise(function (resolve, reject) {
        if (_this5.setCookieLoading === undefined) {
          _this5.setCookieLoading === false;
        }

        if (_this5.setCookieLoading === true) {
          resolve();
          return;
        }

        _this5.setCookieLoading = true;

        if (access_token !== null) {
          _helpers.default.cookieSet('access_token', access_token, 28);
        } else {
          _helpers.default.cookieDelete('access_token');
        }

        if (_this5.config.sso === undefined || _this5.config.sso.length === 1 && _this5.config.sso[0] === window.location.protocol + '//' + window.location.host) {
          _this5.setCookieLoading = false;
          resolve();
          return;
        }

        _helpers.default.remove(document.querySelector('.iframe_wrapper'));

        var iframe_wrapper = document.createElement('div');
        iframe_wrapper.setAttribute('class', 'iframe_wrapper');
        iframe_wrapper.style.position = 'absolute';
        iframe_wrapper.style.opacity = '0';
        document.body.appendChild(iframe_wrapper);
        var timeout = null;

        var _this = _this5,
            todo = _this5.config.sso.length - 1,
            waitForPostMessage = function waitForPostMessage(e) {
          if (_this.config.sso.indexOf(e.origin) === -1) {
            return;
          }

          if (e.data !== undefined && e.data !== null && 'success' in e.data && e.data.success === true) {
            todo--;
          } //console.log(todo);


          if (todo <= 0) {
            if (timeout) {
              //console.log('cleared timeout');
              clearTimeout(timeout);
            }

            window.removeEventListener('message', waitForPostMessage, false);

            _helpers.default.remove(document.querySelector('.iframe_wrapper'));

            _this.setCookieLoading = false;
            resolve();
          }
        };

        window.addEventListener('message', waitForPostMessage, false);
        timeout = setTimeout(function () {
          if (_this5.setCookieLoading === true) {
            //console.log('timeout');
            window.removeEventListener('message', waitForPostMessage, false);

            _helpers.default.remove(document.querySelector('.iframe_wrapper'));

            _this5.setCookieLoading = false;
            resolve();
          }
        }, 20000);

        _this5.config.sso.forEach(function (sso__value) {
          if (sso__value === window.location.protocol + '//' + window.location.host) {
            return;
          }

          var iframe = document.createElement('iframe');
          iframe.setAttribute('src', sso__value + '/sso.html');
          iframe.style.width = '1px';
          iframe.style.height = '1px';
          iframe.addEventListener('load', function (e) {
            iframe.contentWindow.postMessage({
              access_token: access_token
            }, sso__value);
          });
          document.querySelector('.iframe_wrapper').appendChild(iframe);
        });
      });
    }
  }, {
    key: "renderLoginFormWithPromise",
    value: function renderLoginFormWithPromise() {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        _this6.buildUpLoginFormHtml();

        _this6.bindLoginFormSubmit().then(function () {
          resolve();
        }).catch(function (error) {
          reject(error);
        });

        _this6.triggerLoginFormRenderedEvent();
      });
    }
  }, {
    key: "buildUpLoginFormHtml",
    value: function buildUpLoginFormHtml() {
      if (!('login_form' in this.config) || this.config.login_form == '') {
        this.config.login_form = "<div class=\"login-form\">\n                <div class=\"login-form__inner\">\n                    <form class=\"login-form__form\">\n                        <ul class=\"login-form__items\">\n                            <li class=\"login-form__item\">\n                                <label class=\"login-form__label login-form__label--".concat(this.config.auth_login, "\" for=\"login-form__label--").concat(this.config.auth_login, "\">").concat(this.config.auth_login === 'email' ? 'E-Mail-Adresse' : this.config.auth_login === 'username' ? 'Benutzername' : this.config.auth_login, "</label>\n                                <input class=\"login-form__input login-form__input--").concat(this.config.auth_login, "\" id=\"login-form__label--").concat(this.config.auth_login, "\" type=\"text\" required=\"required\" name=\"").concat(this.config.auth_login, "\" />\n                            </li>\n                            <li class=\"login-form__item\">\n                                <label class=\"login-form__label login-form__label--password\" for=\"login-form__label--password\">Passwort</label>\n                                <input class=\"login-form__input login-form__input--password\" id=\"login-form__label--password\" type=\"password\" required=\"required\" name=\"password\" />\n                            </li>\n                            <li class=\"login-form__item\">\n                                <input class=\"login-form__submit\" type=\"submit\" value=\"Anmelden\" />\n                            </li>\n                        </ul>\n                    </form>\n                </div>\n            </div>");
      }

      var dom = new DOMParser().parseFromString(this.config.login_form, 'text/html').body.childNodes[0];
      this.config.login_form_class = dom.getAttribute('class').split(' ')[0];

      _helpers.default.remove(document.querySelector('.' + this.config.login_form_class));

      this.addLoadingState('login-form-visible');
      var parent = document.body;

      if ('login_form_parent' in this.config && this.config.login_form_parent != '' && document.querySelector(this.config.login_form_parent) !== null) {
        parent = document.querySelector(this.config.login_form_parent);
      }

      parent.appendChild(dom);
    }
  }, {
    key: "triggerLoginFormRenderedEvent",
    value: function triggerLoginFormRenderedEvent() {
      if ('login_form_rendered' in this.config && this.config.login_form_rendered != '' && typeof this.config.login_form_rendered === 'function') {
        this.config.login_form_rendered(document.querySelector('.' + this.config.login_form_class));
      }
    }
  }, {
    key: "bindLoginFormSubmit",
    value: function bindLoginFormSubmit() {
      var _this7 = this;

      return new Promise(function (resolve, reject) {
        var dom = document.querySelector('.' + _this7.config.login_form_class),
            form = dom.querySelector('form');
        form.addEventListener('submit', function (e) {
          var _JSON$stringify;

          _this7.addLoadingState('logging-in');

          if (form.querySelector('input[type="submit"]') !== null) {
            form.querySelector('input[type="submit"]').disabled = true;
          }

          _helpers.default.remove(dom.querySelector('.' + _this7.config.login_form_class + '__error'));

          fetch(_this7.config.auth_server + '/login', {
            method: 'POST',
            body: JSON.stringify((_JSON$stringify = {}, (0, _defineProperty2.default)(_JSON$stringify, _this7.config.auth_login, form.querySelector('input[name="' + _this7.config.auth_login + '"]').value), (0, _defineProperty2.default)(_JSON$stringify, "password", form.querySelector('input[name="password"]').value), _JSON$stringify)),
            headers: {
              'content-type': 'application/json'
            },
            cache: 'no-cache'
          }).then(function (res) {
            return res.json();
          }).catch(function (err) {
            return err;
          }).then(function (response) {
            if (form.querySelector('input[type="submit"]') !== null) {
              form.querySelector('input[type="submit"]').disabled = false;
            }

            if (response !== undefined && response !== null && 'success' in response && response.success === true) {
              _helpers.default.remove(document.querySelector('.' + _this7.config.login_form_class));

              _this7.setCookies(response.data.access_token).then(function () {
                _this7.removeLoadingStates();

                resolve();
              }).catch(function (error) {
                reject(error);
              });
            } else {
              form.insertAdjacentHTML('afterbegin', '<div class="' + _this7.config.login_form_class + '__error">' + response.public_message + '</div>');
            }
          });
          e.preventDefault();
        }, false);
      });
    }
  }, {
    key: "addLoadingState",
    value: function addLoadingState(state) {
      document.documentElement.classList.add('jwtbutler-' + state);

      if (state === 'logging-in' || state === 'logging-out') {
        document.documentElement.classList.add('jwtbutler-loading');
      }
    }
  }, {
    key: "removeLoadingStates",
    value: function removeLoadingStates() {
      document.documentElement.classList.remove('jwtbutler-logging-in');
      document.documentElement.classList.remove('jwtbutler-logging-out');
      document.documentElement.classList.remove('jwtbutler-loading');
      document.documentElement.classList.remove('jwtbutler-fetching');
      document.documentElement.classList.remove('jwtbutler-login-form-visible');
    }
  }]);
  return jwtbutler;
}();

exports.default = jwtbutler;
window.jwtbutler = jwtbutler;
},{"./_helpers":325,"@babel/runtime/helpers/classCallCheck":25,"@babel/runtime/helpers/createClass":26,"@babel/runtime/helpers/defineProperty":27,"@babel/runtime/helpers/interopRequireDefault":28,"core-js/modules/es.array.concat.js":425,"core-js/modules/es.object.to-string.js":426,"core-js/modules/es.promise.js":427,"core-js/modules/es.regexp.exec.js":429,"core-js/modules/es.regexp.to-string.js":430,"core-js/modules/es.string.split.js":432,"core-js/modules/es.string.sub.js":433,"core-js/modules/web.dom-collections.for-each.js":434,"whatwg-fetch":441}],327:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};

},{}],328:[function(require,module,exports){
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};

},{"../internals/is-object":375}],329:[function(require,module,exports){
'use strict';
var charAt = require('../internals/string-multibyte').charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

},{"../internals/string-multibyte":413}],330:[function(require,module,exports){
module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};

},{}],331:[function(require,module,exports){
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};

},{"../internals/is-object":375}],332:[function(require,module,exports){
'use strict';
var $forEach = require('../internals/array-iteration').forEach;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
} : [].forEach;

},{"../internals/array-iteration":334,"../internals/array-method-is-strict":336}],333:[function(require,module,exports){
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

},{"../internals/to-absolute-index":415,"../internals/to-indexed-object":416,"../internals/to-length":418}],334:[function(require,module,exports){
var bind = require('../internals/function-bind-context');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var arraySpeciesCreate = require('../internals/array-species-create');

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_OUT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push.call(target, value); // filterOut
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterOut` method
  // https://github.com/tc39/proposal-array-filtering
  filterOut: createMethod(7)
};

},{"../internals/array-species-create":337,"../internals/function-bind-context":359,"../internals/indexed-object":368,"../internals/to-length":418,"../internals/to-object":419}],335:[function(require,module,exports){
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/engine-v8-version":354,"../internals/fails":357,"../internals/well-known-symbol":424}],336:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
    method.call(null, argument || function () { throw 1; }, 1);
  });
};

},{"../internals/fails":357}],337:[function(require,module,exports){
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

},{"../internals/is-array":373,"../internals/is-object":375,"../internals/well-known-symbol":424}],338:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":424}],339:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"dup":65}],340:[function(require,module,exports){
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};

},{"../internals/classof-raw":339,"../internals/to-string-tag-support":421,"../internals/well-known-symbol":424}],341:[function(require,module,exports){
var has = require('../internals/has');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};

},{"../internals/has":363,"../internals/object-define-property":386,"../internals/object-get-own-property-descriptor":387,"../internals/own-keys":394}],342:[function(require,module,exports){
var requireObjectCoercible = require('../internals/require-object-coercible');

var quot = /"/g;

// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
// https://tc39.es/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = String(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

},{"../internals/require-object-coercible":404}],343:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/create-property-descriptor":344,"../internals/descriptors":346,"../internals/object-define-property":386}],344:[function(require,module,exports){
arguments[4][133][0].apply(exports,arguments)
},{"dup":133}],345:[function(require,module,exports){
'use strict';
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/create-property-descriptor":344,"../internals/object-define-property":386,"../internals/to-primitive":420}],346:[function(require,module,exports){
var fails = require('../internals/fails');

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});

},{"../internals/fails":357}],347:[function(require,module,exports){
var global = require('../internals/global');
var isObject = require('../internals/is-object');

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

},{"../internals/global":362,"../internals/is-object":375}],348:[function(require,module,exports){
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],349:[function(require,module,exports){
module.exports = typeof window == 'object';

},{}],350:[function(require,module,exports){
var userAgent = require('../internals/engine-user-agent');

module.exports = /(?:iphone|ipod|ipad).*applewebkit/i.test(userAgent);

},{"../internals/engine-user-agent":353}],351:[function(require,module,exports){
var classof = require('../internals/classof-raw');
var global = require('../internals/global');

module.exports = classof(global.process) == 'process';

},{"../internals/classof-raw":339,"../internals/global":362}],352:[function(require,module,exports){
var userAgent = require('../internals/engine-user-agent');

module.exports = /web0s(?!.*chrome)/i.test(userAgent);

},{"../internals/engine-user-agent":353}],353:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('navigator', 'userAgent') || '';

},{"../internals/get-built-in":360}],354:[function(require,module,exports){
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] < 4 ? 1 : match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;

},{"../internals/engine-user-agent":353,"../internals/global":362}],355:[function(require,module,exports){
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],356:[function(require,module,exports){
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var setGlobal = require('../internals/set-global');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};

},{"../internals/copy-constructor-properties":341,"../internals/create-non-enumerable-property":343,"../internals/global":362,"../internals/is-forced":374,"../internals/object-get-own-property-descriptor":387,"../internals/redefine":399,"../internals/set-global":405}],357:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

},{}],358:[function(require,module,exports){
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var redefine = require('../internals/redefine');
var regexpExec = require('../internals/regexp-exec');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
})();

var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(
      REPLACE_SUPPORTS_NAMED_GROUPS &&
      REPLACE_KEEPS_$0 &&
      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    )) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, {
      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExpPrototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};

},{"../internals/create-non-enumerable-property":343,"../internals/fails":357,"../internals/redefine":399,"../internals/regexp-exec":401,"../internals/well-known-symbol":424,"../modules/es.regexp.exec":429}],359:[function(require,module,exports){
var aFunction = require('../internals/a-function');

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-function":327}],360:[function(require,module,exports){
var path = require('../internals/path');
var global = require('../internals/global');

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};

},{"../internals/global":362,"../internals/path":395}],361:[function(require,module,exports){
var classof = require('../internals/classof');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"../internals/classof":340,"../internals/iterators":380,"../internals/well-known-symbol":424}],362:[function(require,module,exports){
(function (global){(function (){
var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],363:[function(require,module,exports){
var toObject = require('../internals/to-object');

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function hasOwn(it, key) {
  return hasOwnProperty.call(toObject(it), key);
};

},{"../internals/to-object":419}],364:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"dup":105}],365:[function(require,module,exports){
var global = require('../internals/global');

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};

},{"../internals/global":362}],366:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":360}],367:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

},{"../internals/descriptors":346,"../internals/document-create-element":347,"../internals/fails":357}],368:[function(require,module,exports){
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;

},{"../internals/classof-raw":339,"../internals/fails":357}],369:[function(require,module,exports){
var isObject = require('../internals/is-object');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

},{"../internals/is-object":375,"../internals/object-set-prototype-of":392}],370:[function(require,module,exports){
var store = require('../internals/shared-store');

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;

},{"../internals/shared-store":409}],371:[function(require,module,exports){
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var objectHas = require('../internals/has');
var shared = require('../internals/shared-store');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/create-non-enumerable-property":343,"../internals/global":362,"../internals/has":363,"../internals/hidden-keys":364,"../internals/is-object":375,"../internals/native-weak-map":384,"../internals/shared-key":408,"../internals/shared-store":409}],372:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/iterators":380,"../internals/well-known-symbol":424}],373:[function(require,module,exports){
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};

},{"../internals/classof-raw":339}],374:[function(require,module,exports){
var fails = require('../internals/fails');

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":357}],375:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"dup":98}],376:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"dup":106}],377:[function(require,module,exports){
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

},{"../internals/classof-raw":339,"../internals/is-object":375,"../internals/well-known-symbol":424}],378:[function(require,module,exports){
var anObject = require('../internals/an-object');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var bind = require('../internals/function-bind-context');
var getIteratorMethod = require('../internals/get-iterator-method');
var iteratorClose = require('../internals/iterator-close');

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  next = iterator.next;
  while (!(step = next.call(iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator);
      throw error;
    }
    if (typeof result == 'object' && result && result instanceof Result) return result;
  } return new Result(false);
};

},{"../internals/an-object":331,"../internals/function-bind-context":359,"../internals/get-iterator-method":361,"../internals/is-array-iterator-method":372,"../internals/iterator-close":379,"../internals/to-length":418}],379:[function(require,module,exports){
var anObject = require('../internals/an-object');

module.exports = function (iterator) {
  var returnMethod = iterator['return'];
  if (returnMethod !== undefined) {
    return anObject(returnMethod.call(iterator)).value;
  }
};

},{"../internals/an-object":331}],380:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"dup":105}],381:[function(require,module,exports){
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var macrotask = require('../internals/task').set;
var IS_IOS = require('../internals/engine-is-ios');
var IS_WEBOS_WEBKIT = require('../internals/engine-is-webos-webkit');
var IS_NODE = require('../internals/engine-is-node');

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = promise.then;
    notify = function () {
      then.call(promise, flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};

},{"../internals/engine-is-ios":350,"../internals/engine-is-node":351,"../internals/engine-is-webos-webkit":352,"../internals/global":362,"../internals/object-get-own-property-descriptor":387,"../internals/task":414}],382:[function(require,module,exports){
var global = require('../internals/global');

module.exports = global.Promise;

},{"../internals/global":362}],383:[function(require,module,exports){
/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = require('../internals/engine-v8-version');
var fails = require('../internals/fails');

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  return !String(Symbol()) ||
    // Chrome 38 Symbol has incorrect toString conversion
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

},{"../internals/engine-v8-version":354,"../internals/fails":357}],384:[function(require,module,exports){
var global = require('../internals/global');
var inspectSource = require('../internals/inspect-source');

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

},{"../internals/global":362,"../internals/inspect-source":370}],385:[function(require,module,exports){
'use strict';
var aFunction = require('../internals/a-function');

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
};

// 25.4.1.5 NewPromiseCapability(C)
module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"../internals/a-function":327}],386:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/an-object":331,"../internals/descriptors":346,"../internals/ie8-dom-define":367,"../internals/to-primitive":420}],387:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};

},{"../internals/create-property-descriptor":344,"../internals/descriptors":346,"../internals/has":363,"../internals/ie8-dom-define":367,"../internals/object-property-is-enumerable":391,"../internals/to-indexed-object":416,"../internals/to-primitive":420}],388:[function(require,module,exports){
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/enum-bug-keys":355,"../internals/object-keys-internal":390}],389:[function(require,module,exports){
// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

},{}],390:[function(require,module,exports){
var has = require('../internals/has');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};

},{"../internals/array-includes":333,"../internals/has":363,"../internals/hidden-keys":364,"../internals/to-indexed-object":416}],391:[function(require,module,exports){
'use strict';
var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

},{}],392:[function(require,module,exports){
/* eslint-disable no-proto -- safe */
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/a-possible-prototype":328,"../internals/an-object":331}],393:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

},{"../internals/classof":340,"../internals/to-string-tag-support":421}],394:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};

},{"../internals/an-object":331,"../internals/get-built-in":360,"../internals/object-get-own-property-names":388,"../internals/object-get-own-property-symbols":389}],395:[function(require,module,exports){
var global = require('../internals/global');

module.exports = global;

},{"../internals/global":362}],396:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};

},{}],397:[function(require,module,exports){
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var newPromiseCapability = require('../internals/new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"../internals/an-object":331,"../internals/is-object":375,"../internals/new-promise-capability":385}],398:[function(require,module,exports){
var redefine = require('../internals/redefine');

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};

},{"../internals/redefine":399}],399:[function(require,module,exports){
var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var setGlobal = require('../internals/set-global');
var inspectSource = require('../internals/inspect-source');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var state;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) {
      createNonEnumerableProperty(value, 'name', key);
    }
    state = enforceInternalState(value);
    if (!state.source) {
      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
    }
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});

},{"../internals/create-non-enumerable-property":343,"../internals/global":362,"../internals/has":363,"../internals/inspect-source":370,"../internals/internal-state":371,"../internals/set-global":405}],400:[function(require,module,exports){
var classof = require('./classof-raw');
var regexpExec = require('./regexp-exec');

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};


},{"./classof-raw":339,"./regexp-exec":401}],401:[function(require,module,exports){
'use strict';
/* eslint-disable regexp/no-assertion-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var regexpFlags = require('./regexp-flags');
var stickyHelpers = require('./regexp-sticky-helpers');
var shared = require('./shared');

var nativeExec = RegExp.prototype.exec;
var nativeReplace = shared('native-string-replace', String.prototype.replace);

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./regexp-flags":402,"./regexp-sticky-helpers":403,"./shared":410}],402:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"../internals/an-object":331}],403:[function(require,module,exports){
'use strict';

var fails = require('./fails');

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

},{"./fails":357}],404:[function(require,module,exports){
// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};

},{}],405:[function(require,module,exports){
var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};

},{"../internals/create-non-enumerable-property":343,"../internals/global":362}],406:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var definePropertyModule = require('../internals/object-define-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var DESCRIPTORS = require('../internals/descriptors');

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

},{"../internals/descriptors":346,"../internals/get-built-in":360,"../internals/object-define-property":386,"../internals/well-known-symbol":424}],407:[function(require,module,exports){
var defineProperty = require('../internals/object-define-property').f;
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};

},{"../internals/has":363,"../internals/object-define-property":386,"../internals/well-known-symbol":424}],408:[function(require,module,exports){
var shared = require('../internals/shared');
var uid = require('../internals/uid');

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":410,"../internals/uid":422}],409:[function(require,module,exports){
var global = require('../internals/global');
var setGlobal = require('../internals/set-global');

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;

},{"../internals/global":362,"../internals/set-global":405}],410:[function(require,module,exports){
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.12.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/is-pure":376,"../internals/shared-store":409}],411:[function(require,module,exports){
var anObject = require('../internals/an-object');
var aFunction = require('../internals/a-function');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};

},{"../internals/a-function":327,"../internals/an-object":331,"../internals/well-known-symbol":424}],412:[function(require,module,exports){
var fails = require('../internals/fails');

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};

},{"../internals/fails":357}],413:[function(require,module,exports){
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

},{"../internals/require-object-coercible":404,"../internals/to-integer":417}],414:[function(require,module,exports){
var global = require('../internals/global');
var fails = require('../internals/fails');
var bind = require('../internals/function-bind-context');
var html = require('../internals/html');
var createElement = require('../internals/document-create-element');
var IS_IOS = require('../internals/engine-is-ios');
var IS_NODE = require('../internals/engine-is-node');

var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins -- safe
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(id + '', location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func -- spec requirement
      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    typeof postMessage == 'function' &&
    !global.importScripts &&
    location && location.protocol !== 'file:' &&
    !fails(post)
  ) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};

},{"../internals/document-create-element":347,"../internals/engine-is-ios":350,"../internals/engine-is-node":351,"../internals/fails":357,"../internals/function-bind-context":359,"../internals/global":362,"../internals/html":366}],415:[function(require,module,exports){
var toInteger = require('../internals/to-integer');

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer":417}],416:[function(require,module,exports){
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":368,"../internals/require-object-coercible":404}],417:[function(require,module,exports){
var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

},{}],418:[function(require,module,exports){
var toInteger = require('../internals/to-integer');

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer":417}],419:[function(require,module,exports){
var requireObjectCoercible = require('../internals/require-object-coercible');

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":404}],420:[function(require,module,exports){
var isObject = require('../internals/is-object');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"../internals/is-object":375}],421:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":424}],422:[function(require,module,exports){
var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};

},{}],423:[function(require,module,exports){
/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = require('../internals/native-symbol');

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';

},{"../internals/native-symbol":383}],424:[function(require,module,exports){
var global = require('../internals/global');
var shared = require('../internals/shared');
var has = require('../internals/has');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    if (NATIVE_SYMBOL && has(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
    }
  } return WellKnownSymbolsStore[name];
};

},{"../internals/global":362,"../internals/has":363,"../internals/native-symbol":383,"../internals/shared":410,"../internals/uid":422,"../internals/use-symbol-as-uid":423}],425:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

},{"../internals/array-method-has-species-support":335,"../internals/array-species-create":337,"../internals/create-property":345,"../internals/engine-v8-version":354,"../internals/export":356,"../internals/fails":357,"../internals/is-array":373,"../internals/is-object":375,"../internals/to-length":418,"../internals/to-object":419,"../internals/well-known-symbol":424}],426:[function(require,module,exports){
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var redefine = require('../internals/redefine');
var toString = require('../internals/object-to-string');

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}

},{"../internals/object-to-string":393,"../internals/redefine":399,"../internals/to-string-tag-support":421}],427:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var NativePromise = require('../internals/native-promise-constructor');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var setSpecies = require('../internals/set-species');
var isObject = require('../internals/is-object');
var aFunction = require('../internals/a-function');
var anInstance = require('../internals/an-instance');
var inspectSource = require('../internals/inspect-source');
var iterate = require('../internals/iterate');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var speciesConstructor = require('../internals/species-constructor');
var task = require('../internals/task').set;
var microtask = require('../internals/microtask');
var promiseResolve = require('../internals/promise-resolve');
var hostReportErrors = require('../internals/host-report-errors');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var InternalStateModule = require('../internals/internal-state');
var isForced = require('../internals/is-forced');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_BROWSER = require('../internals/engine-is-browser');
var IS_NODE = require('../internals/engine-is-node');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var NativePromisePrototype = NativePromise && NativePromise.prototype;
var PromiseConstructor = NativePromise;
var PromiseConstructorPrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var SUBCLASSING = false;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromiseConstructorPrototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = new PromiseConstructor(function (resolve) { resolve(1); });
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
  if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  task.call(global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  task.call(global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aFunction(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };
  PromiseConstructorPrototype = PromiseConstructor.prototype;
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructorPrototype, {
    // `Promise.prototype.then` method
    // https://tc39.es/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.es/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && typeof NativePromise == 'function' && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          nativeThen.call(that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });

      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
      redefine(NativePromisePrototype, 'catch', PromiseConstructorPrototype['catch'], { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromiseConstructorPrototype);
    }
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.es/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.es/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.es/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.es/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-function":327,"../internals/an-instance":330,"../internals/check-correctness-of-iteration":338,"../internals/engine-is-browser":349,"../internals/engine-is-node":351,"../internals/engine-v8-version":354,"../internals/export":356,"../internals/get-built-in":360,"../internals/global":362,"../internals/host-report-errors":365,"../internals/inspect-source":370,"../internals/internal-state":371,"../internals/is-forced":374,"../internals/is-object":375,"../internals/is-pure":376,"../internals/iterate":378,"../internals/microtask":381,"../internals/native-promise-constructor":382,"../internals/new-promise-capability":385,"../internals/object-set-prototype-of":392,"../internals/perform":396,"../internals/promise-resolve":397,"../internals/redefine":399,"../internals/redefine-all":398,"../internals/set-species":406,"../internals/set-to-string-tag":407,"../internals/species-constructor":411,"../internals/task":414,"../internals/well-known-symbol":424}],428:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var inheritIfRequired = require('../internals/inherit-if-required');
var defineProperty = require('../internals/object-define-property').f;
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var isRegExp = require('../internals/is-regexp');
var getFlags = require('../internals/regexp-flags');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var enforceInternalState = require('../internals/internal-state').enforce;
var setSpecies = require('../internals/set-species');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
})));

// `RegExp` constructor
// https://tc39.es/ecma262/#sec-regexp-constructor
if (FORCED) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var sticky;

    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
      return pattern;
    }

    if (CORRECT_NEW) {
      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
    } else if (pattern instanceof RegExpWrapper) {
      if (flagsAreUndefined) flags = getFlags.call(pattern);
      pattern = pattern.source;
    }

    if (UNSUPPORTED_Y) {
      sticky = !!flags && flags.indexOf('y') > -1;
      if (sticky) flags = flags.replace(/y/g, '');
    }

    var result = inheritIfRequired(
      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
      thisIsRegExp ? this : RegExpPrototype,
      RegExpWrapper
    );

    if (UNSUPPORTED_Y && sticky) {
      var state = enforceInternalState(result);
      state.sticky = true;
    }

    return result;
  };
  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };
  var keys = getOwnPropertyNames(NativeRegExp);
  var index = 0;
  while (keys.length > index) proxy(keys[index++]);
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.es/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');

},{"../internals/descriptors":346,"../internals/fails":357,"../internals/global":362,"../internals/inherit-if-required":369,"../internals/internal-state":371,"../internals/is-forced":374,"../internals/is-regexp":377,"../internals/object-define-property":386,"../internals/object-get-own-property-names":388,"../internals/redefine":399,"../internals/regexp-flags":402,"../internals/regexp-sticky-helpers":403,"../internals/set-species":406,"../internals/well-known-symbol":424}],429:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var exec = require('../internals/regexp-exec');

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});

},{"../internals/export":356,"../internals/regexp-exec":401}],430:[function(require,module,exports){
'use strict';
var redefine = require('../internals/redefine');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');
var flags = require('../internals/regexp-flags');

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}

},{"../internals/an-object":331,"../internals/fails":357,"../internals/redefine":399,"../internals/regexp-flags":402}],431:[function(require,module,exports){
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toLength = require('../internals/to-length');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@match logic
fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : regexp[MATCH];
      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative(nativeMatch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"../internals/advance-string-index":329,"../internals/an-object":331,"../internals/fix-regexp-well-known-symbol-logic":358,"../internals/regexp-exec-abstract":400,"../internals/require-object-coercible":404,"../internals/to-length":418}],432:[function(require,module,exports){
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var isRegExp = require('../internals/is-regexp');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var toLength = require('../internals/to-length');
var callRegExpExec = require('../internals/regexp-exec-abstract');
var regexpExec = require('../internals/regexp-exec');
var stickyHelpers = require('../internals/regexp-sticky-helpers');

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (UNSUPPORTED_Y ? 'g' : 'y');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, UNSUPPORTED_Y);

},{"../internals/advance-string-index":329,"../internals/an-object":331,"../internals/fix-regexp-well-known-symbol-logic":358,"../internals/is-regexp":377,"../internals/regexp-exec":401,"../internals/regexp-exec-abstract":400,"../internals/regexp-sticky-helpers":403,"../internals/require-object-coercible":404,"../internals/species-constructor":411,"../internals/to-length":418}],433:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.sub` method
// https://tc39.es/ecma262/#sec-string.prototype.sub
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {
  sub: function sub() {
    return createHTML(this, 'sub', '', '');
  }
});

},{"../internals/create-html":342,"../internals/export":356,"../internals/string-html-forced":412}],434:[function(require,module,exports){
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var forEach = require('../internals/array-for-each');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}

},{"../internals/array-for-each":332,"../internals/create-non-enumerable-property":343,"../internals/dom-iterables":348,"../internals/global":362}],435:[function(require,module,exports){
Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),window.Element&&!Element.prototype.closest&&(Element.prototype.closest=function(e){var t=this;do{if(t.matches(e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null});

},{}],436:[function(require,module,exports){
!function(){function t(){var e=Array.prototype.slice.call(arguments),o=document.createDocumentFragment();e.forEach(function(e){var t=e instanceof Node;o.appendChild(t?e:document.createTextNode(String(e)))}),this.parentNode.insertBefore(o,this)}[Element.prototype,CharacterData.prototype,DocumentType.prototype].forEach(function(e){e.hasOwnProperty("before")||Object.defineProperty(e,"before",{configurable:!0,enumerable:!0,writable:!0,value:t})})}();

},{}],437:[function(require,module,exports){
!function(){function t(){null!==this.parentNode&&this.parentNode.removeChild(this)}[Element.prototype,CharacterData.prototype,DocumentType.prototype].forEach(function(e){e.hasOwnProperty("remove")||Object.defineProperty(e,"remove",{configurable:!0,enumerable:!0,writable:!0,value:t})})}();

},{}],438:[function(require,module,exports){
window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(o,t){t=t||window;for(var i=0;i<this.length;i++)o.call(t,this[i],i,this)});

},{}],439:[function(require,module,exports){
/*!
 * pulltorefreshjs v0.1.22
 * (c) Rafael Soto
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.PullToRefresh = factory());
}(this, function () { 'use strict';

  var _shared = {
    pullStartY: null,
    pullMoveY: null,
    handlers: [],
    styleEl: null,
    events: null,
    dist: 0,
    state: 'pending',
    timeout: null,
    distResisted: 0,
    supportsPassive: false,
    supportsPointerEvents: typeof window !== 'undefined' && !!window.PointerEvent
  };

  try {
    window.addEventListener('test', null, {
      get passive() {
        // eslint-disable-line getter-return
        _shared.supportsPassive = true;
      }

    });
  } catch (e) {// do nothing
  }

  function setupDOM(handler) {
    if (!handler.ptrElement) {
      var ptr = document.createElement('div');

      if (handler.mainElement !== document.body) {
        handler.mainElement.parentNode.insertBefore(ptr, handler.mainElement);
      } else {
        document.body.insertBefore(ptr, document.body.firstChild);
      }

      ptr.classList.add(((handler.classPrefix) + "ptr"));
      ptr.innerHTML = handler.getMarkup().replace(/__PREFIX__/g, handler.classPrefix);
      handler.ptrElement = ptr;

      if (typeof handler.onInit === 'function') {
        handler.onInit(handler);
      } // Add the css styles to the style node, and then
      // insert it into the dom


      if (!_shared.styleEl) {
        _shared.styleEl = document.createElement('style');

        _shared.styleEl.setAttribute('id', 'pull-to-refresh-js-style');

        document.head.appendChild(_shared.styleEl);
      }

      _shared.styleEl.textContent = handler.getStyles().replace(/__PREFIX__/g, handler.classPrefix).replace(/\s+/g, ' ');
    }

    return handler;
  }

  function onReset(handler) {
    if (!handler.ptrElement) { return; }
    handler.ptrElement.classList.remove(((handler.classPrefix) + "refresh"));
    handler.ptrElement.style[handler.cssProp] = '0px';
    setTimeout(function () {
      // remove previous ptr-element from DOM
      if (handler.ptrElement && handler.ptrElement.parentNode) {
        handler.ptrElement.parentNode.removeChild(handler.ptrElement);
        handler.ptrElement = null;
      } // reset state


      _shared.state = 'pending';
    }, handler.refreshTimeout);
  }

  function update(handler) {
    var iconEl = handler.ptrElement.querySelector(("." + (handler.classPrefix) + "icon"));
    var textEl = handler.ptrElement.querySelector(("." + (handler.classPrefix) + "text"));

    if (iconEl) {
      if (_shared.state === 'refreshing') {
        iconEl.innerHTML = handler.iconRefreshing;
      } else {
        iconEl.innerHTML = handler.iconArrow;
      }
    }

    if (textEl) {
      if (_shared.state === 'releasing') {
        textEl.innerHTML = handler.instructionsReleaseToRefresh;
      }

      if (_shared.state === 'pulling' || _shared.state === 'pending') {
        textEl.innerHTML = handler.instructionsPullToRefresh;
      }

      if (_shared.state === 'refreshing') {
        textEl.innerHTML = handler.instructionsRefreshing;
      }
    }
  }

  var _ptr = {
    setupDOM: setupDOM,
    onReset: onReset,
    update: update
  };

  var _timeout;

  var screenY = function screenY(event) {
    if (_shared.pointerEventsEnabled && _shared.supportsPointerEvents) {
      return event.screenY;
    }

    return event.touches[0].screenY;
  };

  var _setupEvents = (function () {
    var _el;

    function _onTouchStart(e) {
      // here, we must pick a handler first, and then append their html/css on the DOM
      var target = _shared.handlers.filter(function (h) { return h.contains(e.target); })[0];

      _shared.enable = !!target;

      if (target && _shared.state === 'pending') {
        _el = _ptr.setupDOM(target);

        if (target.shouldPullToRefresh()) {
          _shared.pullStartY = screenY(e);
        }

        clearTimeout(_shared.timeout);

        _ptr.update(target);
      }
    }

    function _onTouchMove(e) {
      if (!(_el && _el.ptrElement && _shared.enable)) {
        return;
      }

      if (!_shared.pullStartY) {
        if (_el.shouldPullToRefresh()) {
          _shared.pullStartY = screenY(e);
        }
      } else {
        _shared.pullMoveY = screenY(e);
      }

      if (_shared.state === 'refreshing') {
        if (e.cancelable && _el.shouldPullToRefresh() && _shared.pullStartY < _shared.pullMoveY) {
          e.preventDefault();
        }

        return;
      }

      if (_shared.state === 'pending') {
        _el.ptrElement.classList.add(((_el.classPrefix) + "pull"));

        _shared.state = 'pulling';

        _ptr.update(_el);
      }

      if (_shared.pullStartY && _shared.pullMoveY) {
        _shared.dist = _shared.pullMoveY - _shared.pullStartY;
      }

      _shared.distExtra = _shared.dist - _el.distIgnore;

      if (_shared.distExtra > 0) {
        if (e.cancelable) {
          e.preventDefault();
        }

        _el.ptrElement.style[_el.cssProp] = (_shared.distResisted) + "px";
        _shared.distResisted = _el.resistanceFunction(_shared.distExtra / _el.distThreshold) * Math.min(_el.distMax, _shared.distExtra);

        if (_shared.state === 'pulling' && _shared.distResisted > _el.distThreshold) {
          _el.ptrElement.classList.add(((_el.classPrefix) + "release"));

          _shared.state = 'releasing';

          _ptr.update(_el);
        }

        if (_shared.state === 'releasing' && _shared.distResisted < _el.distThreshold) {
          _el.ptrElement.classList.remove(((_el.classPrefix) + "release"));

          _shared.state = 'pulling';

          _ptr.update(_el);
        }
      }
    }

    function _onTouchEnd() {
      if (!(_el && _el.ptrElement && _shared.enable)) {
        return;
      } // wait 1/2 sec before unmounting...


      clearTimeout(_timeout);
      _timeout = setTimeout(function () {
        if (_el && _el.ptrElement && _shared.state === 'pending') {
          _ptr.onReset(_el);
        }
      }, 500);

      if (_shared.state === 'releasing' && _shared.distResisted > _el.distThreshold) {
        _shared.state = 'refreshing';
        _el.ptrElement.style[_el.cssProp] = (_el.distReload) + "px";

        _el.ptrElement.classList.add(((_el.classPrefix) + "refresh"));

        _shared.timeout = setTimeout(function () {
          var retval = _el.onRefresh(function () { return _ptr.onReset(_el); });

          if (retval && typeof retval.then === 'function') {
            retval.then(function () { return _ptr.onReset(_el); });
          }

          if (!retval && !_el.onRefresh.length) {
            _ptr.onReset(_el);
          }
        }, _el.refreshTimeout);
      } else {
        if (_shared.state === 'refreshing') {
          return;
        }

        _el.ptrElement.style[_el.cssProp] = '0px';
        _shared.state = 'pending';
      }

      _ptr.update(_el);

      _el.ptrElement.classList.remove(((_el.classPrefix) + "release"));

      _el.ptrElement.classList.remove(((_el.classPrefix) + "pull"));

      _shared.pullStartY = _shared.pullMoveY = null;
      _shared.dist = _shared.distResisted = 0;
    }

    function _onScroll() {
      if (_el) {
        _el.mainElement.classList.toggle(((_el.classPrefix) + "top"), _el.shouldPullToRefresh());
      }
    }

    var _passiveSettings = _shared.supportsPassive ? {
      passive: _shared.passive || false
    } : undefined;

    if (_shared.pointerEventsEnabled && _shared.supportsPointerEvents) {
      window.addEventListener('pointerup', _onTouchEnd);
      window.addEventListener('pointerdown', _onTouchStart);
      window.addEventListener('pointermove', _onTouchMove, _passiveSettings);
    } else {
      window.addEventListener('touchend', _onTouchEnd);
      window.addEventListener('touchstart', _onTouchStart);
      window.addEventListener('touchmove', _onTouchMove, _passiveSettings);
    }

    window.addEventListener('scroll', _onScroll);
    return {
      onTouchEnd: _onTouchEnd,
      onTouchStart: _onTouchStart,
      onTouchMove: _onTouchMove,
      onScroll: _onScroll,

      destroy: function destroy() {
        if (_shared.pointerEventsEnabled && _shared.supportsPointerEvents) {
          window.removeEventListener('pointerdown', _onTouchStart);
          window.removeEventListener('pointerup', _onTouchEnd);
          window.removeEventListener('pointermove', _onTouchMove, _passiveSettings);
        } else {
          window.removeEventListener('touchstart', _onTouchStart);
          window.removeEventListener('touchend', _onTouchEnd);
          window.removeEventListener('touchmove', _onTouchMove, _passiveSettings);
        }

        window.removeEventListener('scroll', _onScroll);
      }

    };
  });

  var _ptrMarkup = "\n<div class=\"__PREFIX__box\">\n  <div class=\"__PREFIX__content\">\n    <div class=\"__PREFIX__icon\"></div>\n    <div class=\"__PREFIX__text\"></div>\n  </div>\n</div>\n";

  var _ptrStyles = "\n.__PREFIX__ptr {\n  box-shadow: inset 0 -3px 5px rgba(0, 0, 0, 0.12);\n  pointer-events: none;\n  font-size: 0.85em;\n  font-weight: bold;\n  top: 0;\n  height: 0;\n  transition: height 0.3s, min-height 0.3s;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n  display: flex;\n  align-items: flex-end;\n  align-content: stretch;\n}\n\n.__PREFIX__box {\n  padding: 10px;\n  flex-basis: 100%;\n}\n\n.__PREFIX__pull {\n  transition: none;\n}\n\n.__PREFIX__text {\n  margin-top: .33em;\n  color: rgba(0, 0, 0, 0.3);\n}\n\n.__PREFIX__icon {\n  color: rgba(0, 0, 0, 0.3);\n  transition: transform .3s;\n}\n\n/*\nWhen at the top of the page, disable vertical overscroll so passive touch\nlisteners can take over.\n*/\n.__PREFIX__top {\n  touch-action: pan-x pan-down pinch-zoom;\n}\n\n.__PREFIX__release .__PREFIX__icon {\n  transform: rotate(180deg);\n}\n";

  var _defaults = {
    distThreshold: 60,
    distMax: 80,
    distReload: 50,
    distIgnore: 0,
    mainElement: 'body',
    triggerElement: 'body',
    ptrElement: '.ptr',
    classPrefix: 'ptr--',
    cssProp: 'min-height',
    iconArrow: '&#8675;',
    iconRefreshing: '&hellip;',
    instructionsPullToRefresh: 'Pull down to refresh',
    instructionsReleaseToRefresh: 'Release to refresh',
    instructionsRefreshing: 'Refreshing',
    refreshTimeout: 500,
    getMarkup: function () { return _ptrMarkup; },
    getStyles: function () { return _ptrStyles; },
    onInit: function () {},
    onRefresh: function () { return location.reload(); },
    resistanceFunction: function (t) { return Math.min(1, t / 2.5); },
    shouldPullToRefresh: function () { return !window.scrollY; }
  };

  var _methods = ['mainElement', 'ptrElement', 'triggerElement'];
  var _setupHandler = (function (options) {
    var _handler = {}; // merge options with defaults

    Object.keys(_defaults).forEach(function (key) {
      _handler[key] = options[key] || _defaults[key];
    }); // normalize timeout value, even if it is zero

    _handler.refreshTimeout = typeof options.refreshTimeout === 'number' ? options.refreshTimeout : _defaults.refreshTimeout; // normalize elements

    _methods.forEach(function (method) {
      if (typeof _handler[method] === 'string') {
        _handler[method] = document.querySelector(_handler[method]);
      }
    }); // attach events lazily


    if (!_shared.events) {
      _shared.events = _setupEvents();
    }

    _handler.contains = function (target) {
      return _handler.triggerElement.contains(target);
    };

    _handler.destroy = function () {
      // stop pending any pending callbacks
      clearTimeout(_shared.timeout); // remove handler from shared state

      var offset = _shared.handlers.indexOf(_handler);

      _shared.handlers.splice(offset, 1);
    };

    return _handler;
  });

  var index = {
    setPassiveMode: function setPassiveMode(isPassive) {
      _shared.passive = isPassive;
    },

    setPointerEventsMode: function setPointerEventsMode(isEnabled) {
      _shared.pointerEventsEnabled = isEnabled;
    },

    destroyAll: function destroyAll() {
      if (_shared.events) {
        _shared.events.destroy();

        _shared.events = null;
      }

      _shared.handlers.forEach(function (h) {
        h.destroy();
      });
    },

    init: function init(options) {
      if ( options === void 0 ) options = {};

      var handler = _setupHandler(options);

      _shared.handlers.push(handler);

      return handler;
    },

    // export utils for testing
    _: {
      setupHandler: _setupHandler,
      setupEvents: _setupEvents,
      setupDOM: _ptr.setupDOM,
      onReset: _ptr.onReset,
      update: _ptr.update
    }
  };

  return index;

}));

},{}],440:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],441:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.WHATWGFetch = {})));
}(this, (function (exports) { 'use strict';

  var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    (typeof global !== 'undefined' && global);

  var support = {
    searchParams: 'URLSearchParams' in global,
    iterable: 'Symbol' in global && 'iterator' in Symbol,
    blob:
      'FileReader' in global &&
      'Blob' in global &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in global,
    arrayBuffer: 'ArrayBuffer' in global
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
      throw new TypeError('Invalid character in header field name: "' + name + '"')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed
          }
          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(
              this._bodyArrayBuffer.buffer.slice(
                this._bodyArrayBuffer.byteOffset,
                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
              )
            )
          } else {
            return Promise.resolve(this._bodyArrayBuffer)
          }
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }

    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);

    if (this.method === 'GET' || this.method === 'HEAD') {
      if (options.cache === 'no-store' || options.cache === 'no-cache') {
        // Search for a '_' parameter in the query string
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          // If it already exists then set the value with the current time
          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
        } else {
          // Otherwise add a new '_' parameter to the end with the current time
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
        }
      }
    }
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders
      .split('\r')
      .map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
      })
      .forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = global.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };

      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.onabort = function() {
        setTimeout(function() {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        }, 0);
      };

      function fixUrl(url) {
        try {
          return url === '' && global.location.href ? global.location.href : url
        } catch (e) {
          return url
        }
      }

      xhr.open(request.method, fixUrl(request.url), true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr) {
        if (support.blob) {
          xhr.responseType = 'blob';
        } else if (
          support.arrayBuffer &&
          request.headers.get('Content-Type') &&
          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
        ) {
          xhr.responseType = 'arraybuffer';
        }
      }

      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!global.fetch) {
    global.fetch = fetch;
    global.Headers = Headers;
    global.Request = Request;
    global.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}]},{},[18])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
